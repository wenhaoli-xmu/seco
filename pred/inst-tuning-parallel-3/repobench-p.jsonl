{"pred": "    private final transient JKademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Used to store the state of the DHT */\n    private final File stateFile;\n\n    /* Used to store the state of the Routing Table */\n    private final File routingTableFile;\n\n    /* Used to store", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // mEffects.add(new KernelBlurEffect());\n        // mEffects.add(new KernelEdgeDetectEffect());\n        // mEffects.add(new KernelEmbossEffect());\n        // mEffects.add(new KernelGaussBlurEffect());\n        // mEffects.add(new KernelSharpenEffect());\n        // mEffects.add(new SobelEffect", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y])\n\n\nNext line of code:\nclass MyCipher(Cipher):", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;Next line of code:\n    private StackEffect mStackEffect;Next line of code:\n    private WatermarkEffect mWatermarkEffect;Next line of code:\n    private InterlaceEffect mInterlaceEffect;Next line of code:\n    private Imm", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventCallbacks.putIfAbsent(event, new Consumer<Boolean>() {\n            @Override\n            public void accept(Boolean result) {\n                if (result", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务元数据信息管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    public TaskRunnerContainer(Task", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.vault(), passphrase, args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"No problems found.\");\n\t\t\t} else {\n\t\t\t\tprint(\"Found problems:\");\n\t\t\t\tproblems.forEach(problem -> print(problem.name()));\n\t\t\t}\n\t\t} catch", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getGeneratedPrivateKeyInBase64(), pubKeyInBase64);\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), e.getMessage());\n            return false;\n        }\n    }\n\n    @Override\n    protected", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_AUTHENTICATE, SESSION_ID);\n\n    assertEquals(new U2fSignRequest(SERVER_CHALLENGE_SIGN, APP_ID_AUTHENTICATE, SESSION_ID), signRequest);\n  }\n\n  @Test\n  public", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.remote_ip, self.source, self.pass_headers)\n        else:\n            self.acctA = FakeAccounting(self.cId, self.remote_ip, self.source, self.pass_headers)\n        self.acctA.start()\n        self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "        from..packets import SignatureV4\n        from..packets import SignatureV3\n        from..packets import SignatureV2\n        from..packets import SignatureV1\n        from..packets import SignatureV0\n        from..packets import SignatureV5\n        from..pack", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            return\n\n          cstr_node.lhs = convert_ast_constraint(children[0])\n          process_children(cstr_node.lhs, children[0])\n\n          if cstr_node.binary:\n            cstr_node.rhs = convert_ast_constraint(children[1])\n            process_children(cstr_node.rhs, children[1])\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.getTDActivity().isTablet() && activity.getTDActivity().getDefaultSharedPreferences().getBoolean(TD", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        PostLocationDataBody data = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude, AppSettings.sFindPeopleMessage, AppSettings.sUserEmail, AppSettings.sUserName, AppSettings.sUserAvatarUrl);\n        OkHttpClient client = new OkHttpClient();\n        Retrofit retrofit = new Retrofit.Builder()\n               .", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        net = Network()\n        net.add_layer(InputLayer(1, 1, 1, 1))\n        net.add_layer(ConvLayer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class BaseModel:\n        class Meta(IMeta):\n        def __new__(cls, *args, **kwargs):\n            init_called = True\n            return super().__new__(cls, *args, **kwargs)\n\n        def __init__(self, *args, **kwargs):\n            pass\n\n        def __repr__(", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "        if isinstance(result, XPathNode):\n            yield result\n\n    if context.item is not None:\n        context.item = None\n\n\n@method(infix('!', bp=72))\ndef evaluate_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECT(\"", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        await wild.set_message(wild_report)\n\n        await wild.insert()\n\n        await wild_report.add_reaction(MyEmojis.REMOTE)\n\n        await wild_report.add_reaction(MyEmojis.INVITE)\n\n        await wild_report.add_reaction(MyEmojis.HERE)\n\n        await wild_report.add_reaction(MyEmojis.COMING)\n\n       ", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(vocab=vocab, **c['data'])\n    # Initialize model\nNext line of code:\n    model = NLISimple(**c['model'])\n    # Initialize algorithm\nNext line of code:\n    algorithm = GradientDescent(model=model, step_rule=Adam(0.001", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n\ndef test_params_tcxo_poly():\n", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n\n            } else if (raffle.isValid() &&!isMan) {\n\n                Participant participant =", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "        assert self.redlock.locked() >= self.redlock.auto_release_time\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.locked()\n        self.redlock.release()\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self, \"Sound\")\n\n    @property\n    def threed_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :type: ConeSettings\n        \"\"\"\n        return ConeSettings(self, \"Sound\")\n\n    @property", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "        return self._calg\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self._calg = None\n\n    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes.append(self._calg)\n        _bytes += self._data\n", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity = findCellIntensity(img, centers, verbose = verbose, out = out, **parameter);\n        \n        #return cell coordinates, raw intensity, fully filtered int", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n\rNext line of code:\n    private boolean checkDirectoryValid(File transactionLogDir) {\r\n        return transactionLogDir.exists", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                }\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute a query and return the result as a JSON array.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n     * @return\n     * @throws java.lang.Exception", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    usage_encryption=UsageEncryption.OSY,\n                    operation_mode=OperationMode.CBC,\n                    encryption_algorithm=EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_value=b'00000000000000000000000000000000',\n                    algorithm_parameter_name=AlgorithmParameterName.KYE,\n                    algorithm", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] == 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_CEC) {\n            if (env.backrefedMem == 0 || (Config.U", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^get-workflow-steps$', get_workflow_steps, name=\"ajax-get-workflow-steps\"),\n    url(r'^get-pipeline-job-template$', get_pipeline_job_template, name=\"ajax-get-pipeline-job-template\"),\n    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString notEnoughData;\n\t\tNext line of code:\n\t\tString notEnoughData;\n\t\tNext line of code:\n\t\tString notEnoughData;\n\t\tNext line of code:\n\t\tString notEnoughData;\n\t\tNext line of code:\n\t\tString notEnoughData;\n\t\tNext line of code", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n\n    def set_client_id(self, _cid):\n        self._client_id = _cid\n        return self\n\n    def set_user(self, _user):\n        self._user = _user\n        return self\n\n    def set_pass(self, _", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <T, U, R> WhenApplyingTwoArguments<T, U, R> whenApplyingTwoArguments(CheckedBiFunction<T, U, R> whenStep,\n            Queue<Supplier> arguments) {\n        return new WhenApplyingTwoArguments<>(preparation, functions.toFunction(when", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    String result = process.await();\n    if (expectedExitCodes.length > 0) {\n      int exitCode = Integer.parseInt(result);\n      if (!Arrays.asList(expectedExitCodes).contains(exitCode)) {\n        throw new IosDeviceException(\n            RealDeviceImpl.this,\n            String.format(\"Process exited with code", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(\"#\" + options.getString(Keys.TEXT_COLOR, \"000000\"));\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\t\tfontStyle = Integer.parseInt(options.getString(Keys.FONT_STYLE, \"0\"));\n\t}\n\t\n\tprivate void setIconSize() {Next line of code:\n", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tlog.info(\"message >>> \" + message);\n\t\tAbstractEvent event = message.asEvent();\n\t\tlog.info(\"event >>> \" + event);\n\t\tif (event instanceof SubscribeEvent) {\n\t\t\tSubscribeEvent subscribeEvent = (SubscribeEvent) event", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    if not os.path.exists(file_path + '_info/'):\n        os.makedirs(file_path + '_info/')\n    app_info = get_app_info(file_path)\n    if app_info is None:\n        return\n    # 获取运行时特征\n    dynamic_result = dynamic_analysis(file_path, app_info)\n    #", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid report.\n\n        \"\"\"\n\n        city = await ctx.city()\n        timezone = await ctx.guild_profile(key='timezone')\n        raid_party_id = next(snowflake.create", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11))\n        self.assertEqual(date_string_to_date(\"09/02/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', os.path.dirname(config_file))\n        config_actor.start()\n\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n\n        gevent.sleep(1)\n\n        # start honeypot session\n        honeypot_session = Honeyp", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:Next line of code:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsavemgh_v2(positive_data, position_array, \"pFWER_%s\" % opts.tmifile[0], affine_array[0])\n\t\t\t\t\telif opts.outtype[i] =='nii':\nNext line of code:\n\t\t\t\t\t\tsavenifti_v2(positive_data, position_array,", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                StreamSyncAdapter.class,\n                OhmageService.class,\n                OhmageAuthenticator.class,\n                OhmageService.class,\n                OhmageService.class,\n                OhmageService.class,\n                OhmageService.class,\n                OhmageService.class,\n                OhmageService.class,\n                Ohmage", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "        PubKeyAlgorithm.ECDSA: ECDSASignature,\n        PubKeyAlgorithm.ECDH: ECDHCipherText,\n        PubKeyAlgorithm.ElG: ElGCipherText}\n\n        if self._pubalg in sigs:\n            self._sig = sigs[self._pubalg]\n\n    @", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "        elif self.xsd_types is not None:\n            # XSD typed selection\n            for item in context.iter_self():\n                if context.item is not None and context.is_principal_node_kind():\n                    if isinstance(item, (TypedAttribute, TypedElement)):\n                        yield item\n                    else:\n                        context.item = self.get", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._downed = []\n    self._heap_lock =", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol('foo', protocol)\n        protocol.send_string.assert_called_once_with('foo')\n\n    def test_send(self):\n        \"\"\"\n        Ensures that the message is translated into a dictionary and passed\n        into the protocol object in the expected way.\n        \"\"\"\n        nc = NetstringConnector(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"select * from table1\", se.getQuery());\n        assertTrue(\"is batch\", qe instanceof StatementBatchExecution);Next line of code:\n        StatementBatchExecution sbe = (StatementBatchExecution) qe;\n        assertEquals(3, s", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se1 = new StatementExecution();\n        StatementExecution se2 = new StatementExecution();\n        StatementExecution se3 =", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR request to %s\", device.name)\n            yield self._sendLinkADRRequest(device, target)\n            \n            # Wait for the ADR response\n            while True:\n                # Check for a response\n                response = yield self", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        succeeded, failed = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable<Chat, User> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<Chat, User> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n        obs.remove(this", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n    @classmethod\n    def from_sepa_account(cls, acc):\n        return cls(\n            iban=acc.iban,\n            bic=acc.bic,\n        )\n\n    @classmethod\n    def from_sepa_account(cls,", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time_data = self.img_handle.time_data\n\n        else:\n\n            # Get time from config\n            time_data = self.config.time_data\n\n        json_dict['time'] = time_data\n\n        # Save the reference time\n        json_dict['JD'] = self.JD\n\n        # Save the reference RA/", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        if (null!= mPublicRoomsListList) {\n            mPublicRoomsListList.clear();\n        }\n\n        LoginRestClient loginRestClient = LoginRestClient.getInstance();\n        loginRestClient.getPublicRoomsList(new SimpleApiCallback<List<PublicRoom>>() {\n            @Override\n            public void onSuccess(List<Public", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n\n    @command(name=\"bingo\", category=\"Bingo\", examples=[\"!bingo\"])\n    async def bingo(self, ctx):\n       ", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n    #inferring adjacencies\n    adjacencies = None\n    if not args.solid_scaffolds:\nNext line of code:\n        adjacencies = AdjacencyInferer(raw_bp_graphs[", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        // Updater", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.init(this, mi_APP_ID, mi_APP_KEY);\n                    MiPushClient.registerPush(this);\n                    stopGcmPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HwPush\":\n                if(", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                String eventName = packet.getName();\n                List<Object> args = packet.getData();\n                AckRequest ackRequest = null;\n                if (packet.isAckRequested()) {\n                    ackRequest = new", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        lMS.addTrack(factory.createVideoSource(appRtcClient.videoConstraints()));\n      }\n      lMS.addTrack(factory.createVideoSource());\n      pc.addStream(lMS);\n    }\n\n    {\n      logAndToast(\"Creating local audio source...\");\n      MediaStream lMS = factory.createLocalMediaStream(\"ARDAMS\");\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, -1);\n            contentValues.put(JobStorage.COLUMN_EXACT, false);\n            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_INTERVAL_MS, -1L", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private DialogPreferenceBackgroundColor dialogPreferenceBackgroundColor;\n    private DialogPreferenceCardBackground dialogPreferenceCardBackground;\n    private DialogPreferenceTextColor dialogPreferenceTextColor;\n    private DialogPreferenceOnlyForThisGame dialogPreferenceOnlyForThisGame;\n\n", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "def init_persistent_system(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there's no snapshot files\")\n\n    # if obj is a class, change obj to an", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        docker_config.add_environment_variables(\n            {\n                \"CLICK_EXEC\": executable,\n                \"CLICK_EXEC_PARAMS\": \" \".join(exec_args),\n            })\n\n        return docker_config\n\n    def determine_executable(self, desktop_file):\n        if self.config.debug_gdb:\n            return DebugGdbSupport(self.config).update(d", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final String[] SectionNames = { \"社区管理\", \"国内院校\", \"休闲娱乐\", \"五湖四海\", \"游戏运动\", \"社会信息\", \"知性感性\", \"文化人文\", \"学术科学\", \"电脑技术\", \"终止版面\" };\n   ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        SpinnerObservable.getInstance().registerBackgroundTask(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();Next line of code:\n        SpinnerObservable.getInstance().removeBackgroundTask(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\r        annoGenerated = null;\r\n\rNext line of code:\n\r        ICompilationUnit cu = createCompilationUnit(model, monitor);\r\n\rNext line of code:\n\r        if (writeTML) {\r\n\r            writeTML(cu, model, monitor);\r\n\r        }\r\n\rNext line of code:\n\r", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        simulator_data = fdm_pb2.SimulatorData()\n        simulator_data.time = 0.0\n        simulator_data.gps.latitude = 37.9232547\n        simulator_data.gps.longitude = 23.921773\n        simulator_data.gps.altitude = 300.0\n        simulator", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        if (httpMessage.getReq().hasRequest()) {Next line of code:\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        if (httpMessage.getRes().has", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._header = ID3Header(fileobj)\n    except (ID3NoHeaderError, ID3UnsupportedVersionError):\n        if not load_v1:\n            raise\n\n        frames, offset = find_id3v1(fileobj, v2_version, known_frames)\n        if frames is None:\n            raise", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\rNext line of code:\n    return null;\rNext line of code:\n    }\rNext line of code:\n    visitProxOp(new VisitOrd3(n), query);\rNext line of code:\n    return null;", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new DiffusionTransformation(),\n                    new DitherTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new GrayscaleTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "        for line in exception_message.split(b'\\n'):\n\n            if line.startswith(b'Exception class: '):\n                exception_class = line[19:].strip()\n\n            elif line.startswith(b'Exception message: '):\n                exception_message = line[21:].strip()\n\n            elif line.startswith(b'Exception stack: '", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t// this approach feels filthy. Convert lame proxy", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    user = User(id=\"foo\", email=\"user@domain.com\")\n    user_key = {\"id\": {\"S\": \"foo\"}, \"email\": {\"S\": \"user@domain.com\"}}\n    assert dump_key(engine, user) == user_key\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\t\tpublic static FormFor formFor(Object resource) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\t\tpublic static FormFor formFor(Object resource, String... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\t\tpublic static FormFor formFor(Object resource,", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        event = Event(e)\n        events.append(event)\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list_providers(self, params=None):\n        data = self.call_api", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        } else if (id == R.id.menu_save) {\rNext line of code:\n        } else if (id == R.id.menu_select_all) {\rNext line of code:\n        } else if (id == R.id.menu_send) {\rNext line of code:\n        } else if (id", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\rNext line of code:\n  static {\rNext line of code:\n    opToOccur.put(Operator.AND, Occur.MUST);\rNext line of code:\n    opTo", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(vid_file)\n\n        # Compute the number of frames in the video\n        self.num_frames = int(self.vidinfo.seqlen/self.vidinfo.seqlen)\n\n        # Compute the number of frames in the current frame chunk\n        self.current_fr_chunk_size", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=0.89, laser_wavelength=0", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n\n\t@SideOnly(Side.CLIENT)\n\tpublic static void processConfigSync(PacketBase packet)\n\t{\n\t\tModConfig.instance.processInWorldThread(Side.CLIENT, null);\n\t}\n\n\t@SideOnly(Side.SERVER)\n\tpublic static", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        post.user = get_object_or_404(User, username=username)\n        post = get_object_or_404(Post, pk=pk, user=post.user)\n        post = get_object_or_404(Post, pk=pk, user=post.user, slug=slug)\n        post.user = get_object_or_404(User, username", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// Single cell selection\n\t\t\t\t\t\tSingleCellSelection selection = new SingleCellSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tselectionListeners.fireSelectionChanged(new SelectionChangedEvent(selection));\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells.size() > 1) {Next line of code:\n\t\t\t\t\t\t// Multi cell selection", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "        self._keyclass = [val]\n\n    @keyclass.register(bytearray)\n    def keyclass_bytearray(self, val):\n        self.keyclass = val\n\n    def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = [RevocationKeyClass.Normal]\n\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=0, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    I.set_tile(tile)\n    I.update(P.params, P.values)\n    return I.calculate_field()\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.BarnesStreakLegPoly", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            manager = mp.Manager()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(args)\n                p = KaldiProcessWorker(i, return_queue, function, stopped)\n                procs.append(p)\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Update the reference RA/Dec\n    platepar.updateRefRADec(skip_rot_update=True, preserve_rotation=True)\n\n    # Update the reference apparent Alt/Az\n    platepar.update", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_TAG, \"tag1\");Next line of code:\n        contentValues.put(JobStorage.COLUMN_TRANS", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();Next line of code:\n        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['year', 'fiscal_year', 'value','remarks', 'component', 'area', 'groups']\n\n    def __init__(self, *args, **kwargs):\n        super(ProgressFilter, self).__init__(*args, **kwargs)\n        self.filters['area", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.collapse();\n        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        TextView unit = (TextView) findViewById(R.id.unit);\n        unit.setText(prefs.unit().get() < 1? \"台斤\" : \"公斤\");\n        TextView lowProfit = (TextView", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "            @Override\n            protected void onSuccess(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnected transport\");\n\n                context.setConnectionState(new ConnectedConnectionState(channel, true));\n            }\n        }).then(new Accept<Void>() {\n            @Override\n            protected void doAccept(final Void value) throws Exception {\n                deferred", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment implements NotifiableFragment<LoginFragment.LoginParam> {\n\n    public static String inputMail = \"\";\n   ", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final int k;Next line of code:\n    private final long t;Next line of code:\n    private final double alpha;Next line of code:\n    private final double beta;Next line of code:\n    private final double gamma;Next line of code:\n    private final double epsilon;Next line of", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;Next line of code:\n    private HashMap<String, List<FilterType>> filterMap;Next line of code:\n    private List<FilterType> filterList;Next line of code:\n    private List<FilterType> filterList1;Next line of code:\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        for i in range(0, len(tris), 3):\n            graphics.draw_triangle_strip(tris[i:i+3], fills[i:i+3])\n\n        if self.style.fill_rule == 'evenodd':\n            graphics.draw_colored_triangles(tris, fills, 'evenodd')\n\n        if self.style.fill_rule", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t} else if (data.startsWith(\"shortcut\")) {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tapps.add(a);\n\t\t\t}\n\t\t} catch (FileNotFoundException e", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.degrees(altAz2RADec(self.lon, self.lat, self.jd_array[0], self.ra_array[0], self.dec_array[0])[1])\n        self.end_alt = np.degrees(altAz2RADec(self.lon, self.lat, self.jd_array", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    // These are the methods that visitors actually use\n\n    /**\n     * Called when the visitor reaches a {@link com.bazaarvoice.jless.ast.node.ScopeNode}.\n     * @return Determines whether the scope's children will be visited.\n     */\n    boolean visitScope(ScopeNode scope);\n\n    /**\n     * Called", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class);\n        bind(GerritToolWindowFactory.class);\n        bind(GerritToolWindowProvider.class);\n        bind(GerritToolWindowProviderFactory.class);\n        bind(GerritToolWindowProviderFactory.class);\n        bind(Gerr", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r\n                    if (snapZxid >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n               ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "            entries = [e for e in entries if txn_matches(e.transaction, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.transaction.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        ('Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment',", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t} else if (query.length() < 3) {Next line of code:\n\t\t\t\t\t\treturn Observable.just(new SearchSuggestion(query, 0));\n\t\t\t\t\t} else {Next line of code:\n\t\t\t\t\t\treturn Observable.from(HistoricSearch.getRecentSearches(query));\n\t\t\t\t\t}\n", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    # 2. background\n    bkg = np.random.randn(POS.shape[0]) * 0.1 + 0.5  # 0.5 +- 0.1 px background\nNext line of code:\n    # 3. illumination\n    ilm = np.random.randn(", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n    \ndef apply_or(left: Column, right):\n    if type(right) == Column:\n       ", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                Request request = RequestFragment.sSelectedRequests.get(i);\r\n                stringBuilder.append(\"\\n\\n\").append(request.getName()).append(\" (\").append(request.getPackageName()).append(\")\");\rNext line of code:\n                }\rNext line of code:\n                mEmailBody = stringBuilder.toString();\r\n                return true;\r\n            }", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration)) and not isinstance(instance, bool)\n        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration)) and not isinstance(instance, bool)\n        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "        return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage(params)\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"filename\")):\n                    errmsg += \"Data file %s does not exist.\\n\" % pattern.get(\"filename\")\n            elif mode == \"Calculate\":\n                if not checkFileExistence(pattern.get(\"filename\")):\n                    errmsg += \"Data file %s does not exist", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tFile generatedForm = generationService.generateQuestionnaire(new File(basePathDDI2FO + \"/ddi.xml\"), \"test\");\n\t\tFile finalForm = new File(generatedForm.getParent()+Constants.BASE_NAME_FORM", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        user.setPw(\"password\");Next line of code:\n                        new ChangePasswordTask(user).execute(\"1\");Next line of code:\n                    }\r\n                }\r\n        );\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.CANCEL,\n                new DialogInterface.OnClickListener() {\n                    public void", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', login_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"settings-packages-new\"),\n    url(r'^edit/(?P<slug>[\\w-]+)$', login_required(UpdatePackageView", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[constants.TextgridFormats.POINT_TIER][0][1]\n\ndef run_save_json(tg):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry list\n    before and after saving can", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_feats, unvoiced = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                    except", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot(self", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    int get(FixTag tag);\nNext line of code:\n    int get(int tag);\nNext line of code:\n    int get(String tag);\nNext line of code:\n    int get(String tag, int defaultValue);\nNext line of code:\n    int get(String tag, int defaultValue, Validity validity);\nNext line", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "        return split\n\n    def load_chunk(self, group, chunk_key, name):\n        \"\"\"Load a chunk.\"\"\"\n        return super(SpikeDetektStore, self).load(name=name, group=group,\n                                                  chunk_key=chunk_key)\n\n    def load(self, group=None, chunk_key=None, name=None):\n", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIR", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator = new ValidatorImpl();\n\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));Next line of code:\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));Next line of code:\n        registry.put((byte) (", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String id = LogDB.getNewId(lang);\n                        String hash = \"\";\n                        FileSaver fileSaver = new FileSaver(content, lang, tweet.getUser().getName(), url, id, hash);\n                        String filename = fileSaver.save(logDb);\n                        Result res = languageDetector.detectLanguage(content,", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        else:\n            raise PyBufrKitError('Unknown descriptor type: {}'.format(type(descriptor)))\n\n        return lines\n\n    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, Sequence", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency_distro", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return Contact.objects.get(phone_number=self.phone_number)\n\n    def get_messages(self):\n        return Message.objects.filter(contact=self.get_contact())\n\n    def get_messages_by_direction(self, direction):\n        return Message.objects.filter(contact=self.get_contact(),", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    PCollection<GCPProject> liveProjects = pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n\n    // Tag the state objects to indicate they're from the live API and not checked-in.\n    PCollection<KV<GCPResource, KV<StateSource, GCPResourceState>>> taggedLive", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.rule.get_pattern_for_directory(\"/\"), \"/\")\n        self.assertEqual(self.rule.get_pattern_for_directory(\"/a/b/c\"), \"/a/b/%s/\")\n\n    def test_get_pattern_for_filename(self):\n        self.assertEqual(self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"eq\" in operations:\n        conditions.append(ComparisonCondition(column, value))\n    if \"ne\" in operations:\n       ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(0, 3) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IJavaProject testProject;\n\n   ", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "        self._varz = self.Varz(\n        ^\n\n        SyntaxError: invalid syntax\n\n        scales/message.py\n\n        100\n\n        class ClientTimeoutSink(ClientMessageSink):\n\n        101\n\n        class Varz(VarzBase):\n\n        102\n\n        _VARZ_BASE_NAME ='s", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugImages = false;\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\tpublic LapdfDocument parse(File pdfFile) throws Exception {\n\n\t\tLapdfDocument document = new LapdfDocument(pdfFile);\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\tJPedalExtractor jpedalExtractor = new JPedal", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    -> new ArrayList<>());\n    var exitCode = javadocTool.run(cmdLine, files);\n    if (exitCode!= 0) {\n      log.error(null, __ -> \"javadoc failed\");\n    }\n    return exitCode;\n  }\n  \n  private static boolean isLinkHostOnline(Log log,", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def configurar_interface_de_rede(self, ip, mac, mascara, gateway, dns1, dns2):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.configurar_interface_de_re", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    elif gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.time:\n      start = time.time()\n\n    cmd = self.commands[name]()\n   ", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(Prefs prefs) {\n        return new PersistentData(prefs);\n    }\n\n    @Provides @Singleton\n    ImageSaver provideImageSaver(Ion ion", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testTotalCountWithBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQueryExecution", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifiers.put(validSchemaVerifier.getPrettyName(), new VerifierBackground(validSchema", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toast.makeText(activity, R.string.error_login_failed, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        if (success) {\n            Log.d(this", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        for q in quirks:\n            text = q.apply(text, first=True, last=True)\n        self.textArea.addMessage(lexMessage(text), self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    def changeTheme(self, theme):\n        self.textArea.changeTheme(theme)\n\n   ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\nNext line of code:\n            (r'/logout', LogOutHandler),\nNext line of code:\n            (r'/register', RegisterHandler),\nNext line of code:\n            (r'/problem/(.*)/(.*)', ProblemHandler),\nNext line of code:\n            (", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown information criterion: \" + criterion);\n        }\n\n        return informationCriterion.computeInformationCriterion();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, t.And(ty1, ty2))\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection for Sigma types\n    \"\"\"\n    return Fst(expr)\n\n@with_info(st_term)\ndef snd(expr):\n    \"\"\"Second projection for Sigma types\n    \"\"\"\n", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);Next line of code:\n    void inject(AnalyticsTracker analyticsTracker);Next line of code:\n    void inject(AudioBookManager audioBookManager);Next line of code:\n    void inject(DemoSamplesInstaller demoSamplesInstaller);Next line of code:\n    void inject", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<Expense> expenses;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_category, container, false);\n\n        chart = (PieChartView) view.findViewById(R.id.chart);\n        mNoExp", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    response = Response()\n    response.content_type = None\n    with pytest.raises(ResponseValidationError) as exc_info:\n        validate_response(response, Mock())\n    assert exc_info.value.status_code == 500\n\n\ndef test_response_content_type_not_json_raises_5xx():\nNext line of code:\n    response = Response()\n   ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterAnnotateCommand(AnnotateCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\nNext line of code:\n\t@Override\n\tpublic void exitAnnotateCommand(AnnotateCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n            finally:\n                self.finished_processing.stop_check()\n                break\n        return", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n   ", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n        instruments = Instruments(fdmexec)\n\n        self.assertAlmostEqual(instruments.airspeed_indicator.airspeed, fdmexec.Get", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_HELP_HELP_LINE,\n    'association   The association class name.',\n    'class         The class name.',\n   'result        The result class name.',\n    'role         The source end role property name.',\n   'result-role  The far end role property name.',\n]\n\nINSTANCE_COUNT_HELP_LINES = [\n   ", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate FileServices fileServices;\n\t@Autowired\n\tprivate HintServices hintServices;\n\t@Autowired\n\tprivate IPlogServices ipLogServices;\n\t@Autowired\n\tprivate NewsServices newsServices;\n\t@Autowired", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(\"AWS SDK client exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"Invalid operation exception: \" + t.getMessage", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "        self.run_e2e_flow_for_language(language=\"Hindi\",\n                                       person_name=u'\\u0906\\u0930\\u0935',\n                                       join_keyword=hindi_born())\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n\n  protected Location currentLocation;\n  protected Location lastLocation;\n  protected long lastLocationTime;\n  protected long lastLocationLat;\n  protected long lastLocationLng;\n\n  protected boolean inBackground = true;\n  protected boolean lowBattery = false;\n  protected boolean mobile", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        refresh_avd(adb, DYNAMIC_TOOL_DIR,'reference', 'dup', 'emulator')\n        avd_load_wait(adb)\n    else:\n        # adb, avd_path, reference_name, dup_name, emulator\nNext line of code:\n        refresh_vm(SETTINGS.VM_UUID, SETTINGS", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "Header = Layer('Header', ReprName='RRC Header')\n\n", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh, faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh, faces_rh)\n\t\t\tadjacency = np.array([adjacency_lh, adjacency_rh])\n\t\t\tadjacency = np.array(adjacency", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" IS NULL\");\r\n    } else if (exp.getRhsValue() instanceof Constant) {\r\n      result.append(\" \").append(((Constant) exp.getRhsValue()).getValue());\r\n    } else {\r\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\r\n      acceptOrVisitValue(exp", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        cacheService.storeCacheList(new CacheList(listName));\n        sessionContext.setData(CACHE_LISTS, cacheService.getAllCacheLists());\n        sessionContext.fireSessionEvent(CACHE_LISTS);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<CacheList", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "        Type1_V, Type1_TV, Type2, Type3_V, Type3_TV, Type4_LV, Type4_TLV, Type6_LVE, Type6_TLVE, Layer3, Layer3, Layer3, Layer3, Layer3, Layer3, Layer3, Layer3", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                new TimeEntryOvertimeAggregation()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy(new TimeEntryOvertimeAggregation());\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy(new TimeEntryOvertimeAggregation());\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "        (True, PubKeyAlgorithm.DSA): DSAPub,\n        (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ElGamal): ElGPub,\n        (False", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "        self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux_ad_chan1(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n        self._expansion_num, ExpansionInfo.MUX_AD_CHAN1)\n\n    @property\n    def", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n\n        for i in range(count):\n            key = read_u32le(f)\n            ref = read_u16le(f)\n            self.references[key] = ref\n\n        s.close()\n\n    def write_index(self):\n        index_name = self.index_name + \" index", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Connect Invitation')\n            template = 'accounts/emails/invitation.html'\n            recipient = user.email\n            url = reverse('accounts:activate', args=[user.activation_key])\n            comments = form.cleaned_data['comments", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        await Utilities.message(ctx.channel, f\"Beep Beep! **{ctx.message.author.display_name}**, This feature is under-development!\")\n\n        Logger.error(\"_dump_pokeform() called!\")\n\n        raid_dict = ctx.bot.guild_dict[ctx.guild.id]['raidchannel_dict'][ctx.channel.id]\n\n        channel_mentions", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('bcceth')\n        elif name == \"%s_BCH_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "        if item is not None:\n            self.add_xsd_type(item)\n            yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestIteratorNormal(100, 10);\n    helpTestIteratorParanoid(100, 10);\n    helpTestIteratorCount(100, 10);\n  }\n  \n  @Test\n  public void testSolutions() {\n    helpTestSolutions(100, 10);\n  }\n  \n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);Next line of code:\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setQueryNodeExpanderFactory(QueryNodeExpanderFactory.BASIC);\n\t\tresult.setExplanationFactory(ExpansionFacet", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.init(this, SYS, deviceMiToken);\n                    MiPushClient.setDebugMode(true);\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HMS\":\n                HMSAgent.connect(this, new ConnectHandler() {\n                    @Override\n                   ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt ='simple'\n\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n        output.append(status)\n    return '\\n'.join(output)\n\n\ndef format_output(title, cur, headers, status, table_format, expanded=False,\n                  aligned=True, show_header=True):\n   ", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api(wordnik_api, token)\n\n    @app.route('/api/dictionary/wordnik')\n    def dictionary_api_route():\n        return wordnik_api\n\n    @app.route('/api/subtitle/opensubtitles')\n    def subtitle_api_route():\n        return subtitle_api\n\n    @app.route('/api", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tctx = this;\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\t\trefreshButton = (ImageView) findViewById(R.id.image_refresh);\n\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.addCleanup(CloseHandle, handle)\n        self.assertEqual(handle, 0)\n        self.addCleanup(CloseHandle, handle)\n        self.assertEqual(handle, 0)\n        self.addCleanup(CloseHandle, handle)\n        self.assertEqual(handle, 0)\n        self.add", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    if (annotation!= null) {\n                        return parserHolder.getParser().parse(annotation.getAnnotationMirrors().stream().findFirst().get().getAnnotationType().asElement());\n                    } else {\n                        return Collections.emptyList();\n                    }\n                })\n               .collect(Collectors.toList());\n\n        if (!parsedPaths.isEmpty()) {\n            Swagger", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected FetchResultHandler fetchResultHandler;\n\n    protected BinaryDataHandler binaryDataHandler;\n\n    protected CountDownLatch countDownLatch;\n\n    protected AtomicInteger leftRequestsCount;\n\n    protected AtomicReference<FetchResult> lastFetchResult;\n\n    protected AtomicReference<Page> lastPage;\n\n    protected Atomic", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton selectChannel;\n    private GuiButton forgetChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n    private GuiButton forgetChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorWebModulesPageTitle);\rNext line of code:\n        form.setFormText(Messages.configurationEditorWebModulesDescription);\rNext line of code:\n        ExpandableComposite expandableComposite = toolkit.createExpandableComposite(form.getBody(), SWT.NONE);\rNext line of code:\n        expandableComposite", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = ObjectInteger()\n\n        self.assertEqual(\"42\", type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        type = Type()\n        type.name = \"foo\"\n\n        self.assertEqual((\"foo\",), type.get_comparable_values())\n\n", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "        new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(SetEndTimeCommand.class, EndEvent::", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type +'is not a valid data cluster type', []\n            )\n\n        self._cluster_type = _cluster_type\n        return self\n\n    def get_cluster_type(self):\n        return self._cluster", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;Next line of code:\n\t\t\t\t} catch(RejectedExecutionException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth RejectedExecutionException while inserting", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        cond_stack_size -= get_stack_effect(bytecode[k][0], bytecode[k][3])\n      except Exception as e:\n        logger.error(\"Error parsing condition: %s\", e)\n        return\n      k -= 1\n    condition = Constraint()\n    condition.root = self.__parse_condition(condition_bytecode)\n", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    ExpenseManagerDAO expenseManagerDAO;\n\n    //VIEWS\n    TextView totalExpensesTextView;\n    TextView totalPaymentsTextView;\n    TextView totalBalanceTextView;\n    TextView totalExpensesTextView;\n    TextView totalPaymentsTextView;\n    TextView totalBalanceTextView;\n", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t} else if (type == TAB_MY_LISTS) {\n\n\t\t\tif (syncSubscription!= null)\n\t\t\t\tsyncSubscription.unsubscribe();\n\t\t\tstatusText.setVisibility(View.GONE);\n\t\t\temptyText.setVisibility(View.GONE);\n\t\t\trateButton.hide();\n\t\t\tlistAddButton.show();\n\n\t\t\t// Show the custom, local user", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "    parser = PingParsing()\n    parser.parse(ping_result)\n    parser.as_dict()\n    parser.as_tuple()\n    parser.as_dict(include_icmp_replies=True)\n    parser.as_tuple()\n    parser.as_dict(include_icmp_replies=True)\n    parser.as_tuple()\n    parser.as_dict(include_icmp_replies", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        } else {\rNext line of code:\n            latestMessageOnDisplay = new AtomicLong(chat.getLastMessage().getId());\r\n        }\rNext line of code:\n    }\rNext line of code:\n    @Override\rNext line of code:\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic static void main(String[] args) {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.start();\n\t\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, isBatchCallable());\n        assertThat(qe", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT)!= null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent > 0) {\n        statusWidget.setProgress(percent);\n      }\n    } else if (Utils.getXmlNodeValue(doc, TAG_CURRENT_BYTES", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points = merge_assembly_points(assembly_points_by_sources=assembly_points_by_sources)\n    merged_assembly_points_by_ids = assign_ids_to_assembly_points(assembly_points=merged_assembly_points, id_prefix=\"m_\",\n                                                                  id_generator=id_generator, sort=True)\n    merged_assembly_graph", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, config):\n\n        embed = Embeds.make_embed(header=\"Channel Configuration\", header_icon", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\t\tlong id = (long) objects[0];\n\n\t\t\t\t\t\t\tMenuScreen target = menu.getCurrentMenu().getNavTarget();\n\t\t\t\t\t\t\tif", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Caption format provuder for the monthly view */Next line of code:\n    private WeeklyCaptionProvider monthCaptionProvider;\n\n    /** Caption format provuder for the weekly view */Next line of code:\n    private WeeklyCaptionProvider weekCaptionProvider;\n\n    /** Caption format provuder", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<List<ReleaseSummary>> listReleases() {\n        return releases.list();\n    }\n\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    VerifierProvider rsaLocatorFromRuby = new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    VerifierProviders locators = new VerifierProviders();\n    locators.set", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected BaseAnimation mAnimation;\n\n    protected Interpolator mInterpolator = new LinearInterpolator();\n\n    protected int mDuration = 300;\n\n    public MultiItemTypeAdapter(Context context, List", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // Expected\n                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \t\t\n\t}\n\t\n\tpublic void testMultipleFilesThere() {\n\t   ", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    TrackHistoryEntry entry = new TrackHistoryEntry();\n                    entry.title = liveInfo.getTitle();\n                    entry.startTime = currentTime;\n                    entry.endTime = new Date(0);\n                    entry.stationUuid = liveInfo.getStationUuid();\n                    dao.insert(entry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    IRavelryActivity {\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.navigation_drawer)\n    ListView navigationDrawer;\n\n    @ViewById(R.id.actionbar)\n    ActionBar actionBar;\n\n    @Bean\n    YarrnSpiceService spiceManager;\n\n    @Bean\n   ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                        Intent intent = new Intent(mContext, IconPreviewFragment.class);\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_ICON, home.getIcon());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_TITLE, home.getTitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_SUBTITLE, home.getSubtitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_STYLE", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    )\n\n    max_workers = ctx.obj", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        return None\n\n    def getQueueItem(self, item):\n        \"\"\" Accepts a media item and returns a similar object from this PlayQueue. \"\"\"\n        matches = [x for x in self.items if x == item]\n        if len(matches) == 1:\n            return matches[0]\n        elif len", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(TypeError, _environment_to_string, u\"42\")\n\n    def test_type_check_for_environment_key_and_value(self):\n        self.assertRaises(TypeError, _environment_to_string, 42, u\"", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if not isinstance(cmd, GitcAvailableCommand) and not repo_client.isGitcClient:\n      print(\"fatal: '%s' requires GITC to be available\" % name,\n            file=sys.stderr)\n      return 1\n\n    if not isinstance(cmd, GitcClientCommand) and repo_client.isGit", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                taskData.setFinishDate(new Date());\n                // 任务执行成功后，通知监听器。\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onTaskSuccess(taskData);\n                }\n            } catch (TaskDataException e) {\n                taskData.setState(TaskData.STATE_DATA", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        await r.after_headers(Entry.create(\"http://example.com/\"))\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.exception_class, RejectRequest", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的密码\n        stuPassword = \"123456\";\n        //用户的年级\n        stuGrade = \"2016\";\n        //用户的学院\n        stuCollege = \"计算机学院\";\n        //用户的专业\n        stuMajor = \"计算机科学与技术\";\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\nNext line of code:\n        self.__device = device\n\nNext line of code:\n        self.__ifb_device = self.parse_incoming_device(tc_command_output)\n\nNext line of code:\n        self.__ip_version = ip_version\n\nNext line of code", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_living_property(self, state: Dict[str, Any], obj: Living) -> None:\n        state[\"location\"] = mudobj_ref(obj.location)\n        state[\"name\"]", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic ParameterizedGenerationService(String surveyName) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n            exit(1);\r\n        }\rNext line of code:\n        DataDirHelper helper = new DataDirHelper(new File(dataDir", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        except UncertainTimeError:\n            log.error(\"We couldn't figure out how accurate your clock is. Switzerland won't work!\")\n            sys.exit(1)\n        except:\n            log.error(\"Weird but possibly non-fatal error:\\n%s\" % traceback.format_exc())\n            sys.exit(1)\n\n   ", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        // Make sure we get the correct cursor out of the database\n        DataTestUtilities.validate", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem)), [self.elem", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tmapView = (MapView) findViewById(R.id.map_view);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t\tmapView.setTraffic(true);\r\n\t\tmapView.setMultiTouchControls(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        ConfigCommandProcessor(\n            ConfigVlanCommandProcessor,\n            ConfigVRFCommandProcessor,\n            ConfigInterfaceCommandProcessor\n        )\n    )\n\n    def get_http_resource(self):\n        return \"http://www.cisco.com/c/en/us/products/collateral/switches/2960s-catalyst-switches", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n       ", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    sample_conditions = [dict(zip(sample_condition_dicts[i].keys(), sample_condition_dicts[i].values())) for i in range(len(sample_condition_dicts))]\n    sample_conditions = [dict(zip(sample_condition_dicts[i].keys(), sample", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "        pass\n\n    @property\n    def corpus_word_set(self) -> List[str]:\n        \"\"\"Set of words used in the corpus\"\"\"\n        return sorted(self.word_counts)\n\n    @property\n    def corpus_word_set(self) -> List[str]:\n        \"\"\"Set of words used in the corpus\"\"\"\n        return sorted(self", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic String getCaller() {\n\t\treturn misc.getCaller();\n\t}\n\n\tpublic String getStackTrace(Throwable t) {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();}\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setRootVisible(false);\n        tree.setShowsRootHandles(true);\n        tree.setCellRenderer(new DefaultTreeCellRenderer() {\n            @Override\n            public Component getTreeCell", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1 with class=todoapp and text=Todo App\n\t\t// Input with class=todoapp and type=text\n\t\t// Input with class=todoapp and type=text\n\t\t// Input with class=todoapp and type=text\n\t\t// Input with class=todoapp", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output!=null) {\n                    Intent intent = new Intent(CropImageActivity.this, CropImageActivity.class);\n                    intent.putExtra(\"image\", output);\n                    intent.putExtra(\"cropAspectX\", cropAspectX);\n                    intent.putExtra(\"cropAspectY\", cropAspectY);\n                    intent.putExtra(\"cropAspectRatio\",", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        if (savedInstanceState!= null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW_TOOLBAR);\n            mShowFastScroller = savedInstanceState.getBoolean(STATE_SHOW_FASTSCROLLER);\n        }\n\n        setHasOptionsMenu(true", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\nNext line of code:\n    return\nNext line of code:\n    validate_key_condition(model, index, key)\nNext line of code:\n    return\nNext line of code:\n    validate_key_condition(model, index, key)\nNext line of code:\n    return\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,Next line of code:\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n        dataset.datasetChanged();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,Next line of code:\n            int id,Next line of code:\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        \n        # Add the resources\n        for path, resource in self.resources.items():\n            self.api.add_resource(resource, path)\n        \n        # Add the error handlers\n        self.api.error_handlers[404] = self.error_404\n        self.api", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_dialog = ProjectSettingsDialog(settings_ini, directory, **kwargs)\n        self._settings_dialog.signalSettingsChanged.connect(self.sync_project_config_path)\n        self._settings_dialog.signalSettingsChanged.connect(self.save_settings)\n       ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(CalDate date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *            The week that was clicked\n         */Next", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, pass):\n        self._pass = pass\n        return self\n\n    def set_client_id(self, client_id):\n        self._", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "        case MESSAGE: {\n            if (packet.getSubType() == PacketType.EVENT) {\n                String eventName = packet.getName();\n                List<Object> args = packet.getData();\n\n                if (eventName!= null && args!= null) {\n                    namespacesHub.onEvent(client, eventName, args, ackRequest);\n                }\n           ", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getOutFormat());Next line of code:\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());Next line of code:\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\tgenerationService.set", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    BoundedSource<GCPProject> projectsSource = new LiveProjectSource(org);\n    PCollection<GCPProject> projects = pipeline.apply(Read.from(projectsSource));\n\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n       ", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "        name = Column(String)\n        email = Column(String)\n        joined = Column(DateTime)\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n        by_joined = LocalSecondaryIndex(range_key=\"joined\", projection=[\"email\"])\n\n    return MyModel\n\n\n@pytest.fixture\ndef model_with_ttl():\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "        self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                   dim, vocab, lookup,\n                                                   translate=True, normalize=True)\n        else:\n            raise NotImplementedError()\n\n        children.append(self._def_reader)\n\n        self._def_combiner = MeanPoolCombiner(emb_dim", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isSmartReplyEnabled;\n    // Guarded by _lockObject.\n    private boolean _isSmartReplyEnabledForUser;\n    //", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int videoQuality;\n    private String videoPath;\n    private String videoName;\n    private String videoType;\n    private String videoPathFromCamera;\n    private String videoPathFromGallery;\n    private String videoPathFromAlbum;\n    private String videoPathFromAlbumFromCamera;\n    private String videoPathFrom", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "        return render(request, self.template_name, {'form': form, 'object': self.object})\n\n    def post(self, request, *args, **kwargs):\n        if not self.kwargs.get(\"pk\", None):\n            self.object = None\n        else:\n            self.object = self.get_object()\n        form_class", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\tpublic long[] readLongBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t\t{\n\t\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\t\treturn this.handle.int64().readMatrixBlock(path, blockSizeX", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\npackage com.rashwan.reactive_popular_movies.data.di;\nimport com.rashwan.reactive_popular_movies.data.model.Cast;\nimport", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tview.showException(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark and getting the results\n\t */\n\tpublic void runBenchmark() {\n\t\tfinal BenchmarkResult res = benchmark.run();\n\t\tview.showResult(res", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job_manager = YMLBasedJobManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint moreSuitableEndpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (moreSuitableEndpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Not suitable endpoint found for the given city and endpoint type.\", Error.NOT_SUITABLE_ENDPOINT_FOUND);\n\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n    else:\n      self._cstr = self.__finalize_cmp(root)\n\n  def __finalize_cmp(self, root):\n    if root.data[0] == COMPARE_OP:\n      return self.__finalize_cmp(root.child(0))\n    elif root.data[0] == B", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tJoinResult result = this.getRound().addPlayer(this);\n\t\tif (result == JoinResult.SUCCESS) {\n\t\t\tthis.setArena(round);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            base = len(fmt_token)\n            if value < 0:\n                value = -value\n            result = ''\n            while value > 0:\n                result = str(value % base) + result\n                value //= base\n\n        if fmt_modifier == 'o':\n            result += ordinal_suffix(int", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc.get_drawings():\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties[\"a\"] = ObjectString()\n        object1.properties[\"b\"] = ObjectString()\n        object1.pattern_properties[\"a\"] = ObjectString()\n        object1.pattern_properties[\"b\"] = ObjectString()\n        object1.additional_properties = ObjectString()\n        object2.properties[\"a\"] = Object", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] dataBytes = buildRawData(clientConfig, dataSource);\nNext line of code:\n          byte[] preambleBytes = buildRawPreambleData(clientConfig, templateSource);\nNext line of code:\n          PipeBundle ringBuffers = buildRingBuffers(clientConfig, count);\nNext line of code:\n          FASTDecoder decoder", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\nNext line of code:\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\nNext line of code:\n  to", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "        allOf(hasJsonPath(\"/hits/total\", equalTo(100)), hasJsonPath(\"/hits/hits/0/_source/identifier\", containsString(\"dab-records-csw\"))));\n    }\n\n    @Test\n    public void storeWithSuggest() throws Exception {\n        Collection<SourceRecord> records", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "        self._pubalg = PubKeyAlgorithm(val)\n        if self._pubalg in [PubKeyAlgorithm.RSAEncryptOrSign, PubKeyAlgorithm.RSAEncrypt, PubKeyAlgorithm.RSASign]:\n            self.signature = RSASignature()\n\n        elif self._pubalg == PubKeyAlgorithm.DSA", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());Next line of code:\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());Next line of code:\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());Next line of code:\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = Authorization.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(Global.InvokeKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException | IOException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/edit/(?P<pk>[-\\w]+)/$', edit_user, name='edit_user'),\n    url(r'^users/delete/(?P<pk", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            startActivity(new Intent(getActivity(), StatsActivity.class));\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack!= null) {\n            if (stack.getNumberOfCards() < 4) {\n               ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private DropMenu dropMenu;Next line of code:\n    private DropMenuAdapter dropMenuAdapter;Next line of code:\n    private String[] titles;Next line of code:\n    private List<FilterType> list;Next line of code:\n    private HashMap<String, Object> mapValue;Next line of", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.updateBlockShape();\n        obj.updateBlockLabels();\n        obj.updateBlockSockets();\n        obj.updateBlockTags();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.update", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = XDA([d1, d2])\n        i, j = f.find_preimage(d3)\n        assert i == 0x00 and j == 0x00\n\n        f = XDA([d1, d2])\n        i, j = f.find_preimage(d3)\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, this);\n\t\tpm.registerEvents(blockListener, this);\n\t\t\n\t\t// Load the gates\n\t\tGate.load();\n\t\t\n\t\tlog(\"", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        Challenge challenge = new Challenge(challengeData);\n        connection.sendPacket(challenge);\n        resetParser();\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        Success success = new Success(doc);\n        connection.sendPacket(success);\n        resetParser();\n    }\n\n    private void parseFailure(Element doc) throws IOException", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher\nLea32 = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal = FealCipher\nTea = TeaCipher\nXtea = XteaCipher\nCham = cham.get_C", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;Next line of code:\n    private SongListAdapter mAdapter;Next line of code:\n    private boolean mShowToolbar;Next line of code:\n    private boolean mShowFastScroller;Next line of code:\n    private int mSortOrder;Next line of code:\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            mParameterListView.setVisibility(View.GONE);\n        } else {\n            mParameterListView.setVisibility(View.VISIBLE);\n        }\n        mSelectedEffect = effect;\n        mParameterListAdapter.setEffect(mSelectedEffect);\n        mParameterListAdapter.notifyDataSetChanged();\n\n        // Add listener to selected effect\n        mSelectedEffect.addListener(this);\n\n        if (m", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause_dict,\n            Repr='hum'),\n        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            refresh();Next line of code:\n        }\n    };\n    private View mRootView;\n    private View mAlbumView;\n    private View mSongView;\n    private View mMenuButton;\n    private View mAlbumInfoButton;\n    private View mSongInfoButton;\n    private View mAlbumInfoLayout;\n", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "        self.log_debug(f\"Loading from corpus_data temp directory in {time.time() - begin_time} seconds\")\n        return True\n        self.log_debug(f\"Could not find {files_path}, cannot load from temp\")\n        return False\n        self.log_debug(f\"Could not find {utterances_path}, cannot", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"users\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listRemittUsers() {\n\t\treturn UserManagement.listUsers();\n\t}\n\n\t@POST\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"account/headers\")\n    Observable<HttpHeader> headers(@Query(Constants.KEY", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.optionName(), message.value());\n    }\n\n    @OverrideNext line of code", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq), bandwidth, bits=32, tol=1e-3)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 348.517),\n     ])\n  def test_glasberg_moore_slaney", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            offset = dataset.OffsetOfReferencedLowerLevelDirectoryEntity\n    else:\n        # Read until the end of the file\n        while True:\n            dataset = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                                         encoding, offset)\n            if dataset is None:  # None is", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        commentProcessor.setCurrentCommentWrapper(CommentWrapper.EMPTY);\n        commentProcessor.setCurrentDocument(document);\n        commentProcessor.setCurrentExpressionContext(expressionContext);\n        commentProcessor.setCurrentExpressionResolver(expressionResolver);\n", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(application, prefs, searchCriteria.values(), page, PAGE_SIZE);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity) getActivity", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(str)\n    @data.register", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.addMessage(serverMsg, False)\n        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n\n    def addMessage(self, lexmsg, chum):\n        if len(lexmsg) == 0:\n            return\n        color = chum.colorcmd()\n        systemColor = QtGui.QColor(self.parent", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "        return visitor.visit_string(self)\n        ^\n\n        return visitor.visit_string(self)\n\n        SyntaxError: invalid syntax\n\n        String(Node):\n\n            def __init__(self, value, **kw):\n\n                self.value = text_type(value)\n\n                super(String, self).__init__(**kw)\n\n            def __repr__(", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    if features is None:\n        features = {\"CPM_FORM\": (v.T*symengine.log(v.T), v.T**2, v.T**-1, v.T**3), \"CPM_ENTROPY\": (v.T*symengine.log(v.T), v.T**2, v.T", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n            return;\n        }\n\n       ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "        PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> suggest(@QueryMap Map<String, String> serviceIds, @Query(\"q\") String query);\n\n    @POST(\"anonid\")Next line of code:\n    Call<AnonIdResponse> anonId(@FieldMap Map<String, String> fields);\n\n    @POST(\"pack\")Next", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\n\n    def transaction(self, *objs, condition=None, sync=None):\n        \"\"\"Create a :class:`~bloop.transactions.ReadTransaction` or :class:`~bloop.transactions.WriteTransaction`.\n\n        :param objs: objects to read or write.\n        :param condition: only perform", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        confusion_matrix_formatter = ConfusionMatrixFormatter(decimals=2, normalize=True)\n        confusion_matrix_str = confusion_matrix_formatter.format(confusion_matrix, data_set.label_map)\n\n        self.log.info(confusion_matrix_str)\n\n        if parsed_args.plot:\n            classes = [label for label in data_set.label_map]\n           ", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@ResourceNext line of code:\n\tprivate ChallengeServices challengeServices;\n\t@ResourceNext line of code:\n\tprivate CategoryServices categoryServices;\n\t@ResourceNext line of code:\n\tprivate CountryServices countryServices;\n\t@ResourceNext line of code:\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "        return Query(self, (first_entity,) + entities)\n\n    def what(self, *whats):\n        self._params['what'] = whats\n        return self\n\n    def let(self, **kwargs):\n        self._params['let'] = kwargs\n        return self\n\n    def filter(self, expression):\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the hidden representation\n        of the input sequences. The RNN is bidirectional, and the output of the RNN is fed back", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nNext line of code:\nall_platform_slugs.extend(ZANATA_SLUGS)\nNext line of code:\nall_platform_slugs.extend(WEBLATE_SLUGS)\nNext line of code:\nall_platform_slugs.extend(DAMNEDLIES", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\t}\n\n\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);Next line of code:\n        table.addHeader(\"Method\", '=', Alignment.Left);Next line of code:\n        table.addHeader(\"Class\", '=', Alignment.Left);Next line of code:\n        table.addHeader(\"Runs\", '=', Alignment.Left);Next line of", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      visitor.visit(node)\n      return visitor.edges\n\n    def get_parent_loop(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):\n          EdgeVisitor.__init__(self)\n          self.edges = []\n\n        def visit(self, edge):\n          self.edges.append(edge)\n\n      visitor = Bwd", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.T = this.tree.getSize();\n\t\tthis.Tarray = new int[this.T];\n", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    def parse_datetime_picture(marker: str, dt: datetime.datetime, lang: Optional[str] = None) -> str:\n        component = marker[1]\n        fmt_token = marker[2:-1]\n\n        if ',' not in fmt_token:\n            presentation, width = fmt_token, ''\n        else:\n            presentation", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "        @Override\n        public void onLiveEvent(final Event event, RoomState roomState) {\n            RoomActivity.this.runOnUiThread(new Runnable() {\n\n                @Override\n                public void run() {\n                    // The various events that could possibly change the room title\n                    if (Event.EVENT_TYPE_STATE_ROOM_NAME.equals(event", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI32ToDDI33Preprocessor();\n\t\n\t//", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveDetaille(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_choice.GetClientData(self.releves_choice.GetSelection())\nNext line", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(I), J_rot) + dot(crosstens(I), J_rot.T)\n        return H\n\n    def compute_angular_momentum_residual(self, p,", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult!= null) {\n            final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n            final Pattern pattern = queuedProject.getPattern();\n            final Needle needle = queuedProject.getNeedle();\n            final BookmarkShort bookmark = queuedProject.getBookmark();\n\n            name.setText(pattern.getName());\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand());\n        // Register the currency service\n        game.getServiceManager().setProvider(this, CurrencyEconService.class, currencyEconService);\n        // Register the currency registry\n        game.getServiceManager().setProvider(this, CurrencyRegistryModule.class, new CurrencyRegistryModule());\n        // Register the currency", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        prior_specs = build_prior_specs(prior, params)\n        _log.trace('Prior specs: %s', prior_specs)\n        return {'priors': prior_specs}\n\n    def _fit(self, symbols, datasets, prior=None, restart_trace=None, restart_step=None, restart_interval=None, restart_step_interval=None", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\n  elif op == LOAD_NAME:\n    return Ref.fromName(arg)\n  elif op == LOAD_ATTR:\n    return Ref.fromName(arg)\n  elif op == LOAD_GLOBAL:\n    return Ref.fromName(arg)\n  elif op == LOAD_METHOD:\n    return Ref.fromName(arg)\n ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;Next line of code:\n\tprivate final FringeLayer fringe;Next line of code:\n\tprivate final PingPongEq<EntityView> viewsEq;Next line of code:\n\tprivate final PingPongEq<EntityController> controllersEq;Next line of code:\n\tprivate final PingPongEq<Entity>", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\tpublic List<AuthorWithBooks> authorsWithBooks() {\n\t\tList<AuthorWithBooks> authors = new ArrayList<>();\n\t\tauthors.addAll(authorRepository.findAll());\n\t\tauthors.forEach(author -> {\n\t\t\tList<Book> books = new ArrayList<>();\n\t\t\tbookRepository.findAllByAuthorId(author.getId()).forEach(book -> books", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t\tSQLQuery rootQuery = new SQLQuery(schema, null, SQLAction.NONE, false, null);\n\t\t// rootQuery.setSingleRow();\n\t\t// rootQuery.setTables(new SQLTable(schema, \"employees\", \"emp\"));\n\t\t// rootQuery.doAction(SQLAction.SELECT, new Var(\"emp", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        web_proxy(file_path, '127.0.0.1', '8080')\n        # Change False to support non-activity components\n        # install_and_run(DYNAMIC", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into ancestry\n     */\n    Ancestry parseAncestry(InputStream inputStream);\n\n    /**\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        assertThat(pe, queryType(QueryType.SELECT));\n        // end::prepared[]\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\tself._properties_dock.set_item(selection[0])\n\t\tself._properties_dock.set_item(selection[0])\n\t\tself._properties_dock.set_item(selection[0])\n\t\tself._properties_dock.set_item(selection[0])\n\t\tself._properties_dock.set_item(selection[0])\n\t\tself._properties", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                } else {\n                    return new ApiException(cause);\n                }\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setUserAgent(USER_AGENT", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Number.class, new DefaultNumberRenderer());\r\n\t\tregisterRenderer(Boolean.class, new DefaultBooleanRenderer());\r\n\t\tregisterRenderer(Date.class, new DefaultDateRenderer());\r\n\t\tregisterRenderer(Time.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE, false)) {Next line of code:\n\t\t\tlabelFactory = new LowerCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^add-package/(?P<slug>[\\w\\-\\+]+)$', AddPackageCIPipeline.as_view(), name=\"package-add-ci-pipeline\"),\n    url(r'^hide/(?P<pipeline_id>[0-9a-f-]+)/$', hide_ci_pipeline, name=\"hide-ci-pipeline", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        intent.putExtra(Extras.EXTRA_RESUMED, true);\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        LogUtil.e(Log.getStackTraceString(e));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public boolean onLongClick(View", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token.key, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                ra, dec = xyToRaDecPP(x_mean, y_mean, platepar.JD, platepar.lat, platepar.lon, platepar.refraction)\n                mag = 0.0\n\n                # Compute the vignetting and extinction loss\n                vignetting_loss = 1 - (test_px_sum", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    # Compute posterior\n    posterior = _calc_integral(likelihood, options)\n    # Apply priors to posterior\n    posterior = _apply_priors(data, options,", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          } else {Next line of code:\n            Board.this.rollDices();\n          } else {Next line of code:\n            Board.this.rollDices();\n          } else {Next line of code:\n            Board.this.rollDices();\n          } else {Next line of code:\n", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        for path, node in etree_iter_paths(root):\n            self.assertEqual(path, node.tag)\n            self.assertEqual(node.tag, f'Q{{{node.tag}}}')\n\n        for path, node in etree_iter_paths(root, '/'):\n            self.assertEqual(path, node.tag)\n            self.assertEqual(node.tag, f'Q{{{", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.rule.set_engine(self.engine)\n        self.rule.set_kb(self.runner)\n        self.rule.set_child_heuristics(self.engine)\n\n    def tearDown(self):\n        self.rule = None\n        self.engine = None\n        self.runner = None\n\n    def test_is_soft_404(self):\n        entry = Entry.create", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */\n    Relative parseRelative(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            final EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 5. Construct an ASiC file\n            final DSSDocument doc = this.service.createDocument(this.docs, this.parameters);\n            final SignatureValue signatureValue = this.service.signDocument(doc, this.parameters);\n            final DSS", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Brush:\n\t\t\treturn get_icon(\"", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate List<PlayerOverview> playerOverview;\n\tprivate TeamLeaders leaders;\n\tprivate TeamRosterResponse rosterResponse;\n\tprivate TeamScheduleResponse scheduleResponse;\n\tprivate TeamLeadersResponse leadersResponse;\n\tprivate TeamSummaryResponse summaryResponse;\n\tprivate String teamId;\n\tprivate String teamName;\n\tprivate String teamTricode;\n", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = AndroidDeviceDetailsInfo.Companion.getDeviceInfo();Next line of code:\n        Feedback feedback = new Feedback(userFeedback.getMessage(), userFeedback.getScreen(), deviceInfo, packageInfo, userFeedback.getScreenCapture());Next line of code:\n        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index[obj] = key\n\n        # load items in chunks, handling continuation tokens\n        loaded_items = self.session.load_items({\n            \"RequestItems\": create_batch_get_chunks(object_index)\n        })\n\n        for table_name, table_items in loaded_items.items", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                print(draw_art(fingerprint))\n            print('Fingerprint: {0}'.format(fingerprint))\n            print('Description: {0}'.format(description))\n            print('Created at: {0}'.format(created_at))\n            print('')\n\n    async def list_vaults(self):\n        for vault in self.vault", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nNext line of code:\nadmin.site.register(Sector, SectorAdmin)\nNext line of code:\nadmin.site.register(Target, TargetAdmin)\nNext line of code:\nadmin.site.register(Indicator, IndicatorAdmin)\nNext line of code:\nadmin.site.register(Component, ComponentAdmin", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertEqual(node_document_uri(document), '/')\n        self.assertIsNone(node_document_uri(self.elem))\n        self.assertIsNone(node_document_uri('a text node'))\n\n    def test_node_children_function(self):\n        self.assertEqual(list(node_children(self.elem)), [self.elem[0], self.elem[1], self.elem[2]])\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                case START_DATE_DESC:Next line of code:\n                case DURATION_ASC:Next line of code:\n                case DURATION_DESC:Next line of code:\n                    Arrays.sort(sorted, new ItemDurationComparator(itemSortOrder == ItemSortOrder.DURATION_DESC));\n                    break;\n                default:\n                    break;\n            }\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "        self.logger.error(f\"Error initializing training: {e}\")\n        self.training_complete = False\n        return\n        self.training_complete = True\n        self.logger.info(f\"Training completed in {time.time() - begin:.2f} seconds\")\n        self.log_details(self.logger)\n\n    def train(self) ->", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.stateController", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.re", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\n\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\n\n    public ChatMessage getChatMessage(int index)\n    {\n        return _", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand get", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onChannelStatusChanged(ChannelStatus status) {\n        if (status == null) {\n            setStatus(ChatVisibility.NORMAL);\n        } else {\n            switch (status) {\n                case ACTIVE:\n                    setStatus(ChatVisibility.ALWAYS);\n                    break;\n                case PINGED:\n                    setStatus(ChatVisibility.HIDDEN);\n                   ", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc]? new blackPut() : new blackCall(), DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class,\n            KitsModule.class,\n            ScoreboardModule.class,\n            FriendlyFireModule.class,\n            BroadcastsModule.class,\n            PlayerFreezeModule.class,\n            DeathMessageModule.class,\n            WorldBorderModule.class,\n            ChatModule.class,\n            VotingModule.class,\n            KitsModule.class,\n            Score", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize number of thread pool.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"packager\");\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    config.derive(\"packager\", (p, v) -> p.set(\"packager\", v), \"packager\", (", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetNodes = element.getElementsByTagName(QUERY_SET_TAG);\n        for (int index = 0; index < querySetNodes.getLength(); index++) {\n            Node querySetNode", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        ExeSQL(sql)\n\n                        # update language\n                        clause ='sid = {}'.format(S['sid'])\n                        sql = getUpdateSQL('language', ret, clause)\n                        # print('update language sql: ',sql)\n\n                        S['language'] = ret['language']\n\n                        # update originOJ\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "        for op in simple_op:\n            doctest.run_docstring_examples(op, globals(), name=\"operation\")\n\n        for op in simple_op:\n            for x, y in bitvectify(integers(min_value=0, max_value=2 ** MAX_SIZE - 1), MIN_SIZE, MAX_SIZE):\n                if", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew SOSSegment(aJPEG, aJPEG.mScan", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl!= null) {\n                try (SqlSession session = sqlSessionFactory.openSession()) {\n                    LastschriftenMapper mapper = session.getMapper(LastschriftenMapper.class);\n                    List<DataLastschriftMandat> rows = mapper.getRowsForSammellastschrift(sl);\n\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"Generate Job arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\"\"\"\n        return [\n            GeneratePronunciationsArguments(\n                os.path.join(self.working", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        ItemLorePage.setLore(new ItemStack(ItemLorePage.instance), key);\n\n        entityPlayer.addChatComponentMessage(new ChatComponentText(String.format(\"Gave lore page '%s'\", key.ident)));\n\n        PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n    }\n\n    private EntityPlayer", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\nNext line of code:\n    private static final DateTimeFormatter MONTH_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM\");\nNext line of code:\n    private static final DateTimeFormatter YEAR_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy\");\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\t\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\t\tprivate static final String DEFAULT_LOG4J_CONFIG_FILE = \"log4j.properties\";\n\n\t\tprivate static final String DEFAULT_LOG4J_CONFIG_FILE = \"log4j.properties\";\n\n\t\tprivate static final String DEFAULT_LOG4J_CONFIG_FILE = \"log4j", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    ch_found = problem.solve(initial_weight, solver_name, search_mode, check, return_generator=False, verbose_level=verbose_level, filename=filename)\n\n    if ch_found is not None:\n        if verbose_level >= 1:\n            smart_print", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return H\n\n    def test_init(self):\n        \"\"\" Test initialization. \"\"\"\n        hosts = self.get_hosts()\n        container = HostsContainer(hosts)\n\n        self.assertEqual(container.roles, ['h1', 'h2', 'h3', 'h4', '", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        return re.search(r\"tcset|tcdel|tcshow\", command)\n\n        return [command for command in self.__tc_command_history if tc_command_filter(command)]\n\n    def get_tc_command_history(self):\n        return self.__tc_command_history\n\n    def get_tc_command_output(self):\n        return self.__", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    private List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private MonthCalendarConfiguration monthCalendarConfiguration;\n    private SimpleDateFormat weekDayFormatter;\n    private MonthCalendarConfiguration monthCalendarConfiguration;\n    private SimpleDateFormat weekDayFormatter;\n    private MonthCalendarConfiguration monthCalendarConfiguration;\n    private SimpleDateFormat weekDayFormatter;\n    private MonthCalendarConfiguration monthCalendarConfiguration;\n    private SimpleDateFormat weekDayFormatter;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "audiolazy/lazy_stream.py\nclass Stream(meta(Iterable, metaclass=StreamMeta)):\n  __ignored_classes__ = tuple()\n\n  def __init__(self, *dargs):\n    if len(dargs) == 0:\n      raise TypeError(\"Missing argument(s)\")\n\n    elif len(dargs) ==", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            elif backref and isinstance(t2, ListTypeMeta):\n                t1.__instance__ = ListType[item_ref", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.blink = Blink(\n            login_data=login_data,\n            no_prompt=False,\n        )\n        self.blink.startup()\n        self.blink.send_auth_key(self, key)\n        self.blink.refresh_token()\n        self.blink.refresh_token()\n        self.blink.refresh_token()\n        self.blink", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Field):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, SketchView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, PartView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self.AsyncProcessRequest(None, MethodDiscardMessage(msg.which, str(ex)), buf, headers)\n    else:\n      self._send_queue.put((buf.getvalue(), msg.properties))\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    pass\n\n  def Open(self):\n    return self", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = disposer.register(new ThreadDumpFactory().fromString(out.toString()));\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().iterator().next().getThreadStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(runtime.getThreads().iterator().next().getStack", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        return new DrumStoreEntry<>(data, DrumOperation.UPDATE, null);\n    }\n\n    private static DrumStoreEntry<PLDTestData,?> createNewData(long key, DrumOperation op, long... val) {\n        InMemoryEntry<PLDTestData,?> data = new InMemoryEntry<>();\n        data.set", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n\n    @Override\n    protected void", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder().withLocale(\"pt_BR\").build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getTranslator());\n    }\n\n    private void assertResponseProcessorManagerIsPublic() {\n        Constructor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n    self._ping_ar = AsyncResult()\n\n  def _OnTimeout(self, tag):\n    \"\"\"Handles a timeout for a message that was sent to the server.\n\n    Args:\n      tag - The tag of the message", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "audiolazy/lazy_misc.py\ndef almost_eq(a, b, bits=32, tol=1, ignore_type=True, pad=0.):\n  \"\"\"\n  Almost equal, based on the amount of floating point significand bits.\n\n  Alternative to \"a == b\" for float numbers and iterables with", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self._cache = GlobalConfigCache(self.dbi, bot).get_all_config()\n        self._cache = GlobalConfigCache(self.dbi, bot).get_all_config()\n        self._cache = GlobalConfigCache(self.dbi, bot).get_all_config()\n        self._cache = GlobalConfigCache(self.db", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    else:\n        return operator.__getattribute__(operator, self.symbol)(*operands)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        TextView nameString = (TextView) header.findViewById(R.id.personalize_name);\n        TextView surnameString = (TextView) header.findViewById(R.id.personalize_surname);\n        TextView clientReferenceNumberString = (TextView) header.findViewById(R.id.personalize_client_reference_number);\n        TextView tagMessageString = (TextView", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            InviteToChatFragment inviteToChatFragment = (InviteToChatFragment) classToNotify.newInstance();\n            inviteToChatFragment.startChat(newChatId);\n        } else {\n            Toaster.getInstance().toast(R.string.unable_create_chat, Toast.LENGTH_LONG);\n        }\n    }\n}\nyasme/src/main/java/de", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"APP\", response.getTradeType());\n        Assert.assertNotNull(response.getPrepayId());\n        Assert.assertNotNull(response.getCodeUrl());\n    }\n\n    /**\n     * 退款\n     */\n   ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapperEnum messageMapperEnum = new MockedMessageMapper(KEY, ERROR);\n        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_02, RANDOM_STRING_PARAMETER_VALUE_02", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readSmallIntValue(int d1) throws IOException {\n\t\treturn d1 & 0x7F;\n    }\nNext line of code:\n    public int readSmallIntValue(int d1) throws IOException {\n\t\treturn d1 & 0x7F;\n    }\nNext line of code:\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quotas(self)\n\n        # self.management = management.Management(self)\n        # self.quota = quota.Quotas(self)\n\n        # self.management = management.Management(self)\n        # self.quota = quota.Quotas(self)\n\n        # self.management = management", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError as e:\n                logger.debug(f\"failed to parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\rNext line of code:\n        } else {\rNext line of code:\n        m.videoFrameRate = Main.DEFAULT_VIDEO_FRAME_RATE;\rNext line of code:\n        }\rNext line of code:\n        // set video width\rNext", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "        self._probe = probe\n        # Load the probe from the probe file.\n        else:\n            self._probe = load_probe(probe_file)\n        # Load the spike detection parameters.\n        self._kwargs = Bunch(**kwargs)\n        self._kwargs.update({'tempdir': tempdir})\n        self._", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = prepareGet", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "        self._cdg = ControlDependence(self.dominators)\n    return self._cdg\n\n  @property\n  def entry_block(self):\n    return self.blocks[self.entry]\n\n  @property\n  def exit_block(self):\n    return self.blocks[self.exit]\n\n  @property\n  def entry_node", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        FragmentObservable<QRCodeFragment, QRData> observable = ObservableRegistry.getObservable(QRCodeFragment.class);\n        observable.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();Next line of code:\n        FragmentObservable<QRCodeFragment, QRData> observable = Observable", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.isNegative()) {\n      result.append(OPEN_BRACKET);\n      visit(column);\n      result.append(\" \").append(Operator.NOT).append(\" \");\n      result.append(OPEN_BRACKET", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddi = new File(basePath + \"/ddi.xml\");\n\t\t\tFile xforms = new File(basePath + \"/xforms.xml\");\n\t\t\tDiff diff = xmlDiff.diff(ddi, xforms);\n\t\t\tAssertions.assertTrue(diff.hasDifferences());\n\t\t} catch (Exception e) {\n\t\t\te", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        draws = np.asarray(X)[indices]\n\n        return draws\n\n    def test_draw_events(self):\n        self.assertEqual(\n        draws = np.zeros((J, N))\n\n        for j in range(J):\n            draws[j, :] = X[j][indices]\n\n        return draws\n\n    def test_draw_events(self):\n       ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    @", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final BooleanTag tag, final boolean value) {\n\t\tacceptBoolean(tag, value, null);\n\t}\n\t\n\t@OverrideNext line of code:\n\tpublic void acceptBoolean(final BooleanTag tag, final boolean value, final String reason) {\n\t\tacceptBoolean(tag, value, reason, null);\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e\", language=\"Hindi\"))\n        self.assertEqual(u\"\\u0aa4\\u0aae\\u0abe\\u0ab0\\u0", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfThe", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if there are still bits to map, map the rest bits\n        if rem:\n            # map the rest bits\n            self.append(_Paf_())\n            self[-1].map(string[-rem:])\n            # update the bit length\n            done += self[-1].bit_len()\n        # return", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\nNext line of code:\n        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\nNext line of code:\n        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    engine.bind(VectorModel)\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert False\n\n    assert True\n\n    assert", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "        'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'T", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.forEach(Module::initializeConfig);\n        modules.forEach(Module::isEnabled);\n        modules.forEach(Module::initialize);\n        // Load commands\n        CommandLoader loader = new CommandLoader();\n        loader.add(new", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available in the sound.\n\n        :type: int\n        \"\"\"\n        return self._call", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void showDemoMode(boolean show) {\n                        MainActivity.this.showDemoMode(show);\n                    }\n\n                    @Override\n                    public void showHideExcludeAccounts(boolean show) {\n                        MainActivity.this.showHideExcludeAccounts(show);\n                    }\n\n                    @Override\n                    public void showRefreshButton(boolean show) {\n                        MainActivity.this.show", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    def dynamo_load(self, values, *, context, **kwargs):\n        if values is None:\n            return list()\n        # noinspection PyProtectedMember\n        load = self.inner_typedef._load\n        return [\n            load(value, context=context, **kwargs)\n            for value in values]\n\n    def", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            return false;\r\n        }\r\n        \r\n        if (result.getResult() == 0) {\r\n            return true;\r\n        } else if (result.getResult() == 1) {\r\n            return false;\r\n        } else if (result.getResult() == 2) {\r\n            return false;\r\n        } else if (result.getResult()", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "        if request.user.is_authenticated:\n            user = request.user\n            userprofile = user.userprofile\n            userprofile.submission_karma += 1\n            userprofile.save()\n            userprofile.submission_karma += 1\n            userprofile.save()\n            userprofile.submission_karma += 1\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to use in gif searching.\n     * Clicking on these terms can perform searches with the term itselft as the query\n     *\n     * @param serviceIds a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n        }\n    };\n\n    @NonNull\n    private final TimeoutHandler mTimeoutHandler = new TimeoutHandler(mWifiManager, mHandler, mWifiConnectionCallback);\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver = new WifiStateReceiver(m", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    def segment_vad(self, vad_path: str, segmentation_options: MetaDict) -> None:\n        \"\"\"Generate segments from VAD output\n\n        Parameters\n        ----------\n        vad_path: str\n            Path to VAD output\n        segmentation_options: MetaDict\n            Options for segmenting the file\n\n       ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Tasks tasks;\n    private final Deployments deployments;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available in this sound.\n\n        :type: int\n        \"\"\"\n        return self._call_fmod(\"FMOD", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section.nbits_offset\n            )\n            bit_writer.set_uint(\n                bufr_message.length.value,\n                bufr_message.length.nbits,\nNext line of code:\n                section.nbits_offset\n            )\n            nbits_encoded += section.nbits_offset\n\n        if wire_template_data:\n            bufr_message.wire", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n\n            # Create abuse report\n            report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments,\n            )\n\n           ", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final BenchmarkResult result = (BenchmarkResult) getRelatedResultSet();\n        final ClassResult clazzResult = result.getElements().get(meth.getMethodToBench().getDeclaringClass());\n        final MethodResult methodResult", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Parsing application arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args, factory.getApplicationOptions());\n        ApplicationOptions options = factory.getApplicationOptions();\n\n        // Setting up the application\n        ProtTestFacade facade = null;\n        if (options.isParallel()) {\n            facade = new ProtTest", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.startRecording(URL(\"http://example.com/recordings\"), BEEP(true));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"record\"), Do.say(\"Please leave a message after the tone.\"));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"stopRecording\"),", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "        listaDeRespostas.getPropriedades().getEstado() == EstadoDaListaDeRespostas.FINALIZADA) {\n            result.redirectTo(RespostasController.class).listarRespostas(listaDeRespostas);\n            return;\n        }\n        \n        if (resposta.getValor()", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().toString());\n\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(PageViewPagerAdapter.class);\n\t\t\t\tadapter.mTracks = ProgramManager.getInstance().mTracks;\n\t\t\t\tmViewPager.setAdapter(adapter", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    AdInterface adServerInterface;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController playerComponentController;\n\n    @Mock\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while initializing the UI\", e);\n\t\t}\n\t\t\n\t\tMainWindow main = new MainWindow(client, stage, appEvent, Configuration.INSTANCE) ;\n\t\tmain.show() ;\n\t}\n\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String adapterName = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec adapterType = TypeSpec.classBuilder(adapterName)\n       .addModifiers(PUBLIC)\n       .addSuperinterface(ParameterizedTypeName.get(Binding.class, injectableType(type)))\n       .addMethod(createInjectMethod(constructor, fields))\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\rNext line of code:\n        }\rNext line of code:\n       \rNext line of code:\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n        new EnableReceiveNormalMsgApi().enableReceiveNormalMsg", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif is_element_node(elem) and context.parent_map.get(elem) is None:\n        return f'{path}{suffix}'\nNext line of code:\n   ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "    t = Table({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]})\n    t.add_column('d', [10, 11, 12])\n    t.add_column('e', [", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n            {\n                SmartReplyMessage m = (SmartReplyMessage)message;\n\n                if (m.getSelectionCount() > 0", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(time_var)\n\nNext line of code:\n\t\tEXOG.append(column_product(dmy_mediator,time_var))\n\nNext line of code:\n\t\tEXOG.append(column_product(dmy_mediator,time_var))\n\nNext line of code:\n\t\tEXOG.append(column_product(dmy_mediator,time_var", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"Thread-0\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));Next line of code:\n        ThreadDumpThread thread2 = sut.thread(\"Thread-1\");\n        assertThat(thread2.getStatus(), equalTo(ThreadStatus.RUNNABLE));Next line of code:\n        Thread", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this, 2000, 2050);\n                picker.setOnDatePickListener(new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(String date) {\n                        mTimeText.setText(date);\n                        mRecord.setRecordTime(new LunarCalendar(date));\n                   ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;Next line of code:\n    private MomoFragment momoFragment;Next line of code:\n    private TabLayout tabLayout;Next line of code:\n    private ViewPager viewPager;Next line of code:\n    private Toolbar toolbar;Next line of code:\n    private View parent", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.tracerouter.enqueue(\"8.8.8.8\")\n        self.tracerouter.enqueue(\"8.8.4.4\")\n        self.tracerouter.enqueue(\"8.8.8.8\")\n        self.tracerouter.enqueue", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def _get_resource(self, cls, id, **kwargs):\n        return cls(self, id, **kwargs)\n\n    def _call_resource_method(self, obj, id, method, data", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, this);\n\n    // Time related\n    sessionStartTime = System.currentTimeMillis();\n\n    // Time display\n    final TextView timeDisplay = (TextView) findViewById(R.id.time_display);\n    final Handler timeDisplayHandler = new Handler();\n    timeDisplay", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        endtime = time.time()\n        _log.trace('Finished calculating ln", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('IMSI', Pt=ID(1), Len=8, Repr='hum'),\r\n            Str('MSclassmark1', Pt=0, Len=1, Repr='hum'),\r\n            Str('MSclassmark2', Pt=0, Len=1, Repr='hum'),\r\n           ", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\n\n    def __parse_tc(self, device):\n        self.__parse_tc_qdisc(device)\n        self.__parse_tc_filter(device)\n        self.__parse_tc_class(device)\n\n   ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    from pyramid_swagger.tween import is_swagger_documentation_route\n        body='abe1351f',\n        status_code=403,\n    )\n    validate_response(response, fake_validator_map)\n    assert not fake_validator.validate.called\n\nNext line of code:\n    from pyramid_swagger.tween import is_swagger", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
