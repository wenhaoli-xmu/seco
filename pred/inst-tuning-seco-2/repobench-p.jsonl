{"pred": "    private final transient JKademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Used to store the state of the DHT */\n    private final File stateFile;\n\n    /* Used to store the state of the Routing Table */\n    private final File routingTableFile;\n\n    /* Used to store", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mEffects.add(new KernelBlurEffect());\n        mEffects.add(new KernelEdgeDetectEffect());\n        mEffects.add(new KernelEmbossEffect());\n        mEffects.add(new KernelGaussBlurEffect());\n        mEffects.add(new KernelSharpenEffect());\n        mEffects.add(new SobelEffect());\n        mEffects.add(new", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    round_keys = None\n\n    @classmethod\n    def eval(cls, pt, rk):\n        return tuple([pt[0] + pt[1] + rk[0], pt[0] + pt[1] + rk[1]]", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectaculumView = spectaculumView;\n        mParameterListAdapter", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventCallbacks.putIfAbsent(event, new Consumer<Boolean>() {\n            @Override\n            public void accept(Boolean result) {\n                if (result", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * ‰ªªÂä°ÁõëÂê¨Âô®ÁÆ°ÁêÜÂô®\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * ‰ªªÂä°ÂÖÉÊï∞ÊçÆ‰ø°ÊÅØÁÆ°ÁêÜÂô®\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    public TaskRunnerContainer()", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.vault(), passphrase, args.checkFileIntegrity());\n\t\t\tif (!problems.isEmpty()) {\n\t\t\t\tprintNoNewline(\"The vault contains the following problems:\");\n\t\t\t\tfor (Problem problem : problems) {\n\t\t\t\t\tprint(problem.name());\n\t\t\t\t}\n\t\t\t\tSystem.exit(1", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getGeneratedPrivateKeyInBase64(), pubKeyInBase64);\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), e.getMessage());\n            return false;\n        }\n    }\n\n    @Override\n    protected", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_AUTHENTICATE, SESSION_ID);\n\n    assertEquals(new U2fSignRequest(SERVER_CHALLENGE_SIGN, APP_ID_AUTHENTICATE, SESSION_ID), signRequest);\n  }\n\n  @Test\n  public", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.cld, self.remote_ip, self.source, self.pass_headers)\n        else:\n            self.acctA = FakeAccounting(self.cId, self.cld, self.remote_ip, self.source, self.pass_headers)\n       ", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "        from..packets import SignatureV4\n\n        class URI(Signature):\n            __typeid__ = 1\n\n            def __init__(self, uri):\n                self.uri = uri\n\n            def __bytearray__(self):\n                return bytearray([self.__typeid__]) + binascii.urlsafe_b64", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            return\n\n          cstr_node.lhs = convert_ast_constraint(children[0])\n          process_children(cstr_node.lhs, children[0])\n\n          if cstr_node.binary:\n            cstr_node.rhs = convert_ast_constraint(children[1])\n            process_children(cstr_node.rhs, children[1])\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.isTablet() && activity.getDefaultSharedPreferences().getBoolean(TDConfig.SETTINGS_LICENSE_DIALOG, true);\n    }\n\n    private static void playVideoIntern", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        PostLocationDataBody data = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude, AppSettings.sFindPeopleMessage, AppSettings.sUserEmail, AppSettings.sUserName, AppSettings.sUserAvatarUrl);\n        Call<ResponseBody> call = mForkMeBackendApi.postLocation(data);\n", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self.inter_layer_pipeline = InterLayerPipeline(\n            network=self.network,\n            option=Option(\n                sw_gbuf_bypass=(False,) * de.NUM,\n                sw_solve_loopblocking=False,\n                hw_access_forwarding=False,\n                hw_gbuf_sharing=False,\n                hw_gbuf_save_writeback=False,\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class Boolean(Type):\n        python_type = bool\n        backing_type = BOOLEAN\n\n        def dynamo_load(self, value, *, context, **kwargs):\n            if value is None:\n                return None\n            return bool(value)\n\n        def dynamo_dump(self, value, *, context, **kwargs):\n            if", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    if isinstance(result, XPathNode):\n        yield result\n\n    if isinstance(result, tuple):\n        yield result[0]\n\n    if isinstance(result, XPathFunction):\n        yield result(context, result.arguments)\n\n    if isinstance(result, list):\n        yield from result\n\n    if isinstance(result, XPathToken) and result.symbol", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECT(\"", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n\n    @BindView(R.id.movie_info_container) CoordinatorLayout movieInfoContainer;\n    @BindView(R.id.movie", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        await wild.set_message(wild_report)\n\n        await wild.insert()\n\n        await ctx.message.delete()\n\n        await ctx.send(f\"Reported a wild {pokemon.label} at {location.location} by {ctx.message.author.mention}.\")\n\n        await ctx.message.add_reaction('üëç')\n\n    @cmd_wild", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(vocab=vocab, **c['data'])\n    # Initialize model\n    model = NLISimple(**c['model'])\n    # Initialize retrieval\n    if c['retrieval']:\n        retrieval = Retrieval(**c['retrieval'])\n        model._retrieval =", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n  assert doppler.c == 2", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n\n            } else if (raffle.isValid() &&!isMan) {\n\n                Participant participant =", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "        assert self.redlock.locked() >= self.redlock.auto_release_time\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(ReleaseUnlockedLock):\n            self.redlock.release()\n        assert self.redlock.acquire()\n        self.redlock.release()\n        assert", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @threed_cone_settings.setter\n    def threed_cone_settings(self, settings):\n        \"\"\"Set the inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :param ConeSettings settings: Cone settings.\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "        return self._calg\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self._calg = None\n\n    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes.append(self._calg)\n        _bytes += self._data\n", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "    cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n    \n    #cell intensity detection\n    findCellIntensityParameter = getParameter(detectSpotsParameter, \"findCellIntensityParameter\", None);\n    cellIntensityMethod = getParameter(findCellIntensityParameter, \"method", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "        } else if (accuracy == Accuracy.GREAT) {Next line of code:\n        } else if (accuracy == Accuracy.NICE) {Next line of code:\n        } else if (accuracy == Accuracy.BAD) {Next line of code:\n        } else {Next line of code:\n        }\n    }\n\n   ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n\rNext line of code:\n    private boolean checkDirectoryValid(File transactionLogDir) {\r\n        return transactionLogDir.exists", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                }\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute a query and return the result as a JSON array.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n     * @return\n     * @throws java.lang.Exception", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    usage_encryption=UsageEncryption.OSY,\n                    operation_mode=OperationMode.CBC,\n                    encryption_algorithm=EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_value=b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] == 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_CEC) {\n            if (env.backrefedMem == 0 || (Config.U", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^get-workflow-steps$', get_workflow_steps, name=\"ajax-get-workflow-steps\"),\n    url(r'^get-pipeline-job-template$', get_pipeline_job_template, name=\"ajax-get-pipeline-job-template\"),\n    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t\tthis.colors = colors;\n\t\t\tthis.notEnoughData = notEnoughData", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n\n    def set_client_id(self, _cid):\n        self._client_id = _cid\n        return self\n\n    def set_user(self, _user):\n        self._user = _user\n        return self\n\n    def set_pass(self, _", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public void when(CheckedRunnable whenStep) {\n        preparation.recordGivenStep(whenStep);\n    }\n\n    @Override\n    public void when(CheckedConsumer<$SystemUnderTest> whenStep) {\n        preparation.recordGivenStep(whenStep);\n    }\n\n    @Override\n    public void when(Check", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    String output = process.await();\n    int exitCode = process.exitCode();\n    if (expectedExitCodes.length == 0) {\n      expectedExitCodes = new Integer[] {0};\n    }\n    if (!Arrays.asList(expectedExitCodes).contains(exitCode)) {\n      throw new IosDeviceException(\n         ", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(\"#\" + options.getString(Keys.TEXT_COLOR, \"FF000000\"));\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\t\tfontStyle = Integer.parseInt(options.getString(Keys.FONT_STYLE, \"0\"));\n\t}\n\t\n\tprivate void setIconSize() {Next line of code", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tReceivedTextMessage textMessage = XmlUtil.fromXml(ReceivedTextMessage.class, xml);\n\t\tString content = textMessage.getContent();\n\t\tString reply = talk(textMessage.getFromUserName(), content);\n\t\tRepliedTextMessage replyMessage = MessageBuilder.buildMessage(textMessage.getFromUserName(), textMessage.getTo", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    if not os.path.exists(file_path + '_info_/'):\n        os.makedirs(file_path + '_info_/')\n    app_info = get_app_info(file_path)\n    app_info['file_md5'] = genMD5(file_path)\n    app_info['file_name'] = os.path.basename(file_path)\n    app", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    async def cmd_raidcity(self, ctx, city):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid party.\n\n        \"\"\"\n\n        await ctx.guild_profile.set('city', city)\n\n        await Embeds.message(ctx.channel, f\"City set to {city}.\")\n\n    @", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25).date())\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11).date())\n        self.assertEqual(date_string_to_date(\"", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', os.path.dirname(config_file))\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # start honeypot session\n        honeyp", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:Next line of code:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsavemgh_v2(positive_data, position_array, \"pFWER_%s\" % opts.tmifile[0], affine_array[0])\n\t\t\t\t\telif opts.outtype[i] =='nii':\nNext line of code:\n\t\t\t\t\t\tsavenifti_v2(positive_data, position_array,", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                Survey", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "        PubKeyAlgorithm.ECDSA: ECDSASignature,\n        PubKeyAlgorithm.ECDSAEncrypt: ECDSASignature,\n        PubKeyAlgorithm.ECDSAEncryptOrSign: ECDSASignature,\n        PubKeyAlgorithm.ECDSAEncryptOrSign: ECDSASignature,\n       ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "        elif self.xsd_types is not None:\n            # XSD typed selection\n            for item in context.iter_self():\n                if context.item is not None and context.is_principal_node_kind():\n                    if isinstance(item, (TypedAttribute, TypedElement)):\n                        yield item\n                    else:\n                        context.item = self.get", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._downed = []\n    self._heap_lock =", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol('foo', protocol)\n        protocol.send_string.assert_called_once_with('foo')\n\n    def test_send(self):\n        \"\"\"\n        Ensures that the message is sent to the correct contact and that the\n        correct Future is returned.\n        \"\"\"\n        nc = NetstringConnector(self.event_loop", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"select * from table\", se.getQuery());\n        assertTrue(se.getAllParameters().isEmpty());\n\n        qe = ds.getQueryExecutions().get(1);\n        assertTrue(qe.isSuccess());\n        assertFalse(qe.isBatch());\n        assertTrue(\"is prepared", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se1 = new StatementExecution();\n        StatementExecution se2 = new StatementExecution();\n        StatementExecution se3 =", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "        # Create the ADR request\n        command = self._createLinkADRRequest(device)\n        \n        # Send the ADR request\n        yield self._sendLinkADRRequest(device, command)\n        \n        # Wait for the ADR response\n        response = yield self._waitForLinkADRResponse(device, command)\n", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "    def fmllr_rescore(self):\n        \"\"\"\n        Rescore lattices with final fMLLR transforms\n\n        See Also\n        -------\n        :class:`~montreal_forced_aligner.transcription.multiprocessing.FmllrRescoreFunction`\n            Multiprocessing function\n        :meth:`.Trans", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#    IEEE802154 = IEEE802154()\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable<Chat, ChatSettingsInfo> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<Chat, ChatSettingsInfo> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITAN2(HITAN2):\n    header = DataElementGroupField(type=SegmentHeader, _d=\"Segmentkopf\")\n\n\nclass HITAN3(HITAN3):\n    header = DataElementGroupField(type=Segment", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time_data = self.img_handle.time_data\n\n        else:\n\n            # Get time from config\n            time_data = self.config.time_data\n\n        json_dict['time'] = [int(time_data[0]), int(time_data[1]), int(time_data[2]), int(time_data[3]), \\\n            int", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        if (null!= mPublicRoomsListList) {\n            mPublicRoomsListList.clear();\n        }\n\n        LoginRestClient loginRestClient = Matrix.getInstance(this).getLoginRestClient();\n        loginRestClient.getPublicRoomsList(new SimpleApiCallback<List<PublicRoom>>() {\n            @Override\n            public void", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n\n    @commands.command()\n    async def bingo(self, ctx, event: str = None, user: discord.Member = None):\n\n        if", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "    chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n    #inferring adjacencies\n    adjacencies = AdjacencyInferer(raw_bp_graphs[run_stages[-1]],\n                                   phylogeny).infer_adjacencies()\n\n    #breaking contigs\n", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        // Updater", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.init(this, mi_APP_ID, mi_APP_KEY);\n                    MiPushClient.registerPush(this);\n                    stopGcmPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"‰ΩøÁî®MiPushÊé®ÈÄÅ\");\n                }\n                break;\n            case \"HwPush\":\n                if(", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanelAll(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, true);\n        GCStatsChartPanel panel =\n                new MetricChartPanel", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                String eventName = packet.getName();\n                List<Object> args = packet.getData();\n                AckRequest ackRequest = new AckRequest(packet, client);\n                client.sendEvent(eventName, ackRequest,", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        VideoSource lVS = factory.createVideoSource(appRtcClient.videoConstraints());\n        VideoTrack lVT = lMS.addTrack(lVS);\n        lVT.setEnabled(true);\n        videoSource = lVS;\n        videoTrack = lVT;\n        videoSourceStopped = false;\n      }\n      logAndToast(\"", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_TRANSIENT, false);\n            contentValues.put(JobStorage.COLUMN_EXACT, true);\n            contentValues.put(JobStorage.COLUMN_REQUIRES_CHARGING, false);\n           ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private PreferenceCategory categoryGeneral;\n    private PreferenceCategory categoryCards;\n    private PreferenceCategory categoryGame;\n\n    private List<Preference> preferenceList;\n\n    private boolean isDialogVisible;\n\n    @Override\n    protected void", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "coopy/restore.py\ndef restore(system, basedir):\n    #save current clock\n    current_clock = system._clock\n\n    #restore from snapshot\n    system = SnapshotManager(basedir).recover_snapshot()\n\n    files = fileutils.last_log_files(basedir)\n    logger.debug(LOG_PREFIX + \"", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        docker_config.add_environment_variables(\n            {\n                \"CLICK_EXEC\": self.config.app_bin,\n                \"CLICK_EXEC_PARAMS\": self.config.app_args,\n            }\n        )\n\n        if self.config.debug_gdb:\n            DebugGdbSupport(self.config).update(docker_config)\n        if self.config.debug_valgrind:\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final String[] SectionNames = { \"Á§æÂå∫ÁÆ°ÁêÜ\", \"ÂõΩÂÜÖÈô¢Ê†°\", \"‰ºëÈó≤Â®±‰πê\", \"‰∫îÊπñÂõõÊµ∑\", \"Ê∏∏ÊàèËøêÂä®\", \"Á§æ‰ºö‰ø°ÊÅØ\", \"Áü•ÊÄßÊÑüÊÄß\", \"ÊñáÂåñ‰∫∫Êñá\", \"Â≠¶ÊúØÁßëÂ≠¶\", \"ÁîµËÑëÊäÄÊúØ\", \"ÁªàÊ≠¢ÁâàÈù¢\" };\n   ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        if (mListener!= null) {\n            mListener.onSearchFragmentInteraction();\n        }\n    }\n\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        try {\n            mListener = (OnSearchFragmentInteractionListener) context;\n        } catch (ClassCastException e) {\n           ", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "        annoGenerated = null;\r\n\rNext line of code:\n        ICompilationUnit cu = createCompilationUnit(model, monitor);\r\n\rNext line of code:\n        ASTRewrite rewrite = createASTRewrite(cu);\r\n\rNext line of code:\n        createTestClass(model, rewrite, testDataFactories, monitor", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        simulator_data = simulator_data_client.get_simulator_data()\n        simulator_data_datagram = MockSimulatorDataDatagram()\n        simulator_data_datagram.simulation_time = simulator_data.time\n        simulator_data_datagram.latitude = simulator_data.gps.latitude\n        simulator_data_datagram.longitude = simulator_data.gps.longitude\n", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        if (httpMessage.getReq().hasRequest()) {Next line of code:\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        if (httpMessage.getRes().has", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        def _read(self, header, data):\n            \"\"\"Read the ID3 data from the file object\"\"\"\n            if header.f_unsynch:\n                data = unsynch(data)\n            if header.f_extended:\n                data = extended(data)\n            return data\n\n        def _write(self, config):\n            \"\"\"Write", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\rNext line of code:\n    return null;\rNext line of code:\n    }\rNext line of code:\n    visitProxOp(new VisitOrd3(n), query);\rNext line of code:\n    return null;", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new DiffusionTransformation(),\n                    new DitherTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new GrayscaleTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "        for field in self._header[1]:\n\n            if field[0] == 1:\n                exception_class = field[1]\n            elif field[0] == 2:\n                exception_message = field[1]\n\n        raise PyOrientCommandException( exception_class, exception_message )\n\n        # if the", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t// this approach feels filthy. Convert lame proxy", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n\ndef test_extract_key():\n    key_shape = \"foo\", \"bar\"\n    item = {\"baz\": 1, \"bar\": 2, \"foo\": 3}\n    assert extract_key(key_shape, item) == {\"foo\": 3,", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES),\n        StaticString.WHITESPACE,\n        new Percentage(),\n        StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"),\n", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\t\tpublic static FormFor formFor(Object resource) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\t\tpublic static FormFor formFor(Object resource, String... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\t\tpublic static FormFor formFor(Object resource,", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        events.append(Event(e))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list_providers(self, params=None):\n        data = self.call_api(\"providers\", type=\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        } else if (id == R.id.menu_save) {\rNext line of code:\n        } else if (id == R.id.menu_select_all) {\rNext line of code:\n        } else if (id == R.id.menu_send) {\rNext line of code:\n        } else if (id", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.ANDNOT, Occur.MUST_NOT);\r\n    opTo", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # Compute the number of frames in the video\n        self.nframes = int(self.vidinfo.seqlen/self.vidinfo.seqlen)\n\n        # Compute the number of frames in the current frame chunk\n        self.current_fr_chunk", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=0.89, laser_wavelength=0", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void processInWorldThread(Side side, EntityPlayer player)\n\t{\n\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tsetRoundingMode();\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFood", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        post.user = get_object_or_404(User, username=username)\n        post.slug = slug\n        post.body_html = markdown.markdown(post.body)\n        post.body_html = bleach.clean(post.body_html, tags=settings.ARTICLE_TAGS, strip=True)\n        post.rank = post.calculate_rank(Comment.objects.filter(post", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// Single cell selection\n\t\t\t\t\t\tSingleCellSelection selection = new SingleCellSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tgetSite().setSelectionProvider(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells.size() > 1) {Next line of code:\n\t\t\t\t\t\t// Multi cell selection\n\t\t\t\t\t\tMulti", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "        self._keyclass = [val]\n\n    @keyclass.register(bytearray)\n    def keyclass_bytearray(self, val):\n        self.keyclass = val\n\n    def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = [RevocationKeyClass.Normal]\n\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n@method(function('comment', nargs=0, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    I.set_tile(tile)\n    I.update(P.params, P.values)\n    im.set_image(I.calculate_field())\n    return im\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.B", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "        with tqdm.tqdm(total=len(jobs)) as pbar:\n            for job in jobs:\n                function = compile_information_func(job)\n                info = function(job)\n                pbar.update(1)\n                self.alignment_info.update(info)\n        else:\n            for job in jobs:\n                function = compile_information_func", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Update the reference RA/Dec\n    platepar.updateRefRADec(skip_rot_update=True, preserve_rotation=True)\n\n    # Update the reference apparent Alt/Az\n    platepar.update", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 70_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 10_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_TAG, \"tag1\");Next line of code:\n        contentValues.put(JobStorage.COLUMN_TRANS", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['year', 'fiscal_year', 'value','remarks', 'component', 'area', 'groups']\n\n    def __init__(self, *args, **kwargs):\n        super(ProgressFilter, self).__init__(*args, **kwargs)\n        self.filters['area", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "        }\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, ActivityComponentHelper componentHelper) {\n        super.onCreateOptionsMenu(menu, componentHelper);\n        SearchManager searchManager = (SearchManager) getContext().getSystemService(Context.SEARCH_SERVICE);\n        SearchView searchView = (SearchView) menu.findItem(R", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "            @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.handleError(cause);\n            }\n        }).then(new Accept<Void>() {\n            @Override\n            protected void doAccept(final Void value) throws Exception {\n                LOGGER.debug(\"Reconnected transport\");\n\n                context.setConnectionState(new ConnectedConnectionState", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment implements NotifiableFragment<LoginFragment.LoginParam> {\n\n    public static String inputMail = \"\";\n   ", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final int k;Next line of code:\n    private final long t;Next line of code:\n    private final double alpha;Next line of code:\n    private final double beta;Next line of code:\n    private final double gamma;Next line of code:\n    private final double delta;Next line of", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;Next line of code:\n    private List<FilterType> filterTypes;Next line of code:\n    private List<FilterType> filterTypes;Next line of code:\n    private List<FilterType> filterTypes;Next line of code:\n    private List<", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        for i in range(0, len(tris), 3):\n            graphics.draw_triangle_strip(tris[i:i+3], fills[i:i+3])\n\n        if self.style.fill_rule == 'evenodd':\n            graphics.draw_colored_triangles(tris, fills, 'evenodd')\n\n        if self.style.fill_rule", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t} else if (data.startsWith(\"shortcut\")) {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tapps.add(a);\n\t\t\t\tneedSave = true;\n\t\t\t}\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.degrees(altAz2RADec(self.lon, self.lat, self.jd_array[0], 0, 0)[1])\n        self.end_alt = np.degrees(altAz2RADec(self.lon, self.lat, self.jd_array[-1], 0,", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    // These are the methods that visitors actually implement\n\n    /**\n     * Called when the visitor first reaches a {@link com.bazaarvoice.jless.ast.node.ScopeNode}.\n     * @return Determines whether the scope's children will be visited.\n     */\n    boolean enterScope(ScopeNode scope);\n\n    /**\n     *", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritSettings.class);\n        bind(GerritSettingsConfigurable.class);\n        bind(GerritUpdatesNotificationComponent.class).asEagerSingleton();\n        bind(GerritChangeListPanel.class);\n\n        bind(GerritRestApi.class).toProvider(new GerritApiProvider());\n\n        bind(Gerr", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r\n                    if (snapZxid >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n               ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any(getattr(s.account, 'type', '') == AccountType.Income for s in", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        ('CallName', 'ReprName', 'Pt', 'PtFunc', 'Val', 'Len', 'LenFunc', 'Type', 'Repr', 'Trans', 'TransFunc'),\n        ('Segment', 'Segment', None, None, None, None, None,'stream', 'hum',", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Api.api().searchBeers(query);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(BeerSearchResult::getBeerName)\n\t\t\t\t.map(BeerSearchResult::getBeerId)\n\t\t\t\t.map(Long::toString)\n\t\t\t\t.map(HistoricSearch", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    state = states.State(POS, rad, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n    \ndef apply_or(left: Column, right):\n    if type(right) == Column:\n       ", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                Request request = RequestFragment.sSelectedRequests.get(i);\r\n                stringBuilder.append(\"\\n\\n\").append(request.getName()).append(\"\\n\");\r\n                stringBuilder.append(\"Package Name: \").append(request.getPackageName()).append(\"\\n\");\r\n                stringBuilder.append(\"Icon: \").append(request.getIcon()).append(\"\\n\");\r\n                stringBuilder.append(\"", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass, int) or issubclass(subclass, float) \\\n           ", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "        return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage(params)\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"Filename\")):\n                    errmsg += \"Data file for pattern %s does not exist.\\n\" % pattern.get(\"Name\")\n                    rvalue = False\n            elif mode == \"Calculate\":\n                if not checkFileExistence(pattern.get(\"Filename\")):\n                    errmsg +=", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/ddi.xml\");\n\t\tFile outputFile = generationService.generateQuestionnaire(inputFile, \"surveyName\");\n\t\t\n\t\tSystem.out.println(outputFile.getAbsolutePath", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        user.setPw(\"password\");Next line of code:\n                        new ChangePasswordTask(user).execute(\"1\");Next line of code:\n                    }\r\n                });\r\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.Cancel, new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', login_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"settings-packages-new\"),\n    url(r'^edit/(?P<slug>[\\w-]+)$', login_required(UpdatePackageView", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[constants.INTERVAL_TIER][0][constants.ENTRY_LIST]\n\ndef run_save_json(tg):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry list\n    before and after saving can", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_feats, unvoiced = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                    except", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot(self", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    int get(FixTag tag);\n    int get(FixTag tag, int defaultValue);\n    int get(FixTag tag, int minValue, int maxValue);\n    int get(FixTag tag, int minValue, int maxValue, int defaultValue);\n    long get(FixTag tag);\n    long get(FixTag", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "        return split\n\n    def load_chunk(self, group, chunk_key, name):\n        \"\"\"Load a chunk.\"\"\"\n        return super(SpikeDetektStore, self).load(group=group,\n                                                  chunk_key=chunk_key,\n                                                  name=name)\n\n    def load(self, group=None, chunk_key=None, name=None", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.addExplanation(new AnyMatchExplanation(anyQueryNode.getField()));\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefix", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator = new ValidatorImpl();\n\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));Next line of code:\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));Next line of code:\n        registry.put((byte) (", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String id = LogDB.getNewId(lang);\n                        String hash = \"\";\n                        FileSaver fileSaver = new FileSaver(content, lang, tweet.getUser().getName(), url, id, hash);\n                        String filename = fileSaver.save(logDb);\n                        if (filename!= null) {\n                            view", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{} {} bits'.format(indent, descriptor, descriptor.nbits))\n\n        else:\n            raise PyBufrKitError('Unknown descriptor type: {}'.format(type(descriptor)))\n\n       ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency_distro", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_messages(self):\n        return Message.objects.filter(contact=self.contact)\n\n    def get_api_outbox(self):\n        return self.texter.read_api_outbox()\n\n    def get_inbox(self):\n        return self.texter.read_inbox()\n\n    def get_api", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    PCollection<GCPProject> liveProjects = pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n\n    // Tag the state objects to indicate they're from the live API and not checked-in.\n    PCollection<KV<GCPResource, KV<StateSource, GCPResourceState>>> taggedLive", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n\n    def tearDown(self):\n        self.rule = None\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.rule.get_pattern_for_directory(\"/\"), \"/\")\n        self.assertEqual(self.rule.get_pattern_for_directory(\"/a/b/c\"), \"/a/b/%s/\")\n        self.assertEqual", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition(condition_for(\"and\", column), condition_for(\"and\", column)))\n    if \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"or\", column), condition_for(\"or\", column)))\n    if \"not\" in operations:\n        conditions.append(NotCondition(condition_for", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(0, 3) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProject;\n\n    private final Settings settings;\n\n    private final Vector<IMethod> methods;\n\n    private final Testprio selectedTestprio;\n\n    private final GeneratorMainView mainView;\n\n    private final GeneratorModel model;\n\n    private final HashMap<String, String> staticBindingsMapBase;\n\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "        self._varz = self.Varz(\n        ^\r\n        SyntaxError: invalid syntax\r\n        [Finished in 0.1s]\r\n\nPlease complete the code given below. \r\nscales/message.py\r\nclass Deadline(object):\r\n  KEY = \"__Deadline\"\r\n  EVENT_KEY = \"__Deadline_Event\"\r\n\r\n  def", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugImages = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate boolean debugText = false;\n\tprivate", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    -> Files.list(input).filter(path -> pathFilenameEndsWith(path, \".java\")).collect(Collectors.toList()));\n    var exitCode = javadocTool.run(cmdLine, files);\n    if (exitCode!= 0) {\n      log.error(null, __ -> \"javadoc failed\");\n    }\n    return exit", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT padr√£o.\n        :rtype: satcfe.res", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write()\n\n    if gopts.event_log:\n      event_log.Write(gopts.event_log)\n\n    if gopts.time:\n      start = time.time()\n\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData() {\n        return new PersistentData();\n    }\n\n    @Provides @Singleton\n    ImageSaver provideImageSaver(Ion ion) {\n        return new", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds, totalQueryCount(5));\n    }\n\n    private QueryExecution getMockSelectQueryExecution() {\n        QueryExecution queryExecution = mock(QueryExecution.class);\n        given(queryExecution.isSuccess()).willReturn(true);\n        given(queryExecution.isBatch()).willReturn(false);\n        given(queryExecution.getQuery()).willReturn(\"select\");\n", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifiers.put(validSchemaVerifier.getPrettyName(), new VerifierBackground(validSchema", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_login_failed, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        if (success) {\n            Log.d(this", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs out the currently logged in user (via user.logout)\n     *\n     * @throws DrupalLogoutException if there was an error logging out, or if there's no currently logged in user.\n     */\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        for q in quirks:\n            text = q.apply(text, first=True, last=True)\n        self.textArea.addMessage(lexMessage(text), self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    def changeTheme(self, theme):\n        self.textArea.changeTheme(theme)\n\n   ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\nNext line of code:\n            (r'/logout', LogOutHandler),\nNext line of code:\n            (r'/register', RegisterHandler),\nNext line of code:\n            (r'/problem/(.*)/(.*)', ProblemHandler),\nNext line of code:\n            (", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown information criterion: \" + criterion);\n        }\n\n        return informationCriterion.compute();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, ty1 & ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection for Sigma types.\n    \n    Arguments:\n    - `expr`: an expression or int or float\n    \"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)\ndef", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);Next line of code:\n    void inject(AnalyticsTracker analyticsTracker);Next line of code:\n    void inject(AudioBookManager audioBookManager);Next line of code:\n    void inject(DemoSamplesInstaller demoSamplesInstaller);Next line of code:\n    void inject", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<Expense> expenses;\n\n    public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //Get active credit card id\n        try {\n            activeCreditCardId = SharedPreferencesUtils.getInt(getContext", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    with pytest.raises(ResponseValidationError) as exc_info:\n        PyramidSwaggerResponse(Response()).text\n    assert exc_info.value.message == 'Response validation error: Content-Type must be set'\n    assert exc_info.value.status_code == 500\n\n    def test_response_content_type_missing_raises_5xx():\n        with pytest.raises", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t\n\t@Override\n\tpublic void enterAddOrDeleteEdgeCommand(AddOrDeleteEdgeCommandContext ctx) {\n\t\tString type = ctx.type.getText();\n\t\tString source = ctx.source.getText();\n\t\tString target = ctx.target.getText();\n\t\tString value = ctx.value.getText();\n\t\tString cmd = ctx.cmd.getText();\n\t\tString", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n            finally:\n                self.finished_processing.stop_check()\n                break\n        return", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n   ", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n        instruments = Instruments(fdmexec)\n\n        self.assertAlmostEqual(instruments.airspeed_indicator.airspeed, fdmexec.Get", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "CMD_OPTION_HELP_HELP_LINE,\n    'ac, assoc-class, result-class, role, result-role, include-qualifiers, include-classorigin, propertylist, names-only, namespace, help',\n]\n\nINSTANCE_COUNT_HELP_LINES = [\n    # pylint: disable=line-too-long\n    'Usage: pywbemcli", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n\t\tUsers user = (Users) SecurityUtils.getSubject().getPrincipal();\n\t\tmv.addObject(\"user\", user);\n\t\treturn mv;\n\t}\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(\"AWS SDK client exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"Invalid operation exception: \" + t.getMessage", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "        person_name=u'\\u0906\\u0930\\u0935',\n        join_keyword=\"JOIN\")\n\n    def run_e2e_flow_for_language(self, language, person_name, join_keyword):\n        # Create a contact\n        contact = Contact.objects.create(name=person_name,\n                                         phone_number=TEXTLOCAL_PH", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n\n  protected Location currentLocation;\n  protected Location lastLocation;\n  protected Location lastBestLocation;\n  protected long lastLocationTime;\n  protected long lastLocationLat;\n  protected long lastLocationLng;\n  protected long lastLocationUpdateTime;\n  protected boolean lastLocationIs", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        refresh_avd(adb, DYNAMIC_TOOL_DIR,'reference', 'dup', 'emulator')\n        avd_load_wait(adb)\n    else:\n        # adb, vm_path, vm_name, vm_ip, vm_port, vm_username, vm_password\n        refresh_vm(SETTINGS.VM_UUID,", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class Header(Layer):\n    constructorList = [\n        Int('RRC_Version', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_ProtocolDiscriminator', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_Protocol", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh, faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh, faces_rh)\n\t\t\tadjacency = adjacency_lh + adjacency_rh\n\t\t\tadjacency = np.array(adjacency)\n\t\t\tadj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" IS NULL\");\r\n    } else if (exp.getRhsValue() instanceof Constant) {\r\n      result.append(\" \").append(((Constant) exp.getRhsValue()).getValue());\r\n    } else {\r\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\r\n      acceptOrVisitValue(exp", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LIST, list);\n        sessionContext.fireSessionEvent(CACHE_LIST);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "        Type1_V, Type1_TV, Type2, Type3_V, Type3_TV, Type4_LV, Type4_TLV, Type6_LVE, Type6_TLVE, StrRR, Layer3, Layer3, Layer3, Layer3, Layer3, Layer3, Layer3", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                new TimeEntryOvertimeAggregation()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy(new TimeEntryOvertimeAggregation());\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy(new TimeEntryOvertimeAggregation());\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "        self._pkalg = PubKeyAlgorithm(val)\n\n        _c = {\n            # True means public\n            (True, PubKeyAlgorithm.RSAEncryptOrSign): RSAPub,\n            (True, PubKeyAlgorithm.RSAEncrypt): RSAPub,\n            (True, PubKeyAlgorithm.RSAS", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "        self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux_ad_chan1(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n        self._expansion_num, ExpansionInfo.MUX_AD_CHAN1)\n\n    @property\n    def", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n\n        for i in range(count):\n            key = read_u32le(f)\n            ref = read_u16le(f)\n            self.references[ref] = key\n\n        s.close()\n\n    def write_index(self):\n        index_name = self.index_name + \"", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Connect Invitation'))\n            template = 'accounts/emails/invitation.html'\n            recipient = user.email\n            url = reverse('accounts:activate', args=[user.id, user.token])\n            comments = form.cleaned_data", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        await Utilities.message(ctx.channel, f\"Beep Beep! **{ctx.message.author.display_name}**, This feature is under-development!\")\n\n        raid_dict = ctx.bot.guild_dict[ctx.guild.id]['raidchannel_dict'][ctx.channel.id]\n\n        channel_mentions = ctx.message.raw_channel_mentions\n\n        if len(channel", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BTC-BCC')\n        elif name == \"%s_BCH_BTC\" % constant.EX_GATE:\n            ex = Gate('bcc_btc')\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "        if item is not None:\n            self.add_xsd_type(item)\n            yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestIteratorNormal(100, 10);\n    helpTestIteratorParanoid(100, 10);\n    helpTestIteratorCount(100, 10);\n  }\n  \n  @Test\n  public void testSolutions() {\n    helpTestSolutions(100, 10);\n  }\n  \n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setQueryNodeExpanderFactory(QueryNodeExpanderFactory.ADVANCED);\n\t\tresult.setExplanationFactory(ExpansionFacetLabelFactory.class.getName", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.init(this, SYS, deviceMiToken);\n                    MiPushClient.setPushCostTimeMillis(1000);\n                    MiPushClient.setPushTimeMillis(1000);\n                    MiPushClient.setPushIntervalMillis(1000);\n                    MiPushClient.setPushTimeMillis(1000);\n                    Mi", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt ='simple'\n\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n        if show_header:\n            output.append('')\n\n    if status:\n        output.append(status)\n\n    return '\\n'.join(output)\n\n\ndef run_sql(vcli, sql, vspecial=None):\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api(wordnik_api, token)\n\n    @app.route('/api/dictionary/wordnik')\n    def dictionary_api_route():\n        return wordnik_api\n\n    @app.route('/api/subtitle/opensubtitles')\n    def subtitle_api_route():\n        return subtitle_api\n\n    @app.route('/api", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tctx = this;\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\t\trefreshButton = (ImageView) findViewById(R.id.image_refresh);\n\t\tTextView txtView", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.addCleanup(CloseHandle, handle)\n\n        # CreateEvent should return a valid handle.\n        self.assertNotEqual(handle, INVALID_HANDLE_VALUE)\n\n        # CreateEvent should return a valid handle.\n        self.assertNotEqual(handle, INVALID_HANDLE_VALUE)\n\n        # CreateEvent should return a", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, this.tasks);\n        this.jobs = new SpringJobs(restTemplate, root, this.tasks, this.deployments);\n        this.vms = new SpringVms(restTemplate, root, this.tasks);\n    }\n\n    @Override\n    public Observable<Director", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return parserHolder.getParser().parse(annotation.getEnclosedElements().stream().filter(element -> element.getAnnotation(annotation)!= null).collect(Collectors.toList()));\n                })\n               .collect(Collectors.toList());\n\n        Swagger swagger = specificationGeneratorFactory.build(fileManagerFactory).generate(parsedPaths, roundDescriptor);\n\n        codeGeneratorFactory.build(file", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected BinaryDataStore binaryDataStore;\n\n    protected CountDownLatch latch;\n\n    protected AtomicInteger leftRequestsCount;\n\n    protected AtomicReference<FetchResult> lastFetchResult;\n\n    protected AtomicReference<Page> lastPage;\n\n    protected AtomicReference<CrawlerRequest> lastRequest;\n\n    protected", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton selectChannel;\n    private GuiButton forgetChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n    private GuiButton forgetChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorWebModulesPageTitle);\rNext line of code:\n        form.setFormText(Messages.configurationEditorWebModulesDescription);\rNext line of code:\n        ExpandableComposite webAppSection = toolkit.createExpandableComposite(form.getBody(), SWT.NONE);\rNext line of code:\n        webAppSection", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.item = ObjectInteger()\n        type.name = \"integer\"\n\n        self.assertEqual(\"42\", type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        type = Type()\n        type.name = \"integer\"\n\n        self.assertEqual((\"integer\",), type.get_comparable_values())\n\n", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "        new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(SetEndTimeCommand.class, EndEvent::", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type +'is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPPutFailedException while inserting message\", e);\n\t\t\t\t\treturn false;Next line of code:\n\t\t\t\t} catch(RejectedExecutionException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth Rejected", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        cond_stack_size -= get_stack_effect(bytecode[k][0], bytecode[k][3])\n      except Exception as e:\n        logger.error(\"Error in get_stack_effect: %s\", e)\n        return\n      k -= 1\n    condition_bytecode = condition_bytecode[1:]\n    condition = self", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<DailyExpense> dailyExpenses = new ArrayList<>();\n\n    //VIEWS\n    TextView totalExpensesTextView;\n    TextView totalPaymentsTextView;\n    TextView totalBalanceTextView;\n    TextView totalExpensesTextView;\n    TextView totalPaymentsTextView;\n    TextView totalBalanceTextView;\n    TextView totalExpensesTextView;\n   ", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t} else if (type == TAB_MY_LISTS) {\n\n\t\t\tif (syncSubscription!= null)\n\t\t\t\tsyncSubscription.unsubscribe();\n\t\t\tstatusText.setVisibility(View.GONE);\n\t\t\temptyText.setVisibility(View.GONE);\n\t\t\trateButton.hide();\n\t\t\tlistAddButton.show();\n\n\t\t\t// Show the custom, local user", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "pingparsing/_parser.py\nclass WindowsPingParser(PingParser):\n    @property\n    def _parser_name(self) -> str:\n        return \"Windows\"\n\n    @property\n    def _icmp_reply_pattern(self) -> str:\n        return (\n            \" from \"\n            + self._DEST_PATTERN\n           ", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        } else {\rNext line of code:\n            latestMessageOnDisplay = new AtomicLong(chat.getLastMessage().getId());\r\n        }\rNext line of code:\n    }\rNext line of code:\n    @Override\rNext line of code:\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic static void main(String[] args) {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.start();\n\t\t\tgame.join();\n\t\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, statementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, batchCallable());\n        assertThat(qe, isCallable", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT)!= null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent > 0) {\n        statusWidget.setProgress(percent);\n      }\n    } else if (Utils.getXmlNodeValue(doc, TAG_CURRENT_BYTES", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n    merged_assembly_graph = OrderGraph.from_aps(merged_assembly_points_by_ids.values())\n    update_assembly_points_with_merged_assembly(original_assembly_points_by_ids, merged_assembly_points_by", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, config):\n\n        embed = Embeds.make_embed(header=\"Channel Configuration\", header_icon", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tgd.levelsManager.installAsync(file, name, author, apiId, new DoubleCallback() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\t\t\tlong id = (long) objects[0];\n\t\t\t\t\t\t\t\tgd.levelsManager.showSuccessfullyInstalledDialog();\n", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Caption format provuder for the monthly view */Next line of code:\n    private WeeklyCaptionProvider monthlyCaptionProvider;\n\n    /** Caption format provuder for the day view */Next line of code:\n    private WeeklyCaptionProvider dayCaptionProvider;\n\n    /** Caption format provuder", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<List<ReleaseSummary>> listReleases() {\n        return releases.list();\n    }\n\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator);\n\n   ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected BaseAnimation mAnimation;\n\n    public MultiItemTypeAdapter(Context context, List<T> datas) {\n        mContext = context;\n        mDatas = datas;\n        mItemView", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // Expected\n                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \t\t\n\t}\n\t\n\tpublic void testMultipleFiles() {\n\t    //", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "        trackHistoryEntry = new TrackHistoryEntry();\n        trackHistoryEntry.title = liveInfo.getTitle();\n        trackHistoryEntry.endTime = currentTime;\n        trackHistoryEntry.startTime = new Date(0);\n        trackHistoryEntry.stationUuid = liveInfo.getStationUuid();\n        trackHistoryEntry.stationName = liveInfo.getStationName", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    IRavelryActivity {\n\n    @Bean\n    YarrnSpiceService spiceManager;\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.navigation_drawer)\n    ListView navigationDrawer;\n\n    @ViewById(R.id.actionbar)\n    ActionBar actionBar;\n\n    @NonConfigurationInstance", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                        Intent intent = new Intent(mContext, IconPreviewFragment.class);\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_ICON, home.getIcon());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_TITLE, home.getTitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_SUBTITLE, home.getSubtitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_STYLE", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    )\n\n    max_workers = ctx.obj", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        return None\n\n    def getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        playlistItemID = self._getPlaylistItemID(item)\n        if playlistItemID:\n            return self[playlistItemID]\n        else:\n            return None\n\n    def", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertEqual(\n            _environment_to_string({u\"a\": u\"b\", u\"c\": u\"d\"}),\n            u\"a=b\\0c=d\\0\\0\")\n\n    def test_type_check_for_environment_value(self):\n        self.assertEqual(\n            _environment_to_string({u\"a\": u\"b\", u", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if not isinstance(cmd, InteractiveCommand) and gopts.pager:\n      print(\"fatal: '%s' requires a tty\" % name, file=sys.stderr)\n      return 1\n\n    if gopts.pager:\n      pager = RunPager(cmd, gopts.pager)\n      result = pager.Run()\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                taskData.setFinishDate(new Date());\n                // ‰ªªÂä°ÊâßË°åÊàêÂäüÂêéÔºåÈúÄË¶ÅÈÄöÁü•ÁõëÂê¨Âô®„ÄÇ\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onTaskSuccess(taskData);\n                }\n            } catch (TaskPartnerException e) {\n                // ‰ªªÂä°ÊâßË°åÂ§±Ë¥•Âêé", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        await r.after_headers(Entry.create(\"http://example.com/\"))\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.reject_set, set())\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode([404])\n        await r.after_headers(Entry", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //Áî®Êà∑ÁöÑÂØÜÁ†Å\n        stuPassword = \"123456\";\n        //Áî®Êà∑ÁöÑÂπ¥Á∫ß\n        stuGrade = \"2018\";\n        //Áî®Êà∑ÁöÑÂ≠¶Èô¢\n        stuCollege = \"ËÆ°ÁÆóÊú∫Â≠¶Èô¢\";\n        //Áî®Êà∑ÁöÑ‰∏ì‰∏ö\n        stuMajor = \"ËΩØ‰ª∂Â∑•Á®ã\";\n        //Áî®Êà∑ÁöÑÁè≠Á∫ß", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\nNext line of code:\n        self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_living_property(self, state: Dict[str, Any], obj: Living) -> None:\n        state[\"location\"] = mudobj_ref(obj.location)\n        state[\"name\"]", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator, boolean cleaningFolder, String surveyName)", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n            exit(1);\r\n        }\rNext line of code:\n        DataDirHelper helper = new DataDirHelper(new File(dataDir", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        except UncertainTimeError:\n            log.error(\"We couldn't figure out how accurate your clock is.  Sorry, Switzerland won't work!\")\n            sys.exit(1)\n\n    def run(self):\n        \"Run the client until the quit event is set.\"\n        self.start()\n        self.listener.run()\n        self", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test a more complex query\n        String movieTitle = \"The Shawshank Redemption\";\n        String movieOverview = \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\";\n        String moviePosterPath = \"http://image.tm", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem2)), [self.elem2])\n        self.assertEqual(list(node_children(self.elem3)), [self.elem3])\n        self.assertEqual(list(node_children(self.elem4)), [self.elem4])\n        self.assertEqual(list(node_children", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tmapView = (MapView) findViewById(R.id.map_view);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t\tmapView.setTraffic(true);\r\n\t\tmapView.setMultiTouchControls(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "ConfigCommandProcessor(\nConfigVlanCommandProcessor(\nConfigVRFCommandProcessor(\nConfigInterfaceCommandProcessor(\n)))\n\nclass Cisco3560SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return EnabledCommandProcessor(\nConfigCommandProcessor(\nConfigVlanCommandProcessor(\nConfigVRFCommandProcessor(\nConfigInterface", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n       ", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"\n        word_counts = Counter()\n        for u in self.utter", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final String TextBlockObject = \"String\";\n\n    private static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\npackage io.hummer.util;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setRootVisible(false);\n        tree.setShowsRootHandles(true);\n        tree.setCellRenderer(new DefaultTreeCellRenderer() {\n            @Override\n            public Component getTree", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1 with class=todoapp-header and text=Todo App\n\t\t// Input with class=todoapp-add-new-todo and type=text\n\t\t// Input with class=todoapp-add-new-todo and type=submit\n\t\t// Input with class=todoapp-add-new-t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output!=null) {\n                    Intent intent = new Intent(CropImageActivity.this, CropImageView.class);\n                    intent.putExtra(\"image\", output);\n                    intent.putExtra(\"cropAspectX\", cropAspectX);\n                    intent.putExtra(\"cropAspectY\", cropAspectY);\n                    intent.putExtra(\"cropAspectRatio\", CROP", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        setHasOptionsMenu(true);\n\n        if (savedInstanceState!= null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW_TOOLBAR);\n            mShowFastScroller = savedInstanceState.getBoolean", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\nNext line of code:\n    return\nNext line of code:\n    validate_key_condition(model, index, key)\nNext line of code:\n    return\nNext line of code:\n    validate_key_condition(model, index, key)\nNext line of code:\n    return\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,Next line of code:\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n        dataset.datasetChanged();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,Next line of code:\n            int id,Next line of code:\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        \n        # Add the resources\n        for url, resource in self.resources.items():\n            self.api.add_resource(resource, url)\n            \n        # Add the error handler\n        self.api.error_handler = handle_error\n        self.api.handle_error = handle_error", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_dialog = ProjectSettingsDialog(settings_ini, directory, **kwargs)\n        self._settings_dialog.signalSettingsChanged.connect(self._settings_changed)\n        self._settings_dialog.signalSettingsImported.connect(self._settings_imported", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *            The week that was clicked\n         */Next line of", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, pass):\n        self._pass = pass\n        return self\n\n    def set_client_id(self, client_id):\n        self._", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "        case MESSAGE: {\n            if (packet.getSubType() == PacketType.EVENT) {\n                String eventName = packet.getName();\n                List<Object> args = packet.getData();\n                namespacesHub.onEvent(client, eventName, args, ackRequest);\n            } else if (packet.getSubType() == PacketType.DISCONNECT", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());Next line of code:\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());Next line of code:\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    BoundedSource<GCPProject> projectsSource = new LiveProjectSource(org);\n    PCollection<GCPProject> projects = pipeline.apply(\"Read projects\", Read.from(projectsSource));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> live", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "        name = Column(String)\n        email = Column(String)\n        joined = Column(DateTime)\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n        by_joined = LocalSecondaryIndex(range_key=\"joined\", projection=[\"email\"])\n\n    return MyModel\n\n\ndef test_init(model):\n    \"\"\"Test", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "        self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                   dim, vocab, lookup,\n                                                   translate=True, normalize=True)\n        else:\n            raise NotImplementedError()\n\n        children.append(self._def_reader)\n\n        self._def_combiner = MeanPoolCombiner(emb_dim", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private final AcceptCallback _acceptCallback = new AcceptCallback()\n    {\n        @Override\n        public void statusChanged(AcceptCallbackState state)\n        {\n            synchronized (_lockObject)\n            {\n                if (state == AcceptCallbackState.Connected)\n                {\n                    _pendingAudiologistInfo = true;\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int videoQuality;\n    private String videoPath;\n    private String videoName;\n    private String videoType;\n    private String videoPathForShare;\n    private String videoNameForShare;\n    private String videoTypeForShare;\n    private String videoPathForSave;\n    private String videoNameForSave;\n", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "        return render(request, self.template_name, {'form': form, 'object': self.object})\n\n    def post(self, request, *args, **kwargs):\n        if not self.kwargs.get(\"pk\", None):\n            self.object = None\n        else:\n            self.object = self.get_object()\n        form_class", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t// Handle the LOCK\n\t\tint nbLocked = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tboolean isLocked = false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.handle = HDF5Factory.openForReading(filename);\n\t\t\t\tcheckLoomFormat();\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\npackage com.rashwan.reactive_popular_movies.data.di;\nimport com.rashwan.reactive_popular_movies.data.model.Cast;\nimport", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tview.showException(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark and getting the result\n\t *\n\t * @return the result\n\t */\n\tpublic BenchmarkResult runBenchmark() {\n\t\treturn benchmark.run", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job_manager = YMLBasedJobManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\"Problem finding a suitable endpoint.\",\n\t\t\t\t\t\tError.NOT_SUITABLE_ENDPOINT_FOUND, null);\n\t\t\t}\n\t\t\tAPIWrapper wrapper = createMostSuitable", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con √©xito.')\n                return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n    else:\n      self._cstr = self.__build_tree(root)\n\n  def __build_tree(self, root):\n    if root.data[0] == COMPARE_OP:\n      lhs = self.__build_tree(root.children[0])\n      rhs = self.__build_tree(root", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tJoinResult result = JoinResult.SUCCESS;\n\t\ttry {\n\t\t\tif (this.isSpectating()) {\n\t\t\t\tresult = JoinResult.ROUND_PLAYING;\n\t\t\t}\n\t\t\telse if (this.getRound()!= null) {\n\t\t\t\tresult = JoinResult.ROUND_PLAYING;\n\t\t\t}\n\t\t\telse if", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = decimal_to_string(value, fmt_token)\n\n        if fmt_modifier == 'o':\n            result += ordinal_suffix(int(result))\n\n        return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string?',", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc.get_drawings():\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties = {\"c\": ObjectString()}\n        object2.properties = {\"c\": ObjectString()}\n        object3.properties = {\"c\": ObjectString()}\n        object1.pattern_properties = {\"d\": ObjectString()}\n        object2.pattern_properties = {\"d\": ObjectString()}\n        object3.pattern_properties = {\"", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] dataBytes = buildRawData(clientConfig, dataSource);\nNext line of code:\n          byte[] preambleBytes = buildRawPreamble(clientConfig, catBytes, dataBytes);\nNext line of code:\n          byte[] dataBytes = buildRawData(clientConfig, dataSource);\nNext line of code:\n          byte", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\nNext line of code:\n  value_error(AFO)\nNext line of code:\n  to_map_and_back(DFO, DopplerPoly(0, 0,", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "        hasJsonPath(\"/hits.total\", is(100)));\n    }\n\n    @Test\n    public void storeWithSuggest() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab-records-csw.xml\")).openStream());\n       ", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "        self._pubalg = PubKeyAlgorithm(val)\n        if self._pubalg in [PubKeyAlgorithm.RSAEncryptOrSign, PubKeyAlgorithm.RSAEncrypt, PubKeyAlgorithm.RSASign]:\n            self.signature = RSASignature()\n\n        elif self._pubalg == PubKeyAlgorithm.DSA", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());Next line of code:\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());Next line of code:\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());Next line of code:\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = authz.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(Global.InvokeKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException | IOException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit-user'),\n    url(r'^users/(?P<pk>", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            startActivity(new Intent(getActivity(), StatsActivity.class));\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack!= null) {\n            if (stack.getNumberOfCards() < 4) {\n               ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private DropMenuAdapter dropMenuAdapter;\n    private DropMenu dropMenu;\n    private HashMap<String, Object> mapValue;\n    private String[] titles;\n    private String[] titles1;\n    private String[] titles2;\n    private String[] titles3;\n    private String[] titles4;\n    private String[]", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.updateBlockShape();\n        obj.updateBlockLabels();\n        obj.updateBlockSockets();\n        obj.updateBlockTags();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.updateBlockLinks();\n        obj.update", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = XDA([XorDiff(d1), XorDiff(d2)])\n        beta = XorDiff(d3)\n        i, j = self._find_preimage(f, beta)\n        assert i == 0x01 and j == 0x02\n\n        f = XDA([RX", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiConstant(MultiConstantNode node, List<List<Character>> newCharacterOptions, List<List<Character>> newCharacterChecks);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, this);\n\t\tpm.registerEvents(blockListener, this);\n\t\t\n\t\t// Load the gates\n\t\tGate.load();\n\t\t\n\t\t//", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        connection.saslMechanism.handleChallenge(new Challenge(challengeData));\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.saslMechanism.handleSuccess(new Success(doc));\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = doc.elementText(\"condition\");\n        connection", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher\nLea32 = LeaCipher\nShacal1_32 = Shacal1Cipher\nShacal2_32 = Shacal2Cipher\nFeal8 = FealCipher\nTea32 = TeaCipher\nXtea64 = XteaCipher", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;Next line of code:\n    private SongListAdapter mAdapter;Next line of code:\n    private boolean mShowToolbar;Next line of code:\n    private boolean mShowFastScroller;Next line of code:\n    private int mSortOrder;Next line of code:\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            mSelectedEffect = effect;\n            mSpectaculumView.setEffect(effect);\n            mSelectedEffect.addListener(this);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean selectEffect(String name) {\n        for(Effect effect : mEffects) {\n            if(effect.getName", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause_dict,\n            Repr='hum'),\n        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            refresh();\n        }\n    };\n\n    private View mRootView;\n\n    private View mAlbumsLayout;\n\n    private View mSongsLayout;\n\n    private View mAlbumsHeader;\n\n    private View mSongsHeader;\n\n    private View mAlbumsHeaderSeparator;\n\n    private View mSongsHeaderSeparator;\n\n    private View", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "        self.log_debug(f\"Finished loading corpus in {time.process_time() - begin_time} seconds\")\n\n    def _load_corpus_from_source_mp(self) -> None:\n        \"\"\"\n        Load a corpus using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self, \"", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t@Override\n\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"users\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listRemittUsers() {\n\t\treturn UserManagement.listUsers();\n\t}\n\n\t@", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"account/headers\")\n    Observable<HttpHeader> headers(@Query(Constants.KEY", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.optionName(), message.value());\n    }\n\n    @OverrideNext line of code", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, Hz=1), bandwidth, bits=32, tol=1)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 348.517),\n     ])\n  def test_glasberg_moore_slan", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "        if is_undefined_length:\n            fp.seek(fpStart + 4)  # skip the 4 zero bytes after the delimiter\n        else:\n            fp.seek(fpStart + bytelength)  # skip the length bytes after the delimiter\n        return Sequence(seq)\n    else:\n        return Sequence([])", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        commentProcessor.setCurrentCommentWrapper(CommentWrapper.create(document, expressionContext));\n        commentProcessor.process(document);\n        commentProcessor.commit(document);\n      }\n    } catch (ProxyException e", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(application, prefs, searchCriteria.values(), page, PAGE_SIZE);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity) getActivity", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def name(self):\n        return self._name\n\n    @name.register(str)\n    @name.register", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.addMessage(serverMsg, False)\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    def addMessage(self, lexmsg, chum):\n        if len(lexmsg) == 0:\n            return\n        color = chum.colorcmd()\n        systemColor = QtGui.QColor(self.parent", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n    def check_arg(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n           ", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    desired_data = get_prop_data(comps, phase_name, \"formation_energy\", datasets)\n    desired_data = filter_temperatures(desired_data)\n    desired_data = filter_configurations(desired_data, configuration, symmetry)\n    calculate_dict = get_prop_samples(desired_data, constituents)\n    feature_candidate_models =", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n            return;\n        }\n\n       ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "        PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> suggest(@QueryMap Map<String, String> serviceIds, @Query(\"q\") String query);\n\n    @POST(\"anonid\")Next line of code:\n    Call<AnonIdResponse> anonId(@FieldMap Map<String, String> fields);\n\n    @FormUrlEncoded\n   ", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\n\n    def transaction(self, *objs, condition=None, sync=None):\n        \"\"\"Create a :class:`~bloop.transactions.ReadTransaction` or :class:`~bloop.transactions.WriteTransaction`.\n\n        :param objs: objects to read or write.\n        :param condition: only perform", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        confusion_matrix_formatter = ConfusionMatrixFormatter(decimals=2, normalize=True)\n        confusion_matrix_str = confusion_matrix_formatter.format(confusion_matrix, data_set.label_map)\n\n        self.log.info(confusion_matrix_str)\n\n        self.plot_confusion_matrix(confusion_matrix, data_set.label_map, normalize=True)\n\n        self", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@ResourceNext line of code:\n\tprivate ChallengeServices challengeServices;\n\t@ResourceNext line of code:\n\tprivate CategoryServices categoryServices;\n\t@ResourceNext line of code:\n\tprivate CountryServices countryServices;\n\t@ResourceNext line of code:\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "    def create_vertex(self, vertex_cls, **kwargs):\n        result = self.client.command(\n            to_unicode(self.create_vertex_command(vertex_cls, **kwargs)))[0]\n\n        props = result.oRecordData\n        return vertex_cls.from_graph(self, result._rid,\n                                     self.props_from_db[vertex_cls](props", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the hidden representation\n        of the input sequences. The RNN is bidirectional, and the output of the RNN is fed back", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nNext line of code:\nall_platform_slugs.extend(ZANATA_SLUGS)\nNext line of code:\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nNext line of code:\nall_platform_slugs.extend(WEBLATE", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\t}\n\n\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Class\", '=', Alignment.Left);\n        table.addHeader(\"Runs\", '=', Alignment.Right);\n        table.addHeader(\"Mean\", '=', Alignment.Right);\n        table.addHeader(\"Median\",", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      visitor.traverse(node)\n      return visitor.edges\n\n    def get_parent_loop(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):\n          EdgeVisitor.__init__(self)\n          self.edges = []\n\n        def visit(self, edge):\n          self.edges.append(edge)\n\n      visitor = B", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getNumberOfInternalNodes();\n\t\tthis.Tarray = new int", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    def parse_datetime_picture(marker: str, dt: datetime.datetime, lang: Optional[str] = None) -> str:\n        component = marker[1]\n        fmt_token = marker[2:-1]\n\n        if ',' not in fmt_token:\n            presentation, width = fmt_token, ''\n        else:\n            presentation", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "        }\n\n        @Override\n        public void onRoomMemberAdded(RoomMember member) {\n            if (member.getUserId().equals(mMyUserId)) {\n                return;\n            }\n\n            if (member.membership.equals(RoomMember.MEMBERSHIP_JOIN)) {\n                mRoom.addMember(member);\n            }\n        }\n\n        @", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI32ToDDI33Preprocessor();\n\t\n\t//", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveDetaille(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_choice.GetClientData(self.releves_choice.GetSelection())\n        Document", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n        return H\n\n    def compute_angular_momentum_residual(self, p, qd):\n        \"\"\"\n        Compute the residual of the angular momentum at point `p` for a given\n        velocity `", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult!= null) {\n            final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n            final Pattern pattern = queuedProject.getPattern();\n            final BookmarkShort bookmark = queuedProject.getBookmark();\n            final Needle needle = queuedProject.getNeedle();\n\n            name.setText(pattern.getName());\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand());\n        // Register the currency registry\n        game.getServiceManager().setProvider(this, CurrencyRegistryModule.class, new CurrencyRegistryModule());\n        // Register the loan module\n        game.getServiceManager().setProvider(this, LoanModule.class, new LoanModule());\n        // Register the SQL module\n       ", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        prior_specs = build_prior_specs(prior, params)\n        _log.trace('Prior specs: %s', prior_specs)\n        return prior_specs\n\n    def _fit(self, symbols, datasets, prior, restart_trace=None, restart_step=None, restart_step_interval=None, restart_step_offset=None, restart_step_offset", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\n  elif op == LOAD_NAME:\n    return Ref.fromName(arg)\n  elif op == LOAD_ATTR:\n    return Ref.fromName(arg[0])\n  elif op == LOAD_GLOBAL:\n    return Ref.fromName(arg[0])\n  elif op == LOAD_METHOD:\n    return Ref.from", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final Input input;\n\tprivate final Config config;\n\tprivate final ClientNetwork network;\n\tprivate final ClientNetworkState state;\n\tprivate final ClientNetworkState state2;\n\tprivate final ClientNetworkState state3;\n\tprivate final ClientNetworkState state4;\n\tprivate final ClientNetwork", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorsWithBooks() {\n\t\treturn dslContext.selectFrom(AUTHOR).join(BOOK).on(AUTHOR.ID.eq(BOOK.AUTHOR_ID)).fetch().into(AuthorWithBooks.class);\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic List<AuthorWithBooks>", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\tForestReader reader = new Forest(in);\n\t\tForestWriter writer = new Forest(out);\n\t\tSQLTranslation result = exp.run(this);\n\t\tresult.executeServer(result, reader, writer);\n\t}\n\n\t@Override", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "    if is_activity:\n        run_app = package + \"/\" + launcher\n        print \"\\n[INFO] Launching APK Main Activity\"\n        subprocess.call([adb, \"-s\", get_identifier(),\n                         \"shell\", \"am\", \"start\", \"-n\", run_app])\n    else:\n        print \"\\n[", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n    Risk parseRisks(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    bar_type =", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        // parameters\n        assertThat(pe, paramAsInteger(1, is(", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\tdef on_tree_selection_changed(self, selection):\n\t\tif len(selection) == 1:\n\t\t\tif type(selection[0]) is Sketch:\n\t\t\t\tself._viewWidget.set_sketch_view(selection[0])\n\t\t\t\tself._geometry_dock.set_sketch(selection[0])\n\t\t\t\tself._ribbon_widget.setCurrentIndex(1)\n", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                } else {\n                    return new ApiException(cause);\n                }\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setRequestInterceptor(new Inter", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Integer.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Long.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Double.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Float.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE, false)) {Next line of code:\n\t\t\tlabelFactory = new LowerCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^(?P<slug>[\\w\\-\\+]+)/add$', AddPackageCIPipeline.as_view(), name=\"package-add-ci-pipeline\"),\n    url(r'^(?P<slug>[\\w\\-\\+]+)/delete$', DeletePackageView.as_view(), name=\"package-delete\"),\n   ", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        intent.putExtra(Extras.EXTRA_RESUMED, true);\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        LogUtil.e(Log.getStackTraceString(e));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public boolean onLongClick(View", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "        return HttpResponseRedirect(reverse('home'))\n\n    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                ra, dec, mag = applyRecalibrate(platepar, x_mean, y_mean, test_px_sum, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(options)\n    \n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    \n    # Apply priors to likelihood surface\n    posterior = _apply_priors(data, options, likelihood, grid)\n    \n    # Compute posterior using numerical integration\n    metrics", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          }\n        else if (MatchState.matchType == 2) {\n          Board.this.rollDices();\n          Board.this.sendChatMessage(\"roll\");\n        } else if (MatchState.matchType == 3) {\n          Board.this.rollDices();\n          Board.this.sendChat", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [('a', '/a'), ('b1', '/a/b1'), ('c1', '/a/b1/c1'), ('c2', '/a/b1/c2'), ('b2', '/a/b2'), ('b3', '/a", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(self.rule, with_child=True)\n        self.runner.add(RejectStatusCode(range(400, 410), range(500, 700)), with_child=True)\n        self.runner.add(RejectStatusCode(range(400, 410), range", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */\n    Relative parseRelative(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.sendRequest(req);\n            if (resp == null) {\n                System.out.println(\"Signature request failed.\");\n                return;\n            }\n            \n            // 5. Create ASiC file\n            this.createASiCFile(resp, dataToSignBytes);\n        } catch", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Brush:\n\t\t\treturn get_icon(\"", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate List<PlayerOverview> playerOverview;\n\tprivate TeamLeaders leaders;\n\tprivate TeamScheduleResponse scheduleResponse;\n\tprivate TeamRosterResponse rosterResponse;\n\tprivate TeamSummaryResponse summaryResponse;\n\tprivate TeamLeadersResponse leadersResponse;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\tthis.teamSummary =", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(userFeedback, packageInfo, deviceInfo);\n        FeedbackUseCase feedbackUseCase = new FeedbackUseCase();\n        feedbackUseCase.sendFeedback(feedback, new Function1<ErrorObject, Unit>() {\n            @", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index[obj] = key\n\n        items = {table_name: [key] for table_name, keys in table_index.items()}\n        loaded_items = self.session.load_items(items)\n\n        for obj, key in object_index.items():\n            table_name = get", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "            print(draw_art(fingerprint))\n            print('Fingerprint: {0}'.format(fingerprint))\n            print('Description: {0}'.format(description))\n            print('Created at: {0}'.format(created_at))\n        else:\n            print('Fingerprint: {0}'.format(fingerprint))\n            print('Description", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nNext line of code:\nadmin.site.register(Progress", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padr√£o.\n        :rtype: satcfe.resposta", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://example.com/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://example.com/')\n        document = ElementTree.parse(io.StringIO(xml_test))\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                case START_DATE_DESC:Next line of code:\n                case DURATION_ASC:Next line of code:\n                case DURATION_DESC:Next line of code:\n                    Arrays.sort(sorted, new ItemDurationComparator(itemSortOrder == ItemSortOrder.DURATION_DESC));\n                    break;\n                default:\n                    break;\n            }\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "        except Exception as e:\n            with open(dirty_path, \"w\"):\n                pass\n        finally:\n            if os.path.exists(dirty_path):\n                self.logger.error(f\"Error encountered in training: {e}\")\n                self.dirty = True\n            else:\n                self.logger.info(f\"Training for {self", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.stateController = stateController;\n        this.httpClient =", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Tasks tasks;\n\n    public SpringDirectorClient(URI root) {\n        this.restTemplate = new RestTemplate();\n        this.info = new SpringInfo(this.restTemplate, root);\n        this.releases", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\n\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\n\n    public ChatMessage getChatMessage(int index)\n    {\n        return _", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand get", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onChatReceived(ChatReceivedEvent event) {\n        if (event.channels.contains(this.channel)) {\n            this.channel.setStatus(event.text == null? null : event.text.getUnformattedText().isEmpty()? null : ChannelStatus.UNREAD);\n        }\n    }\n\n    @Subscribe\n    public void onChatReceived", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Sad = BlackFormula2.price_Sad_Automatic(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n        };\n\n\n    /**\n     * The plugin this module loader is associated with\n     */\n    private AthenaGM plugin;\n\n\n    /**\n     * Create a new ModuleLoader for the given plugin\n     * @param plugin the plugin this module loader is associated with\n     */\n    public ModuleLoader(Athen", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize number of thread pool.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"packager\");\n    config.set(\"packager.version\", \"0.1.0\");\n    config.set(\"packager.mainClass\", \"com.github.forax.pro.plugin.packager.Main\");\n  }\n\n  @Override\n  public", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        Element querySetConfigElement = getFirstTagOccurrence(element, QUERY_SET_CONFIG_TAG);\n        if (querySetConfigElement!= null) {\n            NodeList querySetNodes = query", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['realrunid'] = ret['realrunid']\n                        S['realsubmittime'] = ret['realsubmittime']\n                        S['originProb'] = ret['originProb']\n                        S['language'] = ret['language']\n                        S['runtime'] = ret['runtime']\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "        def test_simple_op(self):\n            \"\"\"Test simple operations.\"\"\"\n            for op in simple_op:\n                for x in self._simple_inputs:\n                    for y in self._simple_inputs:\n                        if op.condition(x, y):\n                            self.assertEqual(op.eval(x, y), op.eval(y, x))\n\n        def test", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).setType(ICC_PROFILE).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew SOSSegment(aJPEG", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl!= null) {\n                try (SqlSession session = sqlSessionFactory.openSession()) {\n                    LastschriftenMapper mapper = session.getMapper(LastschriftenMapper.class);\n                    List<DataLastschriftMandat> rows = mapper.getRowsForSammellastschrift(sl);\n\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"Generate Job arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\"\"\"\n        return [\n            GeneratePronunciationsArguments(\n                os.path.join(self.working", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        Lore lore = LoreLoader.getLore(key);\n\n        if (lore!= null) {\n            LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n            if (!properties.hasLore(key))\n                properties.addLore(key);\n\n            PacketSyncLore.updateLore((EntityPlayerMP) entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\nNext line of code:\n    private static final DateTimeFormatter MONTH_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM\");\nNext line of code:\n    private static final DateTimeFormatter YEAR_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy\");\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\t/**\n\t * Get the Util instance\n\t * @return the Util instance\n\t */\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\t/**\n\t * Get the logger\n\t * @return the logger\n\t */\n\tpublic static Logger getLogger()", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    ch_found = problem.solve(initial_weight, solver_name, search_mode, check, return_generator=False, verbose_level=verbose_level, filename=filename)\n\n    if ch_found is not None:\n        if verbose_level >= 1:\n            smart_print", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return { 'www': [ H.h1, H.h2 ], 'queue': H.h3, 'db': H.h4, 'backup': H.h5 }\n\n    def test_init(self):\n        \"\"\" Test initialization. \"\"\"\n        hosts = self.get_hosts()\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        return command.startswith(\"tc \") and command.endswith(\" change\") and not command.endswith(\" tcdel\")\n\n        return [line for line in self.__tc_command_output.splitlines() if tc_command_filter(line)]\n\n    def get_tc_command_output(self):\n        return self.__tc_command_output\n\n    def get_ipt", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    private List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthDayFormatter;\n\n    private OnDayChangeListener onDateChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n    private DisplayEventCallback<Calendar> displayEventCallback;\n\n    private CalendarPrepareCallback calendarPrepareCallback;\n\n    private MonthCalendarHelper monthCalendarHelper;\n\n    private ScrollManager scrollManager;\n\n    public", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "audiolazy/lazy_stream.py\nclass Stream(meta(Iterable, metaclass=StreamMeta)):\n  __ignored_classes__ = tuple()\n\n  def __init__(self, *dargs):\n    if len(dargs) == 0:\n      raise TypeError(\"Missing argument(s)\")\n\n    elif len(dargs) ==", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "        except TypeCheckError:\n            if (\n                backref and is_from_arg(backref) and\n                isinstance(t1.__instance__, RecordMeta) and\n                isinstance(t2, RecordMeta) and\n                t1.__instance__.__items__!= t2.__items__\n            ):\n                t1.__instance", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.blink = Blink(\n            login_data={\"username\": \"username\", \"password\": \"password\"},\n            no_prompt=True,\n        )\n        self.blink.startup()\n        self.blink.refresh()\n        self.blink.update_cameras()\n        self.blink.refresh()\n        self.blink.update_cameras()\n", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Field):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, SketchView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, PartView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self._log.error('Failed to serialize message: %s' % ex)\n      return\n\n    data_len = buf.tell()\n    header = self._BuildHeader(0, headers[TransportHeaders.MessageType], data_len)\n    payload = header + buf.getvalue()\n    self._send_queue.put((payload,", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = disposer.get(ThreadDumpRuntime.class);\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().get(0).getName(), equalTo(\"remotely-observed-thread\"));\n        assertThat(runtime.getThreads().get(0).getThreadStatus(), equalTo(Thread", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        return new DrumStoreEntry<>(data, DrumOperation.UPDATE, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"ËßÜÈ¢ë: \" + result.getItems().size() + \" ‰∏™\");\n            }\n        });\n    }\n\n}\nmedialoader/src/main/java", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder().withLocale(\"pt_BR\").build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getTranslator());\n    }\n\n    private static class MockedMultiBusinessException extends MultiBusinessException", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n    self._ping_ar = AsyncResult()\n\n  def _OnTimeout(self, tag):\n    \"\"\"Handles a timeout for a message that was sent to the server.\n\n    Args:\n      tag - The tag of the message", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "audiolazy/lazy_misc.py\ndef almost_eq(a, b, bits=32, tol=1, ignore_type=True, pad=0.):\n  \"\"\"\n  Almost equal, based on the amount of floating point significand bits.\n\n  Alternative to \"a == b\" for float numbers and iterables with", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self._cache = GlobalConfigCache(self.dbi, self.bot).get_all_config()\n        self.by_guild = ChannelMetadata.by_channel\n\n    @commands.command(name=\"config\", aliases=[\"c\"])\n    @group(category=\"Configuration\", examples=[\"config\", \"config city\", \"config timezone\"])\n    async def", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    else:\n        return operator.__getattribute__(operator, self.symbol)(*operands)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        TextView welcomeName = (TextView) header.findViewById(R.id.personalize_welcome_name);\n        TextView welcomeSurname = (TextView) header.findViewById(R.id.personalize_welcome_surname);\n        TextView welcomeClientNumber = (TextView) header.findViewById(R.id.personalize_welcome_client_number);\n        TextView welcomeTag", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            InviteToChatFragment inviteToChatFragment = (InviteToChatFragment) classToNotify.newInstance();\r\n            InviteToChatFragment.InviteToChatParam param = new InviteToChatFragment.ChatRegisteredParam(success, newChatId);\r\n            inviteToChatFragment.notifyFragment(param);\r\n        } else {\r\n            Toaster.getInstance", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"APP\", response.getTradeType());\n        Assert.assertNotNull(response.getPrepayId());\n        Assert.assertNotNull(response.getCodeUrl());\n    }\n\n    /**\n     * ‰ºÅ‰∏ö‰ªòÊ¨æ\n     */\n", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapperEnum messageMapperEnum = new MockedMessageMapper(KEY, ERROR);\n        List<Object> values = new ArrayList<>();\n        values.add(RANDOM_STRING_PARAMETER_VALUE_01);\n        values.add(RANDOM_STRING_PARAMETER_VALUE_02);\n        ParameterFinderStrategy parameterFinderStrategy = new MessageMapperEnumParameterFinder(messageMapper", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readSmallIntValue(int d1) {\n\t\treturn d1 & 0x7F;\n    }\nNext line of code:\n    public int readSmallIntValue(int d1) {\n\t\treturn d1 & 0x7F;\n    }\nNext line of code:\n    public int read", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quotas(self)\n\n        # self.management = management.Management(self)\n        # self.quota = quota.Quotas(self)\n\n        # self.management = management.Management(self)\n        # self.quota = quota.Quotas(self)\n\n        # self.management = management", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError as e:\n                logger.debug(f\"failed to parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        } else {\r\n        m.videoFrameRate = Main.DEFAULT_VIDEO_FRAME_RATE;\r\n        }\r\n\n        // set video width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0) {\r\n        m.width = Integer.parseInt(m.video", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "        self._probe = probe\n        # Load the spike detection parameters.\n        self._kwargs = Bunch(**kwargs)\n        # Load the spike detection parameters.\n        self._kwargs = Bunch(**kwargs)\n        # Load the spike detection parameters.\n        self._kwargs = Bunch(**kwargs)\n        # Load", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<Channel> connect(final TransportContext context, final ChannelHandler handler, final boolean reconnect) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"Handler must not be null\");\n       ", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "        self._cdg = ControlDependence(self.dominators)\n    return self._cdg\n\n  @property\n  def entry_block(self):\n    return self._entry_block\n\n  @property\n  def exit_block(self):\n    return self._exit_block\n\n  @property\n  def entry_block", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        FragmentObservable<QRCodeFragment, QRData> observable = ObservableRegistry.getObservable(QRCodeFragment.class);\n        observable.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<QRCodeFragment, QRData> observable = ObservableRegistry.getObservable(QR", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.isNegative()) {\n      result.append(\"NOT \");\n    }\n    result.append(\"IN(\");\n    visit(column);\n    result.append(\")\");\n    final Object[] values = inExp", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddiFile = new File(basePath + \"/ddi.xml\");\n\t\t\tFile xformsFile = new File(basePath + \"/xforms.xml\");\n\t\t\tString ddiContent = FileUtils.readFileToString(ddiFile, \"UTF-8\");\n\t\t\tString xformsContent = FileUtils.readFileToString(xformsFile, \"", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        draws = self.draw(1000, exact_match=True)\n        self.assertTrue(np.allclose(draws, np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    private", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final FixTag tag, final boolean value) throws InvalidValueException {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity!= null &&!validity.isValid(value)) {\n\t\t\tthrow new InvalidValueException(tag, value);\n\t\t}\n\t\tvalidities.put(tag, Validity", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e \\u0936\\u093f\\u0936\\u0941\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e \\u0936\\u093f\\u0936\\u0941\", language", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN_STRING", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if there are still bits to map, map them as padding\n        if rem:\n            self.append(Bit(self.rest_name, BitLen=rem))\n        # clean temporary data\n        del self.BUF, self._buflen, self._consumed, self._offset, self._map_exit\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Create tables for all non-abstract subclasses\n        for subclass in walk_subclasses(model, exclude=BaseModel):\n            if subclass.Meta.abstract:\n                continue\n            if not skip_table_setup:\n                self.create_table(sub", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padr√£o.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(VectorModel)\n\n    assert \"VectorModel\" in str(exc)\n\n    assert \"is not a subclass of BaseModel\" in str(exc)\n\n    assert \"VectorModel\" in str(exc)\n\n    assert \"is not a subclass of BaseModel\" in str(exc)\n\n    assert", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "        desc, command_grp, inputs, exp_response, mock_files, condition, verbose=False):\n        # pylint: disable=line-too-long, no-self-use\n        \"\"\"\n        Test method to execute test on pywbemcli by calling the executable\n        pywbemcli for the command defined by command with arguments defined", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        for (Module module : modules) {\n            if (module.isEnabled()) {\n                module.initializeConfig();\n                module.initialize(this, logger);\n            }\n        }\n        // Load commands\n        CommandLoader", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available.\n\n        :type: int\n        \"\"\"\n        return self._call_fmod(\"", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditActivity(DomainObject item, ExternalController validator, int titleResId, int okButtonResId, int cancelButtonResId) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, titleResId, item, validator, okButtonResId, cancelButtonResId));\n                    }\n\n                    @Override\n", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")Next line of code:\n\tCall<ImgurResponseWrapper<List<String", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    def dynamo_load(self, values, *, context, **kwargs):\n        if values is None:\n            return list()\n        # noinspection PyProtectedMember\n        load = self.inner_typedef._load\n        return [\n            load(value, context=context, **kwargs)\n            for value in values]\n\n    def", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            return false;\r\n        }\r\n        if (result.getResult() == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\t\r\n\tprivate void update() {\r\n        try {\r\n            Updater updater = new Updater();\r\n            UpdateInfo updateInfo = updater.checkForUpdates();\r\n            if", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "        if request.method == 'POST':\n            form = CommentForm(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.user = request.user\n                comment.post = post\n                comment.save()\n                messages.success(request, 'Comment has been submitted.')\n                return redirect(reverse('p", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to use in gif searching.\n     * Clicking on these terms can perform searches with the term itselft as the query\n     *\n     * @param serviceIds a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n            of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> connectionResultsListener.onConnectWithScanResult(null));\n            of(mConnectionWpsListener).ifPresent(wpsListener -> wpsListener.isSuccessful(false));\n            switch (connectionErrorCode) {\n", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "class SegmentVadArguments(NamedTuple):\n    vad_path: str\n    segmentation_options: MetaDict\n\n    def __str__(self) -> str:\n        return f\"VAD: {self.vad_path}, Segmentation: {self.segmentation_options}\"\n\n    def __repr__(self) -> str:\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Jobs jobs;\n    private final Vms vms;\n    private final Deployments deployments;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n       ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available in this sound.\n\n        :type: int\n        \"\"\"\n        num_tags = c_uint()\n        self._", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section.start_bit,\n                section.end_bit\n            )\n            nbits_encoded += bufr_message.length.nbits\n\n        # Wire the template data if requested\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bit_writer.get_bits()\n\n    def process_section(self, bufr_message, bit", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            abuse_report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=form.cleaned_data['comments'],\n            )\n\n            messages.success(request, _('Your report has been received.", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final Class<?> clazz = meth.getMethodToBench().getDeclaringClass();\n        final ClassResult clazzResult = ((BenchmarkResult) getRelatedResult()).getElements().get(clazz);\n        final MethodResult method", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Parsing application arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args, factory.getApplicationOptions());\n        ApplicationOptions options = factory.getApplicationOptions();\n        options.fillIn(parser);\n\n        // Checking if the user wants to run a framework comparison\n        if (options.isSet(ProtTestArgument", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.startRecording(URL(\"http://example.com/recordings\"), BEEP(true));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"record\"), Do.say(\"Please state your name.\"));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"record\"), Do.say(\"Please", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "        listaDeRespostas.getPropriedades().getEstado() == EstadoDaListaDeRespostas.FINALIZADA) {\n            listaDeRespostas.getPropriedades().setEstado(EstadoDaListaDeRespostas.CORRIGIDA);\n        }\n        \n        if (resposta", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().getJson());\n\t\t\t}\n\t\t});\n        \n        adapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n        mViewPager.setAdapter(adapter);\n        mViewPager.setOnPageChangeListener", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    AdInterface adServerInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Inject\n    StateFactory factory;\n\n    @Before\n    public void setUp() throws Exception {\n\n        DaggerFsmComonent", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while handling the close request\", e);\n\t\t}\n\t\t\n\t\tMainWindow mainWindow = new MainWindow(client, stage, appEvent, Configuration.INSTANCE) ;\n\t\tmainWindow.show() ;\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String adapterName = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec adapter = TypeSpec.classBuilder(adapterName)\n       .addSuperinterface(ParameterizedTypeName.get(Binding.class, injectableType(type)))\n       .addModifiers(PUBLIC)\n       .addMethod(createGetMethod(constructor, fields))\n       ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\rNext line of code:\n        }\rNext line of code:\n       \rNext line of code:\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n        new EnableReceiveNormalMsgApi().enableReceiveNormalMsg", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif isinstance(item, TypedAttribute):\n        return f'{elem.tag}[{context.position}]/@{item.attribute.name}'\nNext line of code:\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "gtable/table.py\ndef __init__(self, data={}):\n    # This list stores the keys\n    self.keys = []\n    # This list stores the columns\n    self.data = []\n    # This is the index bitmap\n    self.index = None\n    length_last = 0\n\n    # Creating", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n            {\n                SmartReplyMessage m = (SmartReplyMessage)message;\n\n                m.ack();\n\n                if (m.getSelection", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(time_var)\n\n\t\tEXOG.append(column_product(dmy_mediator, time_var))\n\n\t\tEXOG.append(dmy_covariates)\n\n\t\tEXOG = np.array(EXOG)\n\n\t\t", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"Thread-0\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(thread.getLock(), equalTo(ThreadLock.fromInstance(thread)));\n        assertThat(thread.getMonitor().getDepth(), equalTo(0));\n        assertThat(thread.getMonitor().getLock(), equalTo(ThreadLock.from", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this, 2000, 2050);\n                picker.setOnDatePickListener(new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(String date) {\n                        mTimeText.setText(date);\n                        mRecord.setRecordTime(new LunarCalendar(date));\n                   ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n\n    private XpNavBarSetting mXpNavBarSetting;\n\n    private SPUtil mSpUtil;\n\n    private Context mContext;\n\n    private List<ShortCut> mShort", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.tracerouter.enqueue(\"www.eff.org\")\n        self.tracerouter.enqueue(\"www.google.com\")\n        self.tracerouter.enqueue(\"www.yahoo.com\")\n        self.tracerouter.enqueue(\"www.bing.com\")\n        self.tracerouter", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        return RestfulModelCollection(Webhook, self)\n\n    def create_outbox(self, message_ids, send_at=None, retry_limit_datetime=None):\n        \"\"\"\n        Create an outbox job to send a message\n\n        Args:\n            message_ids (list[str]): The IDs of the messages to send\n            send_at", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    (NightModeable) this) {\n      @Override\n      public void setNightMode(boolean nightMode) {\n        DynamicStarMapActivity.this.nightMode = nightMode;\n      }\n    };\n    activityLightLevelManager = new ActivityLightLightLevelManager(activityLightLevelChanger);\n\n    // Set up the", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        lnlike = multi_phase_error + eq_thermochemical_prob +", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('IMSI', Pt=ID(1), Len=8, ReprName='IMSI', Trans=False),\r\n            Str('IMSI', Pt=ID(1), Len=8, ReprName='IMSI', Trans=False),\r\n            Str('IMSI', Pt=ID(1),", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(device, self.__tc_command_output)\n\n    def __parse_tc(self, device):\n        self.__parse_tc_qdisc(device)\n        self.__parse_tc_filter(device)\n        self.__parse_tc_class(device)\n\n    def __parse_tc_command_output(self):\n        self.__", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    @validation_error(RequestValidationError)\n    def validate_request(request, validator_map, **kwargs):\n        \"\"\"Validate the request against the swagger spec and return a dict with\n        all parameter values available in the request, casted to the expected\n        python type.\n\n        :param request: a :class:`Pyramid", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
