{"pred": "    private final transient JKademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Used to store the state of the DHT */\n    private final File stateFile;\n\n    /* Used to store the state of the Routing Table */\n    private final File routingTableFile;\n\n    /* Used to store", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mEffects.add(new KernelBlurEffect());\n        mEffects.add(new KernelEdgeDetectEffect());\n        mEffects.add(new KernelEmbossEffect());\n        mEffects.add(new KernelGaussBlurEffect());\n        mEffects.add(new KernelSharpenEffect());\n        mEffects.add(new SobelEffect());\n        mEffects.add(new", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y])\n\n\nNext line of code:\nclass MyCipher(Cipher):", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private StackEffect mStackEffect;\n    private WatermarkEffect mWatermarkEffect;\n    private InterlaceEffect mInterlaceEffect;\n    private ImmersiveEffect mImmersiveEffect;\n    private List<Parameter> mParameters;\n    private List", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.add(event);\n        this.eventCallbacks.putIfAbsent(event, new Consumer<Boolean>() {\n            @Override\n            public void accept", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务元数据信息管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    public TaskRunnerContainer(Task", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.vault(), passphrase, args.checkFileIntegrity());\n\t\t\tproblems.forEach(problem -> print(problem.name() + \": \" + problem.severity() + \"\\n\" + problem.solution().map(Solution::description).orElse(\"notSolvable\") + \"\\n\"));\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getGeneratedPrivateKey(), rsa.getGeneratedPublicKey());\n            //save device id to storage\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            //save device id to external storage\n            DebugManager.INSTANCE.storeDeviceId(deviceId);\n            //save push id to", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_AUTHENTICATE, SESSION_ID);\nNext line of code:\n    assertEquals(new U2fSignRequest(SERVER_CHALLENGE_SIGN, APP_ID_AUTHENTICATE, SESSION_ID), signRequest);\nNext line of", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.cld, self.cGUID, self.remote_ip, self.source, self.caller_name, self.username, self.cld, self.cld, self.cld, self.cld, self.cld, self.cld,", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "        from..packets import SignatureV4\n        from..packets import SignatureV3\n        from..packets import SignatureV2\n        from..packets import SignatureV1\n        from..packets import SignatureV4\n        from..packets import SignatureV3\n        from..pack", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            return\n\n          if cstr_node.binary:\n            cstr_node.lhs = convert_ast_constraint(children[0])\n            cstr_node.rhs = convert_ast_constraint(children[1])\n            process_children(cstr_node.lhs, children[0])\n            process_children(cstr_node.rhs, children[1])\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.isTablet() && activity.hasUsername();\n    }\n\n    private static void playVideoIntern(TDActivity", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        PostLocationDataBody data = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude, AppSettings.sFindPeopleMessage, AppSettings.sUserEmail, AppSettings.sUserName, AppSettings.sUserAvatarUrl);\n        ForkMeBackendApi service = new Retrofit.Builder()\n               .baseUrl(BaseUrls.f", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self.assertTrue(InterLayerPipeline(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class BaseModel:\n        class Meta(IMeta):\n        def __new__(cls, *args, **kwargs):\n            global init_called\n            init_called = True\n            return super().__new__(cls, *args, **kwargs)\n\n        def __init__(self, *args, **kwargs):\n            pass\n\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    if isinstance(result, XPathNode):\n        yield result\nNext line of code:\n    elif isinstance(result, tuple):\n        yield TypedElement(result[0], result[1], result[2])\nNext line of code:\n    else:\n        raise self.error('XPTY0004', 'invalid result type {!r", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECT(\"Color Effect\",\n            Arrays.asList(\n                    new EmbossTransformation(),\n                    new Kale", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        wild.set_message(wild_report)\n        await wild.insert()\n        await ctx.send(f\"Reported wild {pokemon.label} at {location.location} by {ctx.message.author.mention}.\")\n\n        await ctx.send(f\"Reported wild {pokemon.label} at {location.location} by {ctx.message.author.", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(vocab=vocab, **c['data'])\n    # Load model\n    if c['model'] =='simple':\n        model = NLISimple(**c['model_params'])\n    elif c['model'] == 'esim':\n        model = ESIM(**c['model_params", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n  assert doppler.c == 2", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n\n;\n            } else if (raffle.isValid() &&!isMan) {\n\n                Participant participant =", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "        assert self.redlock.locked() >= self.redlock.auto_release_time\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key)\n        assert not self.redlock.locked()\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @threed_cone_settings.setter\n    def threed_cone_settings(self, settings):\n        \"\"\"Set the inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :param ConeSettings settings: Cone settings.\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "        return self._calg\n\n    @calg.setter\n    def calg(self, value):\n        self._calg = value\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(bytes)\nNext line of code:\n        return self._data\n\n    @", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity = findCellIntensity(img, centers, findCellIntensityParameter = findCellIntensityParameter, verbose = verbose, out = out, **parameter);\n        \n        #", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File transactionLogDir) {\r\n        return transactionLogDir.exists() && transactionLogDir.isDirectory", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                }\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute a query and return the result as a JSON array.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n     * @return\n     * @throws java.lang.Exception", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    usage_encryption=UsageEncryption.OSY,\n                    operation_mode=OperationMode.CBC,\n                    encryption_algorithm=EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_value=b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] == 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_NAMED_GROUP) {\n            if (env.numNamed > 0) {\n                if (", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^get-workflow-steps$', get_workflow_steps, name=\"ajax-get-workflow-steps\"),\n    url(r'^get-pipeline-job-template$', get_pipeline_job_template, name=\"ajax-get-pipeline-job-template\"),\n    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tResourceData (Meter meter, Resources res)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\t\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors = new EnumMap<SRSLevel, Integer> (SRSLevel.class);\n\t\t\t\n\t\t\ttags", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n\n    def get_storage_type(self):\n        return self._storage_type\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_protocol(self):\n        return self._orientSocket.protocol\n\n    def set_protocol(self, protocol):\n       ", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedSupplier<$Argument2> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return new GivenTwoArgumentsWhenSteps<>(preparation);\n    }\n\n    @Override\n    public", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    try {\n      CommandResult result = process.await();\n      if (expectedExitCodes.length == 0) {\n        expectedExitCodes = new Integer[] {0};\n      }\n      for (Integer expectedExitCode : expectedExitCodes) {\n        if (result.exitCode() == expectedExitCode) {\n          return", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(options.getString(Keys.TEXT_COLOR, \"#000000\"));\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\t\tfontStyle = Typeface.NORMAL;\n\t\tif (options.getBoolean(Keys.BOLD_TEXT, false)) {\n\t\t\tfontStyle = Typeface.BOLD;\n\t\t}\n\t}\n\t\n\tprivate", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tlog.info(\"weixin >>> \" + message);\n\t\tAbstractEvent event = message.asEvent();\n\t\tlog.info(\"weixin >>> \" + event);\n\t\tif (event instanceof SubscribeEvent) {\n\t\t\tSubscribeEvent subscribeEvent = (SubscribeEvent", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    app_info = get_app_info(file_path)\n    app_info['file_md5'] = genMD5(file_path)\n    app_info['file_name'] = os.path.basename(file_path)\n    app_info['file_path'] = file_path\n    app_info['file_size'] = os.path.getsize(file_path", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid report.\n\n        \"\"\"\n\n        city =''.join(city)\n        await ctx.guild_profile(key='city', value=city)\n        await Embeds.message(ctx.channel,", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11))\n        self.assertEqual(date_string_to_date(\"09/02/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', os.path.dirname(config_file))\n        config_actor.start()\n        gevent.sleep(1)\n\n        # start database actor\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # start hone", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0], picture.getText_content());\n                            break;\n                   ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\t\tsavemgh_v2(positive_data[:,j], position_array, \"pFWER_%s_con%d.mgh\" % (opts.tmifile[0],j+1), affine_array[0])\n\t\t\t\t\t\tfor k in range(num_contrasts):\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.SurveyPromptLoaderFragment.class,\n                SurveyActivity.SurveyPromptLoader.SurveyPromptLoaderFragment.SurveyPromptFragment.class,\n                SurveyActivity.SurveyPromptLoader.SurveyPromptLoaderFragment.SurveyPrompt", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDHCipherText,\n                PubKeyAlgorithm.ElG: ElGCipherText}\n\n        if self._pubalg in sigs:\n            self._sigcls = sigs[self._pubalg]\n\n   ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "        elif self.xsd_types is not None:\n            # XSD typed selection\n            for item in context.iter_self():\n                if context.item is not None and context.is_principal_node_kind():\n                    if isinstance(item, (TypedAttribute, TypedElement)):\n                        yield item\n                    else:\n                        context.item = self.get", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._downed = []\n    self._heap_lock =", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol('foo', protocol)\n        protocol.send_string.assert_called_once_with('foo')\n\n    def test_send(self):\n        \"\"\"\n        Ensures that the message is translated into a dictionary and passed\n        into the protocol object in the expected way.\n        \"\"\"\n        nc = NetstringConnector(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"select * from table1\", se.getQuery());\n        assertTrue(\"is prepared\", qe instanceof PreparedExecution);\n        PreparedExecution pe = (PreparedExecution) qe;\n        assertEquals(\"select * from table1\", pe.getQuery());\n       ", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se1 = new StatementExecution();\n        StatementExecution se2 = new StatementExecution();\n        StatementExecution se3 =", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                continue\n            \n            # Create the ADR request\n            log.info(\"Sending ADR Request to %s\", device.deveui)\n            request = self._createLinkADRRequest(device)\n            \n            # Send the request\n            yield self._sendMACCommand(request)\n            \n            # Update the last ADR request", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        succeeded, failed = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable<Chat, ChatSettingsInfo> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<Chat, ChatSettingsInfo> obs = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\nfints/formals.py\nclass ParameterTwostepCommon(DataElementGroup):\n    \"\"\"Parameter für zwei-Schritt-TAN\n\n    Source: FinTS Financial Transaction Services, Schnittstellenspezifikation, Sicherheitsver", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time_data = self.img_handle.time_data\n\n        else:\n\n            # Get time from config\n            time_data = self.config.time_data\n\n        # Convert time to Julian date\n        jd = datetime2JD(time_data[0], UT_corr=self.config.UT_corr)\n\n        # Add reference time to JSON file", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        if (null == mPublicRoomsListList) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        }\n\n        if (null == mHomeServerNames) {\n            mHomeServerNames = new ArrayList<String>();\n        }\n\n        mHomeServerNames.clear();\n        mPublicRoomsListList", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache(self.dbi, self.bot)\n        self.guild_metadata = GuildMetadata(self.bot, self.bot", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n    #running assembly graph refinement\n    if args.assembly_refine:\n        logger.info(\"Running assembly graph refinement\")\n        asref.run_assembly_refine(raw_bp_graphs, run_stages, args.assembly_ref", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        protectionFinder.shutdown", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);\n                    stopGcmPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {Next line of", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty = false;Next line of code:\n    public boolean dirty", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanelAll(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, true);\n        GCStatsChartPanel panel =\n                new MetricChartPanel", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                Namespace namespace = client.getNamespace();\n                namespace.onEvent(client, packet.getName(), packet.getData(), new AckRequest(packet, client));\n            } else if (packet.getSubType() ==", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        VideoSource lVS = factory.createVideoSource(appRtcClient.videoConstraints());\n        VideoTrack lVT = lMS.addTrack(lVS);\n        lVT.setEnabled(true);\n        VideoRendererGui renderer = VideoRendererGui.createGui(0, 0, 1, 1);\n        lVT.addRenderer", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_TRANSIENT, false);\n            contentValues.put(JobStorage.COLUMN_EXACT, true);\n            contentValues.put(JobStorage.COLUMN_NETWORK_TYPE, -1);\n            contentValues.put", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "def init_persistent_system(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there's no snapshot files\")\n\n    # if obj is a class, change obj to an", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        docker_config.add_environment_variables(\n            {\n                \"CLICK_HOME\": self.config.home,\n                \"CLICK_DEVICE_HOME\": self.device_home,\n                \"CLICK_DEVICE_HOME_USER\": self.config.user,\n                \"CLICK_DEVICE_HOME_USER_ID\": str(self.config.user_id),\n                \"CLICK_DEVICE_HOME_USER_GROUP\": self.config.user", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final String[] SectionNames = { \"社区管理\", \"国内院校\", \"休闲娱乐\", \"五湖四海\", \"游戏运动\", \"社会信息\", \"知性感性\", \"文化人文\", \"学术科学\", \"电脑技术\", \"终止版面\" };\n   ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        if (mListener!= null) {\n            mListener.onSearchFragmentInteraction();\n        }\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_search_contact, container, false);\n\n        searchSpinner = (Spinner) view.findViewById", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\r        annoGenerated = null;\r\n\rNext line of code:\n\r        ICompilationUnit cu = createCompilationUnit(model, monitor);\r\n\rNext line of code:\n\r        if (writeTML) {\r\n\r            writeTML(cu, model, monitor);\r\n\r        }\r\n\rNext line of code:\n\r", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        simulator_data = fdm_pb2.SimulatorData()\n        simulator_data.time = 0.0\n        simulator_data.gps.latitude = 37.9232547\n        simulator_data.gps.longitude = 23.921773\n        simulator_data.gps.altitude = 300.0\n        simulator", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {Next line of code:\n            showResponse = false;\n        }\n        if (httpMessage.getReq().hasRequest()) {Next line of code:\n            isRequestEditor = true;\n        } else {Next line of code:\n            isRequestEditor = false;\n       ", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n    assert simple_table_status(description) == expected_status\nNext line of code:\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._header = ID3Header(fileobj)\n        self._header = ID3Header(fileobj)\n        self._header = ID3Header(fileobj)\n        self._header = ID3Header(fileobj)\n        self._header = ID3Header(fileobj)\n        self._header = ID3Header(file", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\rNext line of code:\n    return null;\rNext line of code:\n    }\rNext line of code:\n    visitProxOp(new VisitOrd3(n), query);\rNext line of code:\n    return null;", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new DiffusionTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MaskTransformation(0xffffff", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "pyorient/exceptions.py\nclass PyOrientConnectionException(PyOrientException):\n    pass\npyorient/exceptions.py\nclass PyOrientConnectionPoolException(PyOrientException):\n    pass\npyorient/exceptions.py\nclass PyOrientWrongProtocolVersionException(PyOrientException):\n    pass\npy", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t/**\n\t * Returns the list of tags for", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\nNext line of code:\n    user.email = \"user@domain.com\"\n    user_key = {\"id\": {\"S\": \"foo\"}, \"email\": {\"S\": \"user@domain.com\"}}\nNext line of code:\n    assert dump_key(engine, user", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource, String... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\tpublic static FormFor formFor(Object resource) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\tpublic static A a(Url url) {\n\t\treturn new", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        event = Event(e)\n        events.append(event)\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list_providers(self, params=None):\n        data = self.call_api", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        } else if (id == R.id.menu_save) {\rNext line of code:\n        } else if (id == R.id.menu_select_all) {\rNext line of code:\n        } else if (id == R.id.menu_send) {\rNext line of code:\n        } else if (id", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.ANDNOT, Occur.MUST_NOT);\r\n    opTo", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # Compute the number of frames in the video\n        self.n_frames = int(self.vid.seqlen/self.vid.ht/self.vid.wid)\n\n        # Compute the number of frames in the current frame chunk\n        self.fr_chunk", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=0.89, laser_wavelength=0", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void processInWorldThread(Side side, EntityPlayer sidedPlayer)\n\t{\n\t\tif (side == Side.CLIENT)\n\t\t{\n\t\t\tFoodHistory.get(sidedPlayer).validate();\n\t\t}\n\t}\n\n\tpublic static", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        post.user = get_object_or_404(User, username=username)\n        post.slug = slug\n        post.save()\n        comments = Comment.objects.filter(post=post).filter(deleted=False).order_by('-net_votes')\n        paginator = Paginator(comments, 10)\n        page = request.GET.get('page')\n       ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// Single cell selection\n\t\t\t\t\t\tSingleCellSelection selection = new SingleCellSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tselectionChanged(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells.size() > 1) {Next line of code:\n\t\t\t\t\t\t// Multi cell selection\n\t\t\t\t\t\tMultiCellSelection selection", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "        self._keyclass = [val]\n\n    @keyclass.register(bytearray)\n    def keyclass_bytearray(self, val):\n        self.keyclass = [val]\n\n    @sdproperty\n    def algorithm(self):\n        return self._algorithm\n\n    @algorithm.register(list)\n    def algorithm_list(self, val", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=0, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    I.params['barnes_dist'] = 1.75\n    I.params['barnes_clip_size'] = 3\n    I.params['barnes_pts'] = (20,10)\n    I.params['barnes_poly'] = (1,1,1)\n    I.params", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            manager = mp.Manager()\n            return_queue = manager.Queue()\n            info = manager.dict()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = CompileInformationArguments(args)\n                p = KaldiProcessWorker(i, return_queue, function, info,", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Update the reference RA/Dec from the apparent alt/az\n    platepar.updateRefRADec(skip_rot_update=True, preserve_rotation=True)\n\n    # Update the reference apparent alt/", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 10_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);Next line of code:\n        contentValues.put", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();Next line of code:\n        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['year', 'fiscal_year', 'value','remarks', 'area', 'component']\nfrom django.contrib import admin\nfrom.models import (Plan, Goal, Theme, Sector, Target, Indicator, Component,\n                     Progress, Area, AreaType)\nfrom.forms import (", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.collapse();\n        }\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, ActivityComponentHelper componentHelper) {\n        SearchManager searchManager = (SearchManager) getContext().getSystemService(Context.SEARCH_SERVICE);\n        SearchView searchView = (SearchView) menu.findItem(R.id.search).get", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "            @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.handleError(cause);\n            }\n        }).then(new Accept<Void>() {\n            @Override\n            protected void doAccept(final Void value) throws Exception {\n                LOGGER.debug(\"Reconnected transport\");\n\n                context.setConnectionState(new ConnectedConnectionState", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/encryption/PasswordEncryption.java\npublic class PasswordEncryption {\n\n    private static final String SALT = \"Y45M3\";\n    private User user;\n\n    public Password", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial;Next line of code:\n    private final Router<Road, RoadPoint> router;Next line of code:\n    private final Cost<Road> cost;Next line of code:\n    private final Cost<Road> bound;Next line of code:\n    private final double max;Next", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;Next line of code:\n    private HashMap<String, List<FilterType>> filterMap;Next line of code:\n    private List<FilterUrl> filterUrls;Next line of code:\n    private List<FilterUrl> filterUrls1;Next line of code:\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        lines.draw_colored_triangles(tris, fills)\n        self.svg.n_tris += len(tris)", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t}\n\t\t\t\tif (DatabaseHelper.hasItem(contextRef.get(), a, null)) {\n\t\t\t\t\tapps.add(a);\n\t\t\t\t\tneedSave = true;\n\t\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.arccos(np.dot(self.beg_vect, self.end_vect))\n        self.end_alt = np.arccos(np.dot(self.end_vect, self.beg_vect))\n\n        # Compute the normal vector\n        self.normal = np.cross(self.beg_vect, self.end_vect)\n\n       ", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor reaches a {@link com.bazaarvoice.jless.ast.node.ScopeNode}.\n     * @return Determines whether the scope's children will be visited.\n     */\n    boolean enter(ScopeNode scope);\n\n    /**\n     * Called when the visitor reaches a {@link com.bazaarvoice.j", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.Proxy.class);\n        bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.Proxy.class);\n        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class);\n        bind(GerritRestApi.class", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r\n                    if (snapZxid >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n               ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        return [e for e in entries if txn_matches(e.transaction, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.transaction.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        ('CallName', 'ReprName', 'Pt', 'PtFunc', 'Val', 'Len', 'LenFunc', 'Type', 'Repr', 'Trans', 'TransFunc'),\n        ('Segment', '', None, None, None, None, None,'stream', 'hum', False,", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Api.api().searchPlaces(query);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(PlaceSearchResult::getPlaceName)\n\t\t\t\t.map(SearchSuggestion::new)\n\t\t\t\t.compose(bindToLifecycle())\n\t\t\t\t.subscribe(searchSuggestionsAdaper::add);\n\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    state = states.State(POS, rad, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n    \ndef apply_or(left: Column, right):\n    if type(right) == Column:\n       ", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                Request request = RequestFragment.sSelectedRequests.get(i);\r\n                stringBuilder.append(\"\\n\\n\").append(request.getName()).append(\"\\n\").append(request.getPackageName());\r\n                if (request.getIcon()!= null) {\r\n                    stringBuilder.append(\"\\n\").append(request.getIcon());\r\n                }\r\n                if (request.getTheme()!= null)", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration)) and not isinstance(instance, bool)\n        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration)) and not isinstance(instance, bool)\n        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "        return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\nNext line of code:\n        return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\nNext line of code:\n        return RubricsPage()\n        if pageletId == 'Rub", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"filename\")):\n                    errmsg += \"Data file for pattern %s does not exist.\\n\" % pattern.get(\"name\")\n                    rvalue = False\n            elif mode == \"Calculate\":\n                if not checkFileExistence(pattern.get(\"filename\")):\n                    errmsg +=", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\nNext line of code:\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/input/ddi.xml\");\n\t\tFile outputFile = new File(basePathDDI2FO + \"/output/form.fo\");\n\t\t\n\t\tg", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        user.setPw(\"password\");Next line of code:\n                        user.setName(\"Test\");Next line of code:\n                        user.setId(1);Next line of code:\n                        new ChangePasswordTask(user).execute(\"1\");Next line of code:\n                    }\r\n                });\r\n\n        // \"Cancel\" button to cancel", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', login_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"settings-packages-new\"),\n    url(r'^edit/(?P<slug>[\\w-]+)$', login_required(UpdatePackageView", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[constants.TextgridFormats.SHORT_TEXTGRID][0][1]\nNext line of code:\n    return tgAsDict[constants.TextgridFormats.SHORT_TEXTGRID][0][1]\nNext line of code:\n    return tgAsDict[constants.TextgridFormats.SHORT_TEXTGRID][0", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_feats, unvoiced = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                    except", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot(self", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    boolean isSet(FixTag tag);\n    Validity isValid(FixTag tag);\n    int get(FixTag tag);\n    int get(FixTag tag, int defaultValue);\n    long get(FixTag tag);\n    long get(FixTag tag, long defaultValue);\n    double get(FixTag tag);\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "klusta/traces/detect.py\nclass Thresholder(object):\n    \"\"\"Threshold traces to detect spikes.\n\n    Parameters\n    ----------\n\n    mode : str\n        `'positive'`, `'negative'`, or `'both'`.\n    thresholds : dict\n        A `{str: float}` mapping for multiple thresholds (", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\tresult.addExplanation(new AnyMatchExplanation(anyQueryNode.getField()));\n\t\t\treturn result;\n\t\t}\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator = new ValidatorImpl();\n\t}\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));Next line of code:\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));Next line of code:\n        registry.put((byte) (", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String id = LogDB.getNewId(lang);\n                        String hash = LogDB.getNewId(lang);\n                        FileSaver fs = new FileSaver(content, lang, tweet.getUser().getName(), url, id, hash);\n                        String filename = fs.save(logDb);\n                        if (filename!= null) {\n", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.nbits))\n\n        else:\n            raise PyBufrKitError('Unknown descriptor type: {}'.format(type(descriptor)))\n\n        return lines", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency_distro", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return Contact.objects.get(phone_number=self.phone_number)\n\n    def get_messages(self):\n        return Message.objects.filter(contact=self.get_contact())\n\n    def get_last_message(self):\n        return self.get_messages().order_by('-created_at').first", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    PCollection<GCPProject> liveProjects = pipeline.apply(\"Read live projects\",\n        Read.from(new LiveProjectSource(org)));\n\n    // Tag the state objects to indicate they're from the live state and not known-good.\n    PCollection<KV<GCPResource, KV<StateSource, GCPResourceState>>> tagged", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n        self.kb = Pipeline()\n        self.kb.soft_404_responses = {}\n        self.rule.set_kb(self.kb)\n        self.rule.set_engine(self.engine)\n        self.engine = Engine()\n        self.engine.mock = MagicMock()\n        self.engine.mock.perform_high_priority = make", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition(condition_for(\"and\", column), condition_for(\"and\", column)))\n    if \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"or\", column), condition_for(\"or\", column)))\n    if \"not\" in operations:\n        conditions.append(NotCondition(condition_for", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(0, 3) == 1\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IJavaProject testProjectBase;\n\n    private final IJavaProject baseProjectTest;\n\n    private final IJavaProject testProjectTest;\n\n    private final IJavaProject baseProjectTestBase;\n\n    private final IJava", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "        self._varz = self.Varz(\n        self._varz = self.Varz(\n        self._varz = self.Varz(\n        self._varz = self.Varz(\n        self._varz = self.Varz(\n        self._varz = self.Varz(\n        self._var", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugImages = false;\nNext line of code:\n\tprivate boolean debugImages = false;\nNext line of code:\n\tprivate boolean debugImages = false;\nNext line of code:\n\tprivate boolean debugImages = false;\nNext line of code:\n\tprivate boolean debugImages = false;\nNext line of code:\n\tprivate boolean debugImages", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    -> Files.walk(input).filter(path -> pathFilenameEndsWith(path, \".java\")).collect(Collectors.toList()));\n    var javadocProcess = javadocTool.run(cmdLine, files);\n    var exitCode = javadocProcess.exitValue();\n    if (exitCode!= 0) {\n      log.error", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def configurar_interface_de_rede(self, ip, mascara, gateway, dns1, dns2):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.configurar_interface_de_rede`.\n\n", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write()\n\n    if gopts.time:\n      start = time.time()\n\n    cmd = self.commands[name]()\n    if gopts.time:\n      end =", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(Prefs prefs) {\n        return new PersistentData(prefs);\n    }\n\n    @Provides @Singleton\n    ImageSaver provideImageSaver(Ion ion", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds, totalQueryCount(5));\n    }\n\n    private QueryExecution getMockSelectQueryExecution() {\n        StatementExecution se = new StatementExecution();\n        se.setQuery(\"select * from table\");\n        return se;\n    }\n\n    private QueryExecution getMockInsertQueryExecution() {\n        StatementExecution se =", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifiers.put(validSchemaVerifier.getPrettyName(), new VerifierBackground(validSchema", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_login_failed, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    public void onPostLoginFailed() {\n        showProgress(false);\n        Toast.makeText(getActivity(), R.string.error_login_failed, Toast.LENGTH_LONG).show();\n    }\n\n    public void onPost", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(lexMessage(text, self.chum), self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.text", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\nNext line of code:\n            (r'/logout', LogOutHandler),\nNext line of code:\n            (r'/register', RegisterHandler),\nNext line of code:\n            (r'/problem/(.*)/(.*)', ProblemHandler),\nNext line of code:\n            (", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown information criterion: \" + criterion);\n        }\n\n        return informationCriterion.compute();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, t.And(ty1, ty2))\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection for Sigma types\n    \"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)\ndef snd(expr):\n    \"\"\"Second projection for Sigma types\n    \"\"\"\n", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(AnalyticsTracker analyticsTracker);Next line of code:\n    void inject(AudioBookManager audioBookManager);Next line of code:\n    void inject(DemoSamplesInstaller demoSamplesInstaller);Next line of code:\n    void inject(PlaybackService playbackService);Next line of code:\n    void inject(Demo", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<Expense> expenses;\n    private List<ExpenseCategory> expenseCategories;\n    private List<SliceValue> values;\n    private List<CreditPeriod> creditPeriods;\n    private CreditCard creditCard;\n    private CreditPeriod creditPeriod;\n    private BigDecimal creditLimit;\n    private BigDecimal totalExpenses", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    from pyramid_swagger.exceptions import ResponseValidationError\n    from pyramid_swagger.tween import prepare_body\n    from pyramid_swagger.tween import validate_response\n    from pyramid_swagger.tween import validation_error\n    from pyramid_swagger.tween import should_exclude_path\n    from pyramid_swagger.tween import should", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterNewStructureNodeCommand(NewStructureNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\nNext line of code:\n\t@Override\n\tpublic void enterNewSpanNodeCommand(NewSpanNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\nNext", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n                self.return_dict[\"error_files\"].append(traceback.format_exc())\nNext", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n        fdmexec.GetPropagate().SetLatitudeDeg(37.9232547)\n        fdmexec.GetPropagate", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_HELP_HELP_LINE,\n    'Filter the returned classes to return only leaf classes.',\n    'Filter the returned classes to return only leaf classes.',\n    'Filter the returned classes to return only leaf classes.',\n    'Filter the returned classes to return only leaf classes.',\n    'Filter the returned classes to return only", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n\t\tUsers user = (Users) SecurityUtils.getSubject().getPrincipal();\n\t\tmv.addObject(\"user\", user);\n\t\treturn mv;\n\t}\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(\"AWS SDK client exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"AWS Logs invalid operation exception: \" +", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=\"JOIN\")\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                       person_name=u'\\u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected Location currentLocation;\n  protected boolean lowBattery = false;\n  protected boolean mobileData = false;\n  protected int prefetchCount = 0;\n  protected boolean inBackground = true;\n  protected boolean backgroundAllowed = true;\n  protected boolean newCheckin", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        refresh_avd(adb, DYNAMIC_TOOL_DIR, 'default', 'default', 'emulator-5554')\n        avd_load_wait(adb)\n    else:\n        # adb, avd_path, reference_name, dup_name, emulator\nNext line of code:\n        refresh_vm(SETTINGS.VM", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class Header(Layer):\n    constructorList = [\n        Int('Protocol Discriminator', Pt=5, Type='uint8', Repr='hex'),\n        Int('Transaction Identifier', Pt=0, Type='uint16', Repr='hex'),\n        Int('Message Type', Pt=0, Type='uint", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh, faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh, faces_rh)\n\t\t\tadjacency = adjacency_lh + adjacency_rh\n\t\t\tadjacency = np.array(adjacency)\n\t\t\tadj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" IS NULL\");\r\n    } else if (exp.getRhsValue() instanceof Constant) {\r\n      if (Constant.NULL.equals(exp.getRhsValue())) {\r\n        result.append(\" IS NULL\");\r\n      } else if (Constant.STAR.equals(exp.getRhsValue())) {\r\n        result.append(\" *\");\r\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LIST, list);\n        sessionContext.setData(CACHE_LISTS, cacheService.getAllCacheLists());\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "        Int(0, 1, 'TI', TI_dict),\r\n        Int(0, 1, 'T', TI_dict),\r\n        Int(0, 1, 'V', TI_dict),\r\n        Str(0, 1, 'RR', StrRR),\r\n        Str(0, 1,", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                new TimeEntryOvertimeAggregation()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStrategy(new TimeEntryOvertimeAggregation());\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(\"Overtime\");\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(\"Overtime\");\n\n        timeEntriesTable", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "        self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux_ad_chan1(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.MUX_AD_CHAN1)\n\n    @property\n    def", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n        self.references = {}\n        for i in range(count):\n            key = read_u32le(f)\n            ref = read_u16le(f)\n            self.references[key] = ref\n\n        s.close()\n\n    def write_index(self):\n        index_name = self", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join Connect')\n            template = 'accounts/emails/invitation.html'\n            recipient = user.email\n            sender = site.config.email\n            url = reverse('accounts:activate', kwargs={'uidb", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        await Utilities.message(ctx.channel, f\"Beep Beep! **{ctx.message.author.display_name}**, This feature is under-development!\")\n\n        raid_dict = ctx.bot.guild_dict[ctx.guild.id]['raidchannel_dict'][ctx.channel.id]\n\n        channel_mentions = ctx.message.raw_channel_mentions\n\n        if len(channel", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('bcceth')\n        elif name == \"%s_BCH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('bchbtc')\n       ", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            self.add_xsd_type(item)\n            yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestIteratorNormal(100, 10);\n    helpTestIteratorParanoid(100, 10);\n    helpTestIteratorCount(100, 10);\n  }\n  \n  @Test\n  public void testSolutions() {\n    helpTestSolutions(100, 10);\n  }\n  \n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setQueryNodeExpanderFactory(QueryNodeExpanderFactory.ADVANCED);\n\t\tresult.setDefaultQueryNodeExpanderFactory(FacetSubQueryType", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.init(this, mi_APP_ID, mi_APP_KEY);\n                    MiPushClient.setPushCostTime(1000);\n                    MiPushClient.registerPush(this);\n                    deviceMiToken = MiPushClient.getRegId(this);\n                    //stopGcmPush();\n                    //Log.e(MYTAG, \"", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = table_format\n\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign,\n                                   show_header=show_header))\n    if status:\n        output.append(status)\n    return '\\n'.join(output)\n\n\ndef format_error(error):\n    msg = str(error)\n    if not hasattr", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api(wordnik_api, token)\n    @app.route('/api/dictionary/wordnik')\n    def dictionary_api_route():\n        return wordnik_api\n\n    @app.route('/api/subtitle/opensubtitles')\n    def subtitle_api_route():\n        return subtitle_api\n\n    @app.route('/api", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\n\tpublic TaskListByJQLActivity() {\n\t\tsuper();\n\t}\n\n\tpublic TaskListByJQLActivity(Context ctx) {\n\t\tsuper();\n\t\tthis.ctx = ctx;\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.addCleanup(CloseHandle, handle)\n        self.assertEqual(handle, 0)\n        self.addCleanup(CloseHandle, handle)\n        self.addCleanup(CloseHandle, handle)\n        self.addCleanup(CloseHandle, handle)\n        self.addCleanup(CloseHandle, handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return parserHolder.getParser().parse(annotation, roundEnv, originatingElements);\n                })\n               .collect(Collectors.toList());\n        Swagger swagger = specificationGeneratorFactory.build(fileManagerFactory).generate(parsedPaths, roundDescriptor);\n        codeGeneratorFactory.build(fileManagerFactory).generate(swagger);\n    }\n\n    private static class ParserHolder", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected BinaryDataHandler binaryDataHandler;\n\n    protected CountDownLatch latch;\n\n    protected AtomicInteger handledPageCount = new AtomicInteger(0);\n\n    protected AtomicReference<Exception> exception = new AtomicReference<>();\n\n    protected AtomicLong handledPageCount = new AtomicLong(0);\n\n    protected Atomic", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton forgetChannel;\n    private GuiButton selectChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n    private GuiButton forgetChannel;\n    private GuiButton noneChannel;\n    private GuiButton selectChannel;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorWebModulesPageTitle);\r\n        form.setFormText(Messages.configurationEditorWebModulesSection);\r\n        form.getBody().setLayout(new GridLayout(1,false));\r\n        ExpandableComposite expandable = toolkit.createExpandableComposite(form.getBody(), SWT.NONE);\r\n        expandable.setText(Messages.configurationEditorWebModulesDescription);\r\n       ", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = ObjectInteger()\n        type.item.name = \"bar\"\n\n        self.assertEqual(\"42\", type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        type = Type()\n        type.name = \"foo\"\n\n        self.assertEqual((\"foo", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "        new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type +'is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def get_cluster_type(self):\n        return self._cluster", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "        account = account_for_flickr_id(nsid, person=person)\n        if request.user.is_anonymous():\n            person = account.person\n            if person.user is None:\n                # AGH\n                random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n               ", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(RejectedExecutionException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth RejectedExecutionException while inserting message\", e);\n\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        cond_stack_size -= get_stack_effect(bytecode[k][0], bytecode[k][3])\n      except Exception:\n        logger.error(\"Error computing stack effect for %s\", bytecode[k])\n        return\n      k -= 1\n    condition = self.__parse_condition(condition_bytecode)\n    self._conds[node]", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyPayments = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategory = new ArrayList<>();\n    List<DailyExpense> dailyPaymentsByCategory = new ArrayList<>();\n    List<ExpenseCategory> expenseCategories = new", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple(all_platform_slugs)\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'locale_alias', 'locale_script', 'lang_status')\n    list", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "import android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.content", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "pingparsing/_parser.py\nclass WindowsPingParser(PingParser):\n    @property\n    def _parser_name(self) -> str:\n        return \"Windows\"\n\n    @property\n    def _icmp_reply_pattern(self) -> str:\n        return (\n            \" from \"\n            + self._DEST_PATTERN\n           ", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        } else {\rNext line of code:\n            latestMessageOnDisplay = new AtomicLong(chat.getLastMessage().getId());\r\n        }\rNext line of code:\n        if (savedInstanceState!= null) {\rNext line of code:\n            latestMessageOnDisplay = (AtomicLong) savedInstanceState.get(RESTORE_L", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic int selectedTile;\n\t\tpublic int selectedTile2;\n\t\tpublic int selectedTile3;\n\t\tpublic int selectedTile4;\n\t\tpublic int selectedTile5;\n\t\tpublic int selectedTile6;\n\t\tpublic int selectedTile7;\n\t\tpublic int selectedTile8;\n\t\tpublic int selectedTile9;\n\t\tpublic", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, isBatchCallable());\n        assertThat(qe", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT)!= null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent > 0) {\n        statusWidget.setStatus(IUploadStatus.Status.INPROGRESS);\n        statusWidget.setPercent(percent);\n      }\n   ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points = merge_assembly_points(assembly_points_by_sources=assembly_points_by_sources)\n    merged_assembly_points_by_ids = assign_ids_to_assembly_points(assembly_points=merged_assembly_points, id_prefix=\"m_\",\n                                                                  id_generator=id_generator, sort=True)\n    merged_assembly_graph", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, channel_dict):\n\n        embed = ChannelConfigEmbed.from_channel_metadata(ctx, channel_dict", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\t\t\tlong id = (long) objects[0];\n\n\t\t\t\t\t\t\t\tMenuScreen target = menu.getCurrentMenu().getNavTarget();\n\t\t\t\t\t\t\t\tif (target", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Caption format provuder for the weekly view */Next line of code:\n    private boolean itemCaptionAsHtml;\n\n    /** Caption format provuder for the weekly view */Next line of code:\n    private boolean format24H;\n\n    /** Caption format provuder for the weekly", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<List<ReleaseSummary>> listReleases() {\n        return releases.list();\n    }\n\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    VerifierProvider rsaLocatorFromRuby = new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    privateKey = KeyFactory.getInstance(\"RSA\").generatePrivate(new PKCS8Encoded", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // Expected\n                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t\t\n\t\t\tfor(int i=0; i < 10; ++i) \t\t\t\n\t\t\t\tassertTrue(client.deleteObject(containerName, names[i]));\n\t\t\tassertTrue(client.deleteContainer", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    TrackHistoryEntry entry = new TrackHistoryEntry();\n                    entry.title = liveInfo.getTitle();\n                    entry.endTime = currentTime;\n                    entry.trackId = liveInfo.getTrackId();\n                    entry.trackName = liveInfo.getTrackName();\n                    entry.trackArtist = liveInfo.getTrackArtist();\n                    entry.trackAlbum = live", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    @Bean\n    YarrnSpiceService spiceManager;\n\n    @Bean\n    YarrnPrefs_ prefs;\n\n    @NonConfigurationInstance\n    private DrawerLayout drawerLayout;\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayoutView;\n\n    @ViewById(R.id.navigation_drawer)\n    ListView", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                        Intent intent = new Intent(mContext, IconPreviewFragment.class);\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_ICON, home.getIcon());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_TITLE, home.getTitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_SUBTITLE, home.getSubtitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_STYLE", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    )\n\n    max_workers = ctx.obj", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        raise BadRequest('Item not valid for this playlist')\n\n    def getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        return self.getPlaylistItemID(item)\n\n    def getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(TypeError, _environment_to_string, {42: 42})\n\n    def test_empty_environment(self):\n        self.assertEqual(_environment_to_string({}), u\"\\0\\0\")\n\n    def test", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if not isinstance(cmd, GitcAvailableCommand) and not repo_client.isGitcClient:\n      print(\"fatal: '%s' requires GITC to be available\" % name,\n            file=sys.stderr)\n      return 1\n\n    if not isinstance(cmd, GitcClientCommand) and repo_client.isGit", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                // 设置结束时间\n                taskData.setFinishDate(new Date());\n                // 设置结束状态\n                taskData.setState(TaskData.STATE_SUCCESS);\n                // 设置结束状态\n                taskData.setState(TaskData.STATE_SUCCESS);\n                // 设置结束状态\n                taskData.setState(TaskData.STATE_SUCCESS);\n                // 设置结束", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        await r.after_headers(Entry.create(\"http://example.com/\"))\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.reject_set, set())\n        self.assertEqual(r.exception_class, RejectRequest)\n        self.assertEqual(r.reject_set, set())\n        self.assertEqual(r.exception_class, RejectRequest)\n       ", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的密码\n        stuPassword = password;\n        //用户的年级\n        stuGrade = \"2016\";\n        //用户的学院\n        stuCollege = \"计算机学院\";\n        //用户的专业\n        stuMajor = \"软件工程\";\n        //用户的年级\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\nNext line of code:\n        self.__device = device\n        self.__ifb_device = self.parse_incoming_device(tc_command_output)\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__is_parse_filter_id", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_living_properties(self, state: Dict[str, Any], obj: Living) -> None:\n        self.add_basic_properties(state, obj)\n        state[\"race\"] = obj.r", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator, boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t\tthis.valor", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        if (dataDecoder.equals(\"UnicodeDecoder\")) {\r\n            decoder = new UnicodeDecoder();\r\n        } else {\r\n            throw new IllegalArgumentException(\"Decoder \" + dataDecoder + \" not supported\");\r\n        }\rNext line of code:\n        DataDirHelper helper = new DataDirHelper(new File(dataDir), new File(dataLog", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        except UncertainTimeError:\n            log.error(\"We couldn't figure out how accurate your clock is.  Sorry, Switzerland won't work!\")\n            sys.exit(1)\n        except:\n            log.error(\"Weird but possibly non-fatal error:\\n%s\" % traceback.format_exc())\n            sys.exit(", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test a more complex query\n        String movieTitle = \"The Shawshank Redemption\";\n        String movieOverview = \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\";\n        String moviePosterPath = \"http://image.tm", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, with_root=False)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, with_root=False)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, with_root=False)), [self.elem])\n", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tmapView = (MapView) findViewById(R.id.map_view);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t\tmapView.setTraffic(true);\r\n\t\tmapView.setMultiTouchControls(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        ConfigCommandProcessor(\n            ConfigVlanCommandProcessor,\n            ConfigVRFCommandProcessor,\n            ConfigInterfaceCommandProcessor\n        )\n    )\n\n    def get_http_resource(self):\n        return \"http://www.cisco.com/c/en/us/products/collateral/switches/2960-series-switches/product_data_sheet", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n       ", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    sample_conditions = [dict(zip(sample_condition_dict.keys(), sample_condition_dict.values())) for sample_condition_dict in sample_condition_dicts]\n    sample_values = calculate_dict['values'].reshape(-1, len(sample_conditions))\n    sample", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"\n        word_counts = Counter()\n        for u in self.utter", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\npackage io.hummer.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setRootVisible(false);\n        tree.setShowsRootHandles(true);\n        tree.setCellRenderer(new DefaultTreeCellRenderer() {\n            @Override\n            public Component getTree", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// <h1 class=\"title\">todos</h1>\n\t\t// <input class=\"new-todo\" placeholder=\"What needs to be done?\" autofocus>\n\t\tFluent header = H1(\"title\", \"todos\").Input(\"new-todo\", \"What needs to be done?\", \"", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                imageTaken = null;\n                RESULT_CODE = 1;\n                hidePreview(false);\n                findViewById(R.id.camera_view).setVisibility(View.GONE);\n                findViewById(R.id.crop_view_layout).setVisibility(View.VISIBLE);\n                cropView = (CropImageView) findViewById(R.id.cropView);\n                cropView.setOnGetCroppedImageCompleteListener", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        setHasOptionsMenu(true);\n\n        if (savedInstanceState!= null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW_TOOLBAR);\n            mShowFastScroller = savedInstanceState.getBoolean", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\nNext line of code:\n    return\nNext line of code:\n    def validate_key_condition(model, index, key):\n    # Model will always be provided, but Index has priority\n    query_on = index or model.Meta\n\n    # (model or index).hash", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,Next line of code:\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n        dataset.datasetChanged();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,Next line of code:\n            int id,Next line of code:\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        for path, resource in self.resources.items():\n            self.api.add_resource(resource, path)\n        self.api.add_resource(RestSystem, '/system')\n        self.api.add_resource(RestDevice, '/device/<int:deveui>')\n        self", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._df_manager = DataFrameModelManager()\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._df_manager = DataFrameModelManager()\n        self._settings_ini = settings_ini", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *            The week that was clicked\n         */Next line of", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passw):\n        self._pass = passw\n        return self\n\n    def set_client_id(self, client_id):\n       ", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            break;\n        }\n\n        case NOOP: {\n            client.getBaseClient().schedulePingTimeout();\n            break;\n        }\n\n        case CONNECT: {\n            client.onConnect();\n            break;\n        }\n\n        case DISCONNECT: {\n            client.onDisconnect();\n            break;\n        }\n\n        case EVENT: {\n            String", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerator generator = setGenerator(pipeline.getOutFormat());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\tgenerationService.setParameters(pipeline.getParameters());\n\t\tgenerationService", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    BoundedSource<GCPProject> projectsSource = new LiveProjectSource(org);\n    PCollection<GCPProject> projects = pipeline.apply(\"Read projects\", Read.from(projectsSource));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> live", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "        expiry = Column(Timestamp)\n        name = Column(String)\n        email = Column(String)\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n        by_expiry = LocalSecondaryIndex(range_key=\"expiry\", projection=[\"name\"])\n    return MyModel\n\n\ndef test_model_init(model):\n    \"\"\"", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                          dim, vocab, lookup,\n                                                          translate=True, normalize=True)\n            else:\n                raise NotImplementedError()\n\n            children.append(self._def_reader)\n\n        self._combiner = MeanPoolCombiner(emb_dim,", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isSmartReplyEnabled;\n    // Guarded by _lockObject.\n    private boolean _isSmartReplyEnabledForUser;\n    //", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int videoQuality;\n    private String videoPath;\n    private String videoName;\n    private String videoType;\n    private String videoPathForShare;\n    private String videoNameForShare;\n    private String videoTypeForShare;\n    private String videoPathForSave;\n    private String videoNameForSave;\n", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "        form = UserFormEdicion(instance=self.object)\n        formset = PerfilFormSet(instance=self.object)\n        return self.render_to_response(self.get_context_data(form=form, formset=formset))\n    def post(self, request, *args, **kwargs):\n        if not self.kwargs.get(\"pk\", None", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t// Handle the LOCK\n\t\tint nbLocked = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tboolean isLocked = false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.handle = HDF5Factory.openForReading(filename);\n\t\t\t\tcheckLoomFormat();\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\napp/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieReviews/di/MovieReviewsFragment.java\npublic", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tview.addException(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark and getting the results.\n\t *\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t */\n\tpublic void", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    sync_stats_manager = SyncStatsManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    yml", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Not suitable endpoint found for the given city and endpoint type.\", Error.NOT_SUITABLE_ENDPOINT_FOUND,\n\t\t\t\t\t\tnull);\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n    else:\n      self._cstr = self.__process(root)\n\n  def __process(self, node):\n    if node.data[0] == COMPARE_OP:\n      return Comparator.fromOpcode(node.data[0], node.data[1])\n    elif node.data[0]", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tJoinResult result = JoinResult.SUCCESS;\n\t\ttry {\n\t\t\tif (this.isSpectating()) {\n\t\t\t\tresult = JoinResult.ROUND_PLAYING;\n\t\t\t}\n\t\t\telse if (this.getRound()!= null) {\n\t\t\t\tresult = JoinResult.ROUND_PLAYING;\n\t\t\t}\n\t\t\telse if", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = decimal_to_string(value, fmt_token)\n\n    if fmt_modifier:\n        result = format_digits(result, fmt_modifier)\n\n    return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string?', '", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc.get_drawings():\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties = {\"c\": ObjectString()}\n        object2.properties = {\"c\": ObjectString()}\n        object3.properties = {\"c\": ObjectString()}\n        object1.pattern_properties = {\"d\": ObjectString()}\n        object2.pattern_properties = {\"d\": ObjectString()}\n        object3.pattern_properties = {\"", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] dataBytes = buildRawData(clientConfig, dataSource, count);\nNext line of code:\n          byte[] preambleBytes = buildRawPreamble(clientConfig, dataBytes);\nNext line of code:\n          byte[] invPmapBytes = buildRawInvPmap(clientConfig, dataBytes);\nNext line of", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\nNext line of code:\n  value_error(AFO)\nNext line of code:\n  to_map_and_back(DFO, DopplerPoly(0, 0,", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "        allOf(hasJsonPath(\"/hits.total\", is(100)), hasJsonPath(\"/hits.hits[0]._source.identifier\", containsString(\"dab-records-csw.xml\")), hasJsonPath(\"/hits.hits[0]._source.type\", equalTo(\"record\"))));\n    }\n\n    @Test\n    public void store", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "        self._pubalg = PubKeyAlgorithm(val)\n        if self._pubalg in [PubKeyAlgorithm.RSAEncryptOrSign, PubKeyAlgorithm.RSAEncrypt, PubKeyAlgorithm.RSASign]:\n            self.signature = RSASignature()\n\n        elif self._pubalg == PubKeyAlgorithm.DSA", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\t// Registra el escritor de GeoJSON\n\t\tGeoJSONWriter writer = new GeoJSONWriter();\n\t\twriter.setServiceManager(serviceManager);\n\t\twriter.setCacheDir(CACHE_DIR);\n\t\twriter.setCacheListener(cache", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = Authorization.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(Global.InvokeKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException | IOException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<pk>", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            startActivity(new Intent(getActivity(), StatsActivity.class));\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack!= null) {\n            if (stack.getNumberOfCards() < 4) {\n               ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private static final String FILE_PREFIX=\"keephealth_\";\n    //OKhttp对象实例\n    private OkHttpClient client;\n    private static OkhttpManager okhttpManager;\n    private Handler handler;\n\n    private static OkhttpManager getInstance(){\n        if(okhttpManager==null){\n            okhttpManager=new OkhttpManager();\n       ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.updateBlockShape();\n        obj.updateBlockLabels();\n        obj.updateBlockSockets();\n        obj.updateBlockTags();\n        obj.updateBlockLinks();\n        obj.updateBlockComment();\n        obj.updateBlockCollapseLabel();\n        obj.updateBlockImageIcons();\n        obj.updateBlockNameLabel();\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = RXDA([RXDiff(d1), RXDiff(d2)])\n        i, j = self._find_preimage(f, RXDiff(d3))\n        assert i == 0x00 and j == 0x00\n\n        f = RXDA([RXDiff(d1), RXDiff(d2", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiConstant(MultiConstantNode node, List<Set<Character>> newCharacterOptions, List<Set<Character>> newCharacterChecks);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, this);\n\t\tpm.registerEvents(blockListener, this);\n\t\t\n\t\t// Load the gates\n\t\tGate.load();\n\t\t\n\t\t//", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        connection.saslMechanism.processChallenge(new Challenge(challengeData));\n        resetParser();\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.saslMechanism.processSuccess(new Success(doc));\n        resetParser();\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition =", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher\nLea32 = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal8 = FealCipher\nTea = TeaCipher\nXtea = XteaCipher\nChaskey = Ch", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;Next line of code:\n    private SongListAdapter mAdapter;Next line of code:\n    private boolean mShowToolbar;Next line of code:\n    private boolean mShowFastScroller;Next line of code:\n    private int mSortOrder;Next line of code:\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            mParameterListView.setVisibility(View.GONE);\n            mParameterToggleMenuItem.setVisible(false);\n        } else {\n            mParameterListView.setVisibility(View.VISIBLE);\n            mParameterToggleMenuItem.setVisible(true);\n        }\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n        mParameterListAdapter.setEffect(mSelectedEffect);\n        m", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=8, Dict=ESMCause_dict,\n            Repr='hum'),\n        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=8, Dict=ESMCause", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            refresh();\n        }\n    };\n    private View mRootView;\n    private View mAlbumsView;\n    private View mSongsView;\n    private View mAlbumsHeader;\n    private View mSongsHeader;\n    private View mAlbumsHeaderSeparator;\n    private View mSongsHeaderSeparator;\n    private View", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "        self.log_info(\"Loading corpus from source files...\")\n        if self.use_mp:\n\n            self._load_corpus_from_source_mp()\n        else:\n\n            self._load_corpus_from_source()\n    def _load_corpus_from_source_mp(self) -> None:\n        \"\"\"\n        Load a corpus with multiprocessing\n\n        See Also\n       ", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"users\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listRemittUsers() {\n\t\treturn UserManagement.listUsers();\n\t}\n\n\t@GET\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"account/headers\")\n    Observable<HttpHeader> headers(@Query(Constants.KEY", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.optionName(), message.value());\n    }\n\n    public ImmutableMap<String, String", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, Hz=Hz), bandwidth, bits=32, tol=1)\n    assert almost_eq(erb(freq, Hz=Hz), bandwidth, bits=64, tol=1)\n    assert almost_eq(erb(freq, Hz=Hz), bandwidth, bits=80, tol=", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "        return Sequence(seq)\n        return Sequence(seq)\n    else:\n        # Read until the end of the sequence\n        while True:\n            dataset = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                                         encoding, offset)\n            if dataset is None:  # None is returned if hit", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      final List<CommentWrapper> comments = CommentUtil.getComments(document);\n      for (CommentWrapper comment : comments) {\n        for (ICommentProcessor commentProcessor : commentProcessors) {\n          if (commentProcessor instanceof ICommentProcessorWithParagraph) {\n", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(application, prefs, searchCriteria.values(), page, PAGE_SIZE);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity) getActivity", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def name(self):\n        return self._name\n\n    @name.register(str)\n    @name.register", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.addMessage(serverMsg, False)\n        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n       ", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "kinko/nodes.py\nclass Symbol(Node):\n\n    def __init__(self, name, **kw):\n        self.name = name\n        head, sep, tail = name.partition('/')\n        if sep:\n            self.ns, self.rel = head, tail\n        else:\n            self.ns, self.rel =", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    desired_data = get_prop_data(comps, phase_name, \"formation_energy\", datasets)\n    desired_data = filter_temperatures(desired_data)\n    desired_data = filter_configurations(desired_data, configuration, symmetry)\n    desired_data = get_prop_data(comps, phase_name, \"formation_energy\", desired", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n            return;\n        }\n\n       ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "        PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> suggest(@QueryMap Map<String, String> serviceIds, @Query(\"q\") String query);\n\n    @POST(\"anonid\")Next line of code:\n    Call<AnonIdResponse> getAnonId(@FieldMap Map<String, String> serviceIds);\n\n    @FormUrl", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n       ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        confusion_matrix_formatter = ConfusionMatrixFormatter(decimals=2, normalize=True)\n        print(confusion_matrix_formatter.format(confusion_matrix, data_set.label_map))\n\n        classes = [label for label in data_set.label_map]\n        self.plot_confusion_matrix(confusion_matrix, classes, normalize=True, title='Conf", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate ChallengeServices challengeServices;\n\t@ResourceNext line of code:\n\tprivate SubmissionServices submissionServices;\n\t@ResourceNext line of code:\n\tprivate CategoryServices categoryServices;\n\t@ResourceNext line of code:\n\tprivate CountryServices countryServices;\n\t@ResourceNext line of code:\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "        return Query(self, (first_entity,) + entities)\n\nNext line of code:\n        return Query(self, (first_entity,) + entities)\n\nNext line of code:\n        return Query(self, (first_entity,) + entities)\n\nNext line of code:\n        return Query(self, (first_entity,) + entities)\n\nNext", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def __init__(self,\n                 architecture: RNNArchitecture,\n                 inputs: tf.Tensor,\n                 initial_state: Optional[tf.Tensor],\n                 keep_prob: Optional[tf.Tensor],\n                 input_noise: Optional[tf.Tensor]):\n        super().__init__(architecture, inputs, initial_state, keep_prob)\n\n        self", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nNext line of code:\nall_platform_slugs.extend(ZANATA_SLUGS)\nNext line of code:\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nNext line of code:\nall_platform_slugs.extend(WEBLATE", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\t\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Class\", '=', Alignment.Left);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Runs\", '=', Alignment.Right);\n        table.addHeader(\"Mean\", '=', Alignment.Right);\n        table.addHeader(\"StdDev", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      visitor.visit(self._graph.in_edges(node))\n      edges = visitor.edges\n      if has_true_false_branches(edges):\n        return None\n      else:\n        return self._block_idx_map[get_cfg_tmp_values(node).pop()]\n\n    def get_parent_if(node):\n      class BwdEdges(EdgeVisitor):\n", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getNumberOfInternalNodes();\n\t\tthis.Tarray = new int", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    from zoneinfo import ZoneInfo\n    from urllib.request import urlopen  # optional because it consumes ~4.3 MiB\n    from urllib.error import URLError\n    from urllib.request import urlopen  # optional because it consumes ~4.3 MiB\n    from urllib.error import URLError\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                    else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room power levels.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content);\n                        updatePowerLevels(roomState.powerLevels);\n                    }\n                    else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI32ToDDI33Preprocessor();\n\t\n\t//", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveDetaille(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_choice.GetClientData(self.releves_choice.GetSelection())\n        Document", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(I), J_rot) + dot(crosstens(I), J_rot.T)\n        return H\n\n    def compute_angular_momentum_residual(self, p,", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult!= null) {\n            final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n            if (queuedProject!= null) {\n                final Pattern pattern = queuedProject.getPattern();\n                if (pattern!= null) {\n                    name.setText(pattern.getName());\n                    author.setText(pattern.get", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand());\n        // Register the currency registry\n        game.getServiceManager().setProvider(this, CurrencyRegistryModule.class, new CurrencyRegistryModule());\n        // Register the loan module\n        game.getServiceManager().setProvider(this, LoanModule.class, new LoanModule());\n        // Register the SQL module\n       ", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        prior_specs = build_prior_specs(prior, params)\n        _log.trace('Prior specs: %s', prior_specs)\n        return {k: p.get_prior(v) for k, p in zip(symbols, prior_specs)}\n\n    def _fit(self, symbols, datasets, prior=None, restart_trace=None", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\n  elif op == LOAD_NAME:\n    return Ref.fromName(arg)\n  elif op == LOAD_ATTR:\n    return Ref.fromName(arg)\n  elif op == LOAD_GLOBAL:\n    return Ref.fromName(arg)\n  elif op == LOAD_METHOD:\n    return Ref.fromName(arg)\n ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringe;\n\tprivate final Input input;\n\tprivate final Config config;\n\tprivate final PingPongEq<EntityState> state = new PingPongEq<EntityState>(null, null);\n\tprivate final PingPongEq<Input> inputState = new PingPongEq<Input>(null", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> fetch() {\n\t\tList<AuthorWithBooks> authors = new ArrayList<>();\n\t\tauthors.add(authorRepository.findAuthorWithBooks(1L));\n\t\tauthors.add(authorRepository.findAuthorWithBooks(2L));\n\t\treturn authors;\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\tForestReader reader = new ForestReader() {\n\t\t\t@Override\n\t\t\tpublic Object get(String variable) {\n\t\t\t\treturn in.get(variable);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int getByte(String variable)", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        is_activity = True\n        if is_activity:\n            run_app = package + \"/\" + launcher\n            print \"\\n[INFO] Launching APK Main Activity\"\n            subprocess.call([adb, \"-s\", get_identifier(),\n                             \"shell\", \"am\", \"start\", \"-n\", run_app])\n        else", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n    Risk parseRisks(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    foo_type =", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        // parameters\n        assertThat(pe, paramAsInteger(1, is(", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\tself._document = Document()\n\t\tself._document.add_change_handler(self.on_document_changed)\n\t\tself._document.add_status_handler(self.on_status)\n\t\tself._document.add_late_init_object(self._parameters)\n\t\tself._document.add_late_init_object(self._styles)\n\t\tself._document.add_late_init", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                } else {\n                    return new ApiException(cause);\n                }\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setRequestInterceptor(new Inter", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Integer.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Long.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Double.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Float.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE, false)) {\n\t\t\tlabelFactory = new LowerCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^(?P<slug>[\\w\\-\\+]+)/add$', AddPackageCIPipeline.as_view(), name=\"package-add-ci-pipeline\"),\n    url(r'^(?P<slug>[\\w\\-\\+]+)/hide$', hide_ci_pipeline, name=\"hide-ci-pipeline\"),\n   ", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        intent.putExtra(Extras.EXTRA_RESUMED, true);\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        LogUtil.e(Log.getStackTraceString(e));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public boolean onLongClick(View", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token.key, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                ra, dec, mag = applyRecalibrate(platepar, x_mean, y_mean, test_px_sum, use_flat=True)\n\n                # Compute the vignetting loss\n                vignetting_loss = 1 - platepar.vignetting_coeff\n\n                # Compute the extinction loss\n                extinction_loss = ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(options)\n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    # Apply priors to likelihood\n    posterior = _apply_priors(data, options, likelihood, grid)\n    # Compute posterior using numerical integration\n    metrics['posterior']", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          }\n        else if (MatchState.matchType == 2) {\n          Board.this.rollDices();\n          Board.this.commandDispatcher.send(\"roll\");\n        } else if (MatchState.matchType == 3) {\n          Board.this.rollDices();\n          Board.this.commandDispatcher", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        for path, node in etree_iter_paths(root):\n            self.assertEqual(path, node.tag)\n            self.assertEqual(node, root[2])\n            self.assertEqual(path, '/a/b3/c3[1]')\n            self.assertEqual(node, root[2][2])\n            self.assertEqual(path, '/a/b3/c3", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.rule.set_engine(self.engine)\n        self.rule.set_kb(self.runner)\n        self.rule.set_child_heuristics(self.runner)\n        self.rule.load_kb(self.runner)\n\n    def test_is_soft_404(self):\n        entry = Entry.create(\"http://example.com/test\", response=StaticResponse(200, {},", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.sendRequest(req);\n            if (resp == null) {\n                System.out.println(\"Signature request failed.\");\n                return;\n            }\n            \n            // 5. Create ASiC file\n            this.createASiCFile(resp, dataToSignBytes);\n        } catch", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Brush:\n\t\t\treturn get_icon(\"", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\tprivate List<Game> schedule;\n\tprivate TeamLeaders leaders;\n\tprivate TeamScheduleResponse scheduleResponse;\n\tprivate TeamRosterResponse rosterResponse;\n\tprivate TeamLeadersResponse leadersResponse;\n\tprivate TeamSummaryResponse summaryResponse;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\tthis.teamId", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(userFeedback, deviceInfo, packageInfo);\n        FeedbackUseCase feedbackUseCase = new FeedbackUseCase();\n        feedbackUseCase.sendFeedback(feedback, new Function1<ErrorObject, Unit>() {\n            @", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index[key] = obj\n\n        if table_index:\n            loaded_items = self.session.load_items({\n                \"RequestItems\": create_batch_get_chunks(table_index)\n            })\n\n            for table_name, table_items in loaded_items.items():\n                for key, table", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                art = draw_art(fingerprint)\n                print(art)\n            print('Fingerprint: {0}'.format(fingerprint))\n            print('Description: {0}'.format(description))\n            print('Created at: {0}'.format(created_at))\n            print('')\n\n    async def list_vaults(self):\n       ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nNext line of code:\nadmin.site.register(Progress", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://example.com/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://example.com/')\n        document = ElementTree.parse(io.StringIO(xml_test))\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_ASC:Next line of code:\n                    Arrays.sort(sorted, new ItemDurationComparator(true));\n                    break;\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "        self.logger.error(f\"Error initializing training: {e}\")\n        self.logger.debug(traceback.format_exc())\n        self.dirty = True\n        return\n        self.training_complete = True\n        self.logger.info(f\"Training for {self.identifier} complete in {time.time() - begin:.2f} seconds\")\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.state", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\n\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\n\n    public ChatMessage getChatMessage(int index)\n    {\n        return _", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand get", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onChannelStatusChanged(ChannelStatusChangedEvent event) {\n        if (event.getChannel().equals(this.channel)) {\n            setStatus(event.getStatus());\n        }\n    }\n\n    @Subscribe\n    public void onChannelStatusChanged(ChannelStatusChangedEvent event) {\n        if (event.getChannel().equals(this.channel)) {\n           ", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Sad = BlackFormula2.price_Sad_Automatic(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n        };\n\n    /**\n     * Map of module names to module objects\n     */\n    private HashMap<String, Module> modules;\n\n\n    public ModuleLoader(AthenaGM plugin) {\n        this.modules = new HashMap<String, Module>();\n        for (Class moduleClass : moduleClasses) {\n            try", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize number of thread pool.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"packager\");\n    config.set(\"packager.version\", \"0.1.0\");\n    config.set(\"packager.mainClass\", \"com.github.forax.pro.plugin.packager.Main\");\n  }\n\n  @Override\n  public", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetNodes = element.getElementsByTagName(QUERY_SET_CONFIG_TAG);\n        if (querySetNodes!= null && querySetNodes.getLength() > 0) {\n            Node querySet", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['runtime'] = ret['runtime']\nNext line of code:\n                        S['runmemory'] = ret['runmemory']\nNext line of code:\n                        S['language'] = ret['language']\nNext line of code:\n                        S['codelenth'] = ret['codelenth']\nNext line of", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "        def test_simple_op(self):\n            \"\"\"Test simple operations.\"\"\"\n            for op in simple_op:\n                for x in self._simple_inputs:\n                    for y in self._simple_inputs:\n                        if op.condition(x, y):\n                            self.assertEqual(op.eval(x, y), op.eval(x, y))\n\n        def test", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).setType(ICC_PROFILE).setVersion(aJPEG.mICCProfile.getVersion()).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl!= null) {\n                try (SqlSession session = sqlSessionFactory.openSession()) {\n                    LastschriftenMapper mapper = session.getMapper(LastschriftenMapper.class);\n                    List<DataLastschriftMandat> rows = mapper.getRowsForSammellastschrift(sl);\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"Generate Job arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\"\"\"\n        return [\n            GeneratePronunciationsArguments(\n                os.path.join(self.working", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        Lore data = LoreLoader.getLore(key);\n\n        if (data!= null) {\n            PlayerHandler.getCollectedLore(entityPlayer).addLore(key);\n            PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n\n            entityPlayer.addChatComponentMessage(new ChatComponentText(String.format", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\nNext line of code:\n    private static final PasswordEncoder passwordEncoder = new PasswordEncoder(\"secret\");\nNext line of code:\n    private final UserDAO userDAO;\nNext line of code:\n    private final BudgetDAO budgetDAO", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = Logger.getLogger(Util.class);\nNext line of code:\n\tprivate static final CloudUtil cloudUtil = CloudUtil.getInstance();\nNext line of code:\n\tprivate static final CollectionsUtil collectionsUtil = CollectionsUtil.getInstance();\nNext line of code:\n\tprivate static final ClasspathUtil classpathUtil = ClasspathUtil.getInstance", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    ch_found = problem.solve(initial_weight, solver_name, search_mode, check, return_generator=False, verbose_level=verbose_level,\n                             filename=filename)\n\n    if ch_found is not None:\n        if verbose_level >= 1:\n            smart", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return { 'www': [ H.h1, H.h2 ], 'db': [ H.h3, H.h4 ], 'queue': H.h5 }\n\n    def test_init(self):\n        \"\"\" Test initialization. \"\"\"\n        hosts = self.get_hosts()\n        container", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        def tc_command_filter(command):\n            return command.startswith(\"tcset\") or command.startswith(\"tcdel\") or command.startswith(\"tcshow\")\n\n        return filter(tc_command_filter, self.__tc_command_output.splitlines())\n\n    def get_tc_command_history(self):\n        return list(self.get_command_history())\n\n    def get", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private Calendar selectedDay = MonthCalendarHelper.getToday();\n\n    private Calendar initialDate = MonthCalendarHelper.getToday();\n\n    private Calendar initialDate = DateUtils.getCalendarInstance();\n\n    private static int INITIAL_POSITION = 0;\n\n    public MonthCalendar(Context context, AttributeSet attrs) {\n        super(context, attrs);\n       ", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [random.random() - 0.5] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream)\n    assert", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t1.__instance__, UnionMeta)\n            ):\n                for t in t1.__instance__.__types__:\n                    unify(t, t2, backref)\n            else:\n                raise\n\n    elif isinstance(t1, UnionMeta):\n        for t in t1.__types__:\n            unify(t, t", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        login_data=None,\n        no_prompt=False,\n        region_id=None,\n        client_id=None,\n        account_id=None,\n        host=None,\n        token=None,\n        username=None,\n        password=None,\n        throttle=Throttle(),\n        throttle_time=MIN_THROTTLE_TIME,\n        throttle_retries=3", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Field):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, SketchView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, PartView):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self._log.error('Failed to serialize message: %s' % ex)\n      self._ReleaseTag(msg.properties[Tag.KEY])\n      return\n\n    data_len = buf.tell()\n    header = self._BuildHeader(msg.properties[Tag.KEY], headers[TransportHeaders.MessageType], data_len)\n    payload =", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = new ThreadDumpFactory().fromString(out.toString());\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().iterator().next().getThreadStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(runtime.getThreads().iterator().next().getStacktrace().getElement", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        return new DrumStoreEntry<>(data, DrumOperation.UPDATE, 0L);\n    }\n\n    private static DrumStoreEntry<PLDTestData,?> createNewData(long key, DrumOperation op, long... val) {\n        InMemoryEntry<PLDTestData,?> data = new InMemoryEntry<>();\n       ", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\nmedialoader/src/main/java", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder().withLocale(\"pt_BR\").withSuppressFailsTranslations(false).withBaseName(\"translator-messages-bundle/messages\").withResponseStrategy(ResponseStrategy.TRANSLATED).withSuppressOthersExceptions(Boolean.FALSE).build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest()", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n    self._ping_ar = AsyncResult()\n    self._ping_ar.SafeLink(self._CheckPingResponse)\n\n  def _CheckPingResponse(self):\n    \"\"\"Checks the response to a ping message.  If the response", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "audiolazy/lazy_misc.py\ndef almost_eq(a, b, bits=32, tol=1, ignore_type=True, pad=0.):\n  \"\"\"\n  Almost equal, based on the amount of floating point significand bits.\n\n  Alternative to \"a == b\" for float numbers and iterables with", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self._cache = GlobalConfigCache.deserialize(GlobalConfigCache.get_all_config())\n        self._cache = GlobalConfigCache.deserialize(GlobalConfigCache.get_all_config())\n        self._cache = GlobalConfigCache.deserialize(GlobalConfigCache.get_all_config())\n        self._cache = GlobalConfigCache.deserialize(GlobalConfigCache.get_all_config())\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return operands[0] < operands[1]\n    elif self.symbol == 'gt':\n        return operands[0]", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(getString(R.string.welcome, Constants.CURRENT_MBOEHAO_VERSION));\n        TextView username = (TextView) header.findViewById(R.id.personalize_username);\n        username.setText(Constants.USERNAME);\n        TextView clientReferenceNumber = (TextView) header.findViewById(R.id.personalize_client_reference_number);\n       ", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            InviteToChatFragment fragment = (InviteToChatFragment) ObservableRegistry.getObservable(InviteToChatFragment.class).getFragmentToNotify(classToNotify);\n            fragment.startChat(newChatId);\n        } else {\n            Toaster.getInstance().toast(R.string.unable_create_chat, Toast.LENGTH_LONG);\n        }\n   ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"SUCCESS\", response.getErrCode());\n        Assert.assertEquals(\"APPID\" + appId, response.getAppId());\n        Assert.assertEquals(\"MCHID\" + mchId, response.getM", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapperEnum messageMapper = new MockedMessageMapper(KEY, ERROR);\n        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_02, RANDOM_STRING_PARAMETER_VALUE_02));\n", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readSmallIntValue(int d1) throws IOException {\n\t\treturn d1 & 0x7F;\n    }\nNext line of code:\n    public int readSmallBigValue(int d1) throws IOException {\n\t\treturn d1 & 0x3F;\n    }\nNext line of code:\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quotas(self)\n        self.management.mgmt_clusters = management.MgmtClusters(self)\n        self.management.mgmt_flavors = management.MgmtFlavors(self)\n        self.management.mgmt_datastore_versions = management.MgmtDatastoreVersions(\n            self", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError as e:\n                logger.debug(f\"failed to parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\rNext line of code:\n        } else {\rNext line of code:\n        m.videoFrameRate = Main.DEFAULT_VIDEO_FRAME_RATE;\rNext line of code:\n        }\rNext line of code:\n        // set width\rNext line", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "klusta/traces/detect.py\nclass Thresholder(object):\n    \"\"\"Threshold traces to detect spikes.\n\n    Parameters\n    ----------\n\n    mode : str\n        `'positive'`, `'negative'`, or `'both'`.\n    thresholds : dict\n        A `{str: float}` mapping for multiple thresholds (", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = prepareGet", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "        self._cdg = ControlDependence(self.dominators)\n    return self._cdg\n\n  @property\n  def entry_block(self):\n    return self.blocks[self.entry]\n\n  @property\n  def exit_block(self):\n    return self.blocks[self.exit]\n\n  @property\n  def entry_block", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        FragmentObservable<QRCodeFragment, QRData> observable = ObservableRegistry.getObservable(QRCodeFragment.class);\n        observable.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<QRCodeFragment, QRData> observable = ObservableRegistry.getObservable(QR", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.isNegative()) {\n      result.append(OPEN_BRACKET);\n      visit(column);\n      result.append(\" \").append(Operator.NOT).append(\" \");\r\n      result.append(Operator.IN).", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddi = new File(basePath + \"/simple/ddi.xml\");\n\t\t\tFile xforms = new File(basePath + \"/simple/xforms.xml\");\n\t\t\tFile expected = new File(basePath + \"/simple/expected.xml\");\n\t\t\tDiff diff = xmlDiff.diff(expected, xforms);\n\t\t\tAssertions.assertTrue", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        draws = self.draw(1000, X=None, exact_match=True)\n        self.assertTrue(np.allclose(draws, np.arange(1000)))\n        self.assertEqual(\n        draws = self.draw(1000, X=None, exact_match=False)\n        self.assertTrue(np.allclose(draws, np.arange(100", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    @", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final BooleanTag tag, final boolean value) throws InvalidValueException {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity!= null) {\n\t\t\tvalidity.validate(value);\n\t\t}\n\t}\n\t\n\t@OverrideNext line of code:\n\tpublic void acceptChar(final CharTag tag", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e\", language=\"Hindi\"))\n        self.assertEqual(u\"\\u0aa4\\u0aae\\u0abe\\u0ab0\\u0", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfThe", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if there are still bits to map, map them as padding\n        if rem:\n            self.append(Bit('%s' % self.rest_name, BitLen=rem))\n        # clean temporary data\n        del self.BUF, self._buflen, self._consumed, self._offset, self._", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # Make sure we're not binding abstract models\n        validate_not_abstract(model)\n\n        # Create tables for all non-abstract subclasses\n        for cls in walk_subclasses(model):\n            if cls.Meta.abstract:\n                continue\n            if not skip_table_setup:\n                self.create_table(cls.Meta.table_name, cls)\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    engine.bind(VectorModel)\n    with pytest.raises(InvalidModel):\n        engine.bind(VectorModel)\n    assert engine._bound_models == set()\n    assert engine._bound_indexes == set()\n    assert engine._bound_tables == set()\n    assert engine._bound_table_names == set()\n    assert engine._bound_table_", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "        'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\",member=\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new LoanModule());\n        modules.add(new SqlModule());\n        modules.forEach(Module::initializeConfig);\n        modules.forEach(Module::isEnabled);\n        modules.forEach(Module::initialize);\n        // Load commands\n        CommandLoader loader = new CommandLoader();\n        loader.addCommand", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available in the sound.\n\n        :type: int\n        \"\"\"\n        num_tags = c", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditActivity(DomainObject item, ExternalController controller, int titleResId, int okButtonResId, int cancelButtonResId) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, titleResId, item, controller, okButtonResId, cancelButtonResId));\n                    }\n\n                    @Override\n", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value, inner=True", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            return false;\r\n        }\r\n        if (result.getResult() == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\t\r\n\tprivate void update() {\r\n        final UpdateInfo updateInfo = Updater.checkForUpdates();\r\n        if (updateInfo == null) {\r\n            return;\r\n", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "        nodes = Comment.objects.filter(post=post).filter(deleted=False).annotate(num_children=Count('children')).order_by('-num_children', '-net_votes')\n        nodes = nodes.annotate(num_children=Count('children')).order_by('-num_children', '-net_votes')\n        nodes = nodes.annotate(num_children=Count('", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    @NonNull\n    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to be displayed as gif categories,\n     * which when clicked will perform a gif search of that term\n     *\n     * @param serviceIds a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n            of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> mSingleScanResult = connectionResultsListener.onConnectWithScanResult(new ArrayList<>()));\n            if (mConnectionWpsListener!= null) {\n                mConnectionWpsListener.isSuccessful(false", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "class SegmentVadArguments(NamedTuple):\n    vad_path: str\n    segmentation_options: MetaDict\n\n    def __init__(self, vad_path: str, segmentation_options: MetaDict):\n        self.vad_path = vad_path\n        self.segmentation_options = segmentation_options\n\n    def __str__(self", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n       ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available in this sound.\n\n        :type: int\n        \"\"\"\n        num_tags = c_uint()\n        self._", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section\n            )\n            nbits_encoded += bufr_message.length.nbits\n\n        # Now wire the template data if requested\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bit_writer.get_bits()\n\n    def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n            report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments,\n            )\n\n            # Log moderation event\n           ", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final BenchmarkResult result = (BenchmarkResult) meth.getRelatedElement();\n        final ClassResult clazzResult = (ClassResult) result.getRelatedElement();\n        final MethodResult methodResult = (MethodResult) clazz", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Parsing application arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args, factory.getApplicationOptions());\n        ApplicationOptions options = factory.getApplicationOptions();\n        options.fillIn(parser);\n        if (options.isVerbose()) {\n            System.out.println(\"ProtTest \" + versionNumber + \" (\" +", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.startRecording(URL(\"http://example.com/recordings\"), BEEP(true));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"record\"), Do.redirect(TO(\"http://example.com/recordings\")));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"hang", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                listaDeRespostas.getPropriedades().getPrazo()!= null && Next line of code:\n                VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getPrazo())) {\n            listaDeRespostas.setPropriedades(new", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().getJson());\n\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(PageViewPagerAdapter.class);\n\t\t\t\tadapter.mTracks = ProgramManager.getInstance().mTracks;\n\t\t\t\tmViewPager.setAdapter", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    AdInterface adServerInterface;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController playerComponentController;\n\n    @Mock\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.setEvent(AppEvent.Event.EXIT) ;\n\t\t\t\t\tPlatform.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting the close request handler\", e);\n\t\t}\n\t\t\n\t\tMainWindow mainWindow = new MainWindow(client, stage, appEvent", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String adapterName = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec adapter = TypeSpec.classBuilder(adapterName)\n       .addModifiers(PUBLIC)\n       .addSuperinterface(ParameterizedTypeName.get(Binding.class, injectableType(type)))\n       .addMethod(createInjectMethod(constructor, fields))\n       ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\rNext line of code:\n        }\rNext line of code:\n       \rNext line of code:\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n        new EnableReceiveNormalMsgApi().enableReceiveNormalMsg", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif isinstance(item, TypedAttribute):\n        return f'{path}{suffix}/@{item.name}'\nNext line of code:\n    elif isinstance(item,", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "    return first_record(self, fill)\n\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\nNext line of code:\n    return last_record(self, fill)\n\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"F", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n            {\n                SmartReplyMessage m = (SmartReplyMessage)message;\n\n                m.ack();\n\n                if (m.is", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(time_var)\n\nNext line of code:\n\t\tEXOG.append(column_product(dmy_mediator,time_var))\n\nNext line of code:\n\t\tEXOG.append(column_product(dmy_mediator,dmy_covariates))\n\nNext line of code:\n\t\tEXOG.append(column_product(time_var,d", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"Thread-0\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(thread.getLock(), equalTo(ThreadLock.fromInstance(thread)));\n        assertThat(thread.getStackTrace().getHead().getFileName(), equalTo(\"BusyWaiting.java\"));\n        assertThat(thread.getStackTrace().getHead", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this, 2000, 2050);\n                picker.setOnDatePickListener(new DatePicker.OnYearMonthDayPickListener() {\n                    @Override\n                    public void onDatePicked(String year, String month, String day) {\n                        LunarCalendar tmpDate = new LunarCalendar(Integer.parseInt", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n\n    private XpNavBarSetting mXpNavBarSetting;\n\n    private SPUtil spUtil;\n\n    private Context mContext;\n\n    @Override\n    void initView(View view)", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.time_manager = TimeManager(self, config)\n        self.tracerouter = Tracerouter()\n        self.pcap_logger = PcapLogger(self, config)\n\n        self.params['interface'] = config.interface\n        self.params['private_ip'] = config.private_ip\n        self.params['public_ip'] =", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def create_outbox(self, message_ids, send_at=None, retry_limit_datetime=None):\n        \"\"\"\n        Create an outbox job to send a message\n\n        Args:\n            message_ids (", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    (NightModeable) this);\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger);\n\n    // Set up the gesture detector\n    gestureDetector = new GestureDetector(this, new GestureInterpreter());\n\n    // Set up the map mover\n    MapMover mapMover = new MapM", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        total_error = multi_phase_error + actvity_error + non_equ", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            ID('Identity', Pt=ID(1), Len=1, ReprName='IMSI', Dict=PD_dict, Repr='hum'),\r\n            ])\r\n        if with_options:\r\n            self.extend([ \\\r\n                Str('MSCm2', Pt=MSCm2(), Len=1),\r\n                Str", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_show(self, device):\n        self.__parse_tc_qdisc(device)\n        self.__parse_tc_filter(device)\n        self.__parse", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "pyramid_swagger/tween.py\ndef handle_request(request, validator_map, **kwargs):\n    \"\"\"Validate the request against the swagger spec and return a dict with\n    all parameter values available in the request, casted to the expected\n    python type.\n\n    :param request: a :class:`Pyramid", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
