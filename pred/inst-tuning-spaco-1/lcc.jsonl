{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\nNext line of code:\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor ( int k = ", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\nNext line of code:\n\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\nNext line of code:\n\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\nNext line of code:\n\t\t\tZ_.add", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format =", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "        if e.text == language:\n            return el.find_element_by_css_selector(self._STATUS_TAGS).text\n    def like_facebook(self):\n        self.click_by_css(self._LIKE_FACEBOOK)\n    def post_facebook(self):\n        self.click_by_css(self._POST_FACEBOOK)\n    def post_twitter(self):\n        self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\treturn null;\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a in self.answers:\n            ret += \" %s\" % a\n        return ret\nNext line of code:\n    def is_correct(self, answer):\n        return _QAData.is_correct(self, answer)\nNext line of code:\nclass _AnagramData(_QAData):\n    def ask_string(self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(R", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateRequest... SERVER --> CLIENT\n *\n * Server asks client to send its certificate chain, if any.  This is\n * used to authenticate the", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public void setSpaceListener (LocalSpace<Object,SpaceListener> sl) {\n        this.sl = sl;\n    }\n    public void notifyListeners (Object key, Object", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemicalCatalyst) {\n\t\t\t\tRedButton btnAlchemy = new RedButton(Messages.get(this, \"alchemy\")) {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\tWndAlchemyScene.show(owner);\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        request = self.rfile.read(int(self.headers.getheader('content-length')))\n        response = self.server.dispatcher.dispatch(request)\n        self.wfile.write(response)\n        return response\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response)))])\n        return [response", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock_status(self, status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive(self, login, password, status_id, params, session):\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Union (", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        return self.trust_managers[0].getAcceptedIssuers()\n        return self.trust_managers[0].getAcceptedIssuers()\n        return self.trust_managers[0].getAcceptedIssuers()\n        return self.trust_managers[0].getAcceptedIssuers()\n        return self.tr", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward for the domain admin page.\n     *\n     * @param mapping the action mapping\n     * @param domain the domain\n     * @return the forward\n     */\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, str(uuid.uuid4()))\n        self.__datastream_transport, self.__datastream_protocol = await self.__event_loop.create_pipe_connection(\n            DataStreamProtocol, self.__datastream_address)\n        self.__datastream_fd = self.__datastream_transport.get_extra_info('socket').fileno", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\tUtil.UpdateJumpWeightPercent(jumpID, newPersonWeight);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tConvertWeightWindowBox.convert_weight.Hide();\n\t\tConvertWeightWindowBox = null", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                MessageResources messages =\n                    getMessageResources(application, request", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new TimedData(string, conf);\n\t\t\t}\n\t\t\t@Override\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(AUTO_SAVE_TIME,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "                m_Owner.FinishSequence();\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.ML? 10 : 12, true, TargetFlags.Beneficial)\n            {\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state in states:\n            state.expire(state.dict, self.identity_map._modified)\n        self._new = {}\n        self._deleted = {}\n        self._key_switches = {}\n        self._identity_cls = identity.StrongInstanceDict\n        self.identity_map = self._identity_cls()\n        self._", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    r'/foo/?' in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                uri = self.request.path + \"/\"\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.Write (\"<div class=\\\"aspnet-MultiView\\\">\");\n\t\t\tforeach (View v in Views) {\n\t\t\t\tif (v.VisibleInternal) {\n\t\t\t\t\tv.Render (writer);\n\t\t\t\t\twriter.Write (\"<div class=\\\"aspnet-MultiView-separator\\\"></div>\");\n\t\t\t\t}\n\t\t\t}\n\t\t\twriter.Write (\"", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()\n    sys.exit(0)\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i.SkillBonuses.GetSkill(1) ==", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds.extend(android_builds(build, builds))\n        builds.extend(firefox_details.firefox_builds(version, platforms))\n    else:\n        builds.extend(android_builds(build, builds))\n    # Determine which build to use\n    build = next(b for b in builds if b['os'] == platform)\n   ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeansList!=null &&", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any(x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText)) {\n                    toReplace.Add(argumentSyntax, SyntaxFactory.Argument(SyntaxFactory.IdentifierName(ContextService.GetVariableName", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition_id(0)\n        # Set to second group configuration.\n        split_test = self._update_partition_id(1)\n        # Verify that the child verticals have been updated to match the new groups.\n        self.assertEqual(3, len(split_test.children))\n        vertical_0", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            tmp.Add(GetCIDFontType2(piref, subset, metrics));\n            tmp.Add(GetFontBaseType(piref, subset, toUnicode));\n            tmp.Add(GetToUnicode(metrics));\n            int[] metrics = (int[])parms[1];\n            int[] widths = (int[])parms[2];\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\nNext line of code:\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the top-level cell that uses this cell\n\t\t\t\t\t\t\tint depth = 0;\n\t\t\t\t\t\t\tfor(Iterator<Cell> uIt = cell.getUsagesIn", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getAssets().open(model.getSprite());\n      Bitmap bitmap = BitmapUtil.decodeStream(is, EMOJI_RAW_WIDTH, EMOJI_RAW_HEIGHT);\n     ", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Not implemented.\n     *\n     * {@inheritDoc}\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nNext line of code:\n    def resetter(self):\n        self.view.reset_button.click()\n        self.view.cancel_button.click()\n        self.view.save_button.click()\n        self.view.cancel_button.click", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n\t\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n                base.Render(writer);\n            }\n            else\n            {\n                base.Render(writer);\n            }\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\t\n\t\tNBTTagList list = new NBTTagList();\n\t\t\n\t\tif", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect: \" + super.toString() + \", probability=\" + probability;\n    }\n    /**\n     * Get the XML tag of this object.\n     *\n     * @return The XML tag of this object.\n     */\n    public static String getXMLElementTagName() {\n        return \"effect\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n       'reporttime", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(p.employer, o)\n        self.assertEqual(o.employees[0], p)\n        self.assertEqual(p.employer,", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, x=widget_x, y=widget_y, sel_dim=False)\n                else:\n                    interact(self._plot_line, x=x, y=y, sel_dim=False)\n            else:\n                raise ValueError('x and y must be given')\n        else:\n            self._plot_line(x", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path))\n                {\n                    _logger.Trace(\"Ignoring change to {0}\", path);\n                    continue;\n                }\n                if (rootFolder!= path.GetRootFolder())\n                {\n                    _logger.Trace(\"Ignoring change to {0} in {1}\", path, rootFolder);\n                    continue;\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n           ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\nNext line of code:\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\nNext line of code:\n\t\t\tset { m_Z = value; }\nNext line of code:\n\t\t}\n\t}\n\t[System.Runtime.InteropServices.StructLayout", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchSIPProxy);\n                    m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": channel_uri: {4}\",\n                                      scene", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=Convert.ToDateTime(textDateStart.Text);\n\t\t\tPayPeriodCur.DateStop=Convert.ToDateTime(textDateStop.Text);\n\t\t\tPayPeriodCur.DatePaycheck=Convert.ToDateTime(textDatePaycheck.Text);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time Av or Int'])\n        # Skip the line after the column headings", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if not user:\n        return {'success': False,'msg': _('Valid API key needed to create a group member')}\n    return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString label = example.getValue(predictionAttribute).toString();\n\t\t\t\t// assigning data\n\t\t\t\tNode child = node.getChild(label);\n\t\t\t\toutcomes[parentIndex] = child.getPartitionId();\n\t\t\t\tconfidences[parentIndex] *= child.getModel().getConfidence(example);\n\t\t\t\tdepths[parentIndex] = depth + 1", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return segments.Select(segment => this.SearchSegment(settings, segment)).ToArray();\n        }\n        /// <summary>\n        /// Performs a search for a segment.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segment\">The segment to search for", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            if ('\\uDC00' <= ch && ch <= '\\uDFFF') {\n               codePoint = 0x10000 + ((ch - 0xDC00) << 10) + (ch - 0xDC00);\n            } else {\n               return -1;\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        ValidationResults results = ValidationResults.SUCCESS;\n        if (studyFormName!= null) {\n            if (studyFormName.equals(AccessionNumberUtil.getStudyFormName(accessionNumber))) {\n                results = ValidationResults.SUCCESS;\n            } else {\n                results = ValidationResults.STUDY_FORM_NAME_FAIL;\n           ", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"The server is running a different mod\");\n\t\t\t\t\tDropClient(new", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\nNext line of code:\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\nNext line of code:\n\t\t\tcoll.add(beans[i].buildVo());\nNext line of code:\n\t\t}\nNext line of code:\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(header=\"Service Clean Up\", message=\"This Addon needs arguments to run\", icon", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD[ 'plotType' ]\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tvar newProductionBuildings = builders.Where(b => b.IsBuildingNewProductionBuilding).ToArray();\n\t\t\tif (newProductionBuildings.Length == 0)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = new List<CPos>();\n\t\t\tforeach (var b in newProductionBuildings)\n\t\t\t{\n\t\t\t\tvar factory = b", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        m_currentPlan = plan;\n        return plan.getPlan();\n    }\n    public void compile(String sql, int paramCount, boolean singlePartition, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP) {\n        compile(sql, paramCount, joinOrder, partitionParameter, inferSP,", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.XonXoff = (hs == Handshake.RequestToSendXOnXOff);\n\t\t\tif (!", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand_moderator(self):\n        moderator = self.make_user('moderator')\n        moderator.is_staff = True\n        moderator", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('--no-keep-tempdir', dest='keep_tempdir',\n                        action='store_false')\n    parser.set_defaults(keep_tempdir=False)\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.newAPList.sort()\n\t\tself.newAPList.reverse()\n\t\tself.newAPList = self.newAPList[:self.listLength]\n\t\tfor entry in self.newAPList:\n\t\t\tnewListIndex = newList.index(entry[0])\n\t\t\tcurrentListEntry = self.WlanList[newListIndex]\n\t\t\tcurrent", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                int n = fCode.Length;\n                int m = n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, +90.0, 2.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),\n            (\"latitude\", y_points.flatten()),\n        ]\n        result = traj", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket == null)\n            {\n                return;\n            }\n            Clipboard.SetText(currPacket.Frame.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "        print'red'\n        print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\n        print 'yellow'\n        print '\\033[0m'\n    else:\n        print 'no color'\n    return 0\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 341);\n            this.Controls.Add(this.treeView1);\n            this.Name = \"DummySolutionExplorer\";\n            this.Text = \"Dummy", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        if not isinstance( original, wrapper.FunctionType ):\n            raise TypeError( \"\"\"Not a function type: %r\"\"\"%(original,))\n        if original.DLL is self.GLUT:\n            #GLUT is special, we need to check for context validity...\n            return _CheckContext( original, self.CurrentContextIsValid", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            final DataOutputStream dos = new DataOutputStream(baos);\n            emptyStreams.writeTo(dos);\n            dos.flush();\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for (final SevenZArchive", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = rampUp? 255 : 0;\n                }\n                else\n                {\n                    alphaLevel = (int) (255 * (System.currentTimeMillis() - start)", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_not_allow_move_files_if_max_idletime_not_configured_and_paused()\n        {\n           ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 0\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n                    i +=", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the database.\n        \"\"\"\n        url = STUDIO_BASE_URL + '/course'\n        response = self.session.post(url, data=self._course_dict, headers=self.headers)\n        if not response.ok:\n            raise Fixture", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\nNext line of code:\n\t\tint amount = (int) (chance * (Math.random() + 1));\nNext line of code:\n\t\treturn amount;\n\t}\n}\n*/", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        types = ['key', 'cert']\n        for cert_type in types:\n            try:\n                os.remove('%s/%s.pem' % (config_directory,cert_type))\n            except:\n                module.fail_json(\"Could not delete \" + config_directory + \"/\" + cert_type + \".pem\")\n        return ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"This will improve the accuracy of", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.run()\n            except KeyboardInterrupt:\n                raise\n            except:\n                if self.raise_plugins:\n                    raise\n                else:\n                    self._log_plugin_exception(plugname)\n            plugruncount += 1\n            if plugrunc", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    getRoomFullName.produce = lambda s: s.getRoom().getFullName()\n    getRoomFullName.convert = Conversion.roomFullName\n    def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.reservationsList\n    getRoomBookingList.name = \"booked", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter, subfoldersCheckbox.isSelected());\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText(), null, subfoldersCheckbox.isSelected());\n            }\n        } catch", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Number) {\n\t\t       \t\t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected String getView(Object options)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.isOpened()) {\n            userInfoSession = Session.openActiveSessionWithPermissions(currentSession, getActivity(), REQUEST_FIELDS, new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if (state == SessionState", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\nPlease complete the code given below. \npackage info.deskchan.talking_system;\nimport info.deskchan.core_utils.TextOperations;\nimport", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n                }\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an XML document.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    phi1 = phi1Rad*_rad2deg;\n    phi1 = phi1*_rad2deg;\n    phi1 = phi1*_rad2deg;\n    phi1 = phi1*_rad2deg;\n    phi1 = phi1*_rad2deg;\n    phi1 = phi1*_rad", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            msg = UserMessage.objects.create(\n                to_user = user,\n                from_user = request.user,\n                message = reason,\n            )\n            messages.success(request, \"Report sent!\")\n            return HttpResponseRedirect", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    field_names = ['name','status', 'description', 'development_focus']\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Add a new series to %s\" % self.context.title\n    @property\n    def cancel_url(self):\n        \"\"\"See `", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(false); }\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(IForm form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the value of the datatype\n     */\n    public Object getValue()\n    {\n        return value;\n    }\n    /**\n     * @param value\n     */\n    public void setValue(Object value)\n    {\n        this", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                new_positional_tags_list.append(TagRegex(flag, regex))\n            return new_positional_tags_list\n    def default_tags(tags):\n        if not tags:\n            return [[constants.supported_tags[constants.isa_tag_type],\n                     constants.supported_tags[constants.variant_tag_type],\n                     constants.supported_tags[constants", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new NotImplementedException ();\n            }\n            public override Type GetInterface (string name", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        0x06: 'OBD-II as defined by the CARB and OBD as defined by the EPA',\n        0x07: 'OBD-II as defined by the CARB and OBD as defined by the EPA and OBD-I',\n        0x08: 'OBD-II", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe, pipe = os.pipe()\nNext line of code:\n\t\tgobject.MainLoop().run()\nNext line of code:\n\t\tos.close(ready_pipe)\nNext line of code:\n\t\tos.write(pipe, \"1\")\nNext line of code:\n\t\tos.close(pipe)\nNext line of code:\n\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(RunedPrism), 1073466, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._preserved_exc = exc\n        if self.preserved:\n            self.preserved = False\n            self.pop(self._preserved_exc)\n        else:\n            self._after_request_functions.reverse()\n            for f in self._after_request_functions:\n                rv = f(self.request)\n                if rv is not", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<Resource", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        dx = (ray_trafo.range.meshgrid[1] * np.cos(angles) +\n              ray_trafo.range.meshgrid[2] * np.sin(angles))\n    else:\n        dx = (ray_trafo.range.meshgrid[1] * np.cos(angles) +\n              ray_trafo.range", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "# coding=utf-8\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn ToString (fmt, true);\n\t\t}\n\t\tpublic string ToString (IFormatProvider fmt, bool includeUnit)\n\t\t{\n\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (includeUnit) {\n\t\t\t\tif (unit.IsEmpty)\n\t\t\t\t\treturn font_size_names[(int) type];\n\t\t\t\treturn font", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// transform input into BigInteger\n\t\t\tBigInteger block1Int = new BigInteger(1, block1", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JString)innerObj.Properties[0].", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (h == 0 || h == height - 1) {\n                        edges.add(T2.of(w, w + 1));\n                    }\n                    if (w == 0 || w == width - 1) {\n                       ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    i1 = iso.Isoelastics([ds])\n    data = i1.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  channel_width=30,\n                  flow_rate=0.16,\n                  viscosity=1.0,\n                  lut_identifier=\"LE-2D-FEM-19", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final String filename = args[0];\n        final String namespace = args[1];\n        final String filename2 = args[2];\n        final String namespace2 = args[3];\n        final String timestamp = args[4];\n        final String timestamp2 = args[5];\n        final String timestamp3 = args", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile!= null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Performs the actual installation.\n\t * \n\t * @return true/false\n\t */\n\tprivate", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\twindow.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        (projected onto the *y* axis) or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self.parameter_values)\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() +", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #endregion\n        #region Initialization\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n        final List<ConstraintViolation<ImportVmTemplateCommand>> violations = ValidationUtils.validate(command);\n        final List<ConstraintViolation<ImportVmTemplateCommand>> expectedViolations =", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(2));\n\t\t\tw10.RightAttach = ((uint)(3));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\t// TODO: this is not correct, we need to emit a call to the base type's type initializer\n\t\t\t// TODO: we also need to emit a call to the base type's type initializer if the base type is not System.Object\n\t\t\t// TODO: we also need to emit a call", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type to show.<p>\n     * \n     * @return the page type to show", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame ();\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnEnabledChanged(EventArgs e)\n    {\n      Invalidate();\n      base.OnEnabledChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnVisibleChanged(EventArgs e)\n    {\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0 &&!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string AUserId in Users)\n            {\n                SendEmailForUser(AUserId, AErrors);\n            }\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left;\n\t\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 3)\n            {\n                ValidationColumn = FMainDS.PcDiscount.Columns[PcDiscountTable.ColumnDiscountId];\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                            PetraError", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\nNext line of code:\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "#\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\nNext line of code:\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget { return cacheDir; }\n\t\t}\n\t}\n}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation sourceLineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (sourceLineAnnotation.getLineNumber() < 0) {\n                    throw new RuntimeException(\"BugInstance has negative line number: \" + bugInstance);\n                }\n            }\n        }\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "Please complete the code given below. \nusing System;\nusing System.Collections;\nusing Server.Network;\nusing System.Collections.Generic;\nusing Server.ContextMenus;\nnamespace Server.Items\n{\n\tpublic abstract class Food : Item\n\t{\n\t\tprivate Mobile m_Poisoner;\n\t\tprivate Poison m_Poison;\n\t\tprivate int m_F", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                    {\n                        var qMinion = minions.FirstOrDefault(x => x.DistanceToPlayer()", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n            return {}\n        date = datetime.datetime(int(year), int(month), int(day),", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_def, field_model_def)\n        clean_field_model_definitions()\n    def test_guess_legacy_field_names(self):\n        \"\"\"JSONAlchemy - guess legacy field names\"\"\"\n        clean_field_model_definitions()\n        self.assertEquals(\n            guess_legacy_field_names('title', 'test_model', 'testsuite'),\n            'title", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {10L, \"E1\"}});\n                // widen to short\n                env.UndeployAll();\n                path.Clear();\n                path.Add(path.Compileds[0]);\n                env.CompileDeploy(\"create table MyInfraW as (f1 short primary key, f", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        c = self.copy()\n        return c.__imul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "    def render(self, cr, uid, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n        if request and getattr(request, 'website_enabled', False):\n            engine='website.qweb'\n            if isinstance(id_or_xml_id, list):\n                id_or_xml_id = id_or", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        if (oldValue!= value) {\n            c.repaint();\n        }\n    }\n    /**\n     * Get the factory for the given component.\n     *\n     * @param c a component\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, content)\n    assert s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.name_is_reference", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.namedquery = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(Action<ISqlLoaderMapper> loaderMapping)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n    }\n    private int inliningDepth() {\n        return invocationQueue.size() - 1;\n    }\n    private boolean moveForward() {\n        if (currentInvocation().callee().isRoot()) {\n            return false;\n        }\n        if (tryToInline(currentInvocation(), inliningDepth", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            if sprout_appliances:\n                self.args['sprout'] = True\n                self.args['sprout_stream'] = self.pr_metadata['sprout_stream']\n                self.args['sprout_description'] = self.pr_metadata['sprout_description']\n                self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    ValuePhiNode phiNode = getCachedPhi(value, value.stamp());\n                    for (int i = 1; i < states.size(); i++) {\n                        states.get(i).readCache.put(key, phiNode);\n                    }\n                } else {\n                    for (int i = ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic class EodonianWallMapGump : Gump\n\t\t{\n\t\t\tprivate readonly PlayerMobile m_From;\n\t\t\tprivate readonly Item m_Item;\n\t\t\t\n\t\t\tpublic EodonianWallMapGump", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "# -*- coding: utf-8 -*-\n#\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        user = '%s@%s' % (username, domain)\n        self.module.delete(user)\n        all_users = self.module.get('all_users', set())\n        all_users.remove(user)\n        self.module.set('all_users', all_users)\n    def get_random_password(self):\n        return '12345678", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def to_binary(self):\n        \"\"\"Return the mofile binary representation.\"\"\"\n        return _BaseFile.to_binary(self)\n    def percent_translated(self):\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res['OK']:\n       ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// Check for plugins\n\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Check for plugins\n\t\t\t\tString pluginName = action.substring(PLUGINS_PREFIX.length());\n\t\t\t\tif(pluginName.equals(\"search\")) {\n\t\t\t\t\t// Allow access to Library for searching, form passwords are used for actions such as", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.category.term = 'test'\n    self.category.label = 'test label'\n    self.assert_(self.category.scheme == 'http://www.google.com')\n    self.assert_(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       , Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>(r1);\n            r.putAll(r2);\n            for (Map.Entry<String, AnnotationMirror> entry : r2.entrySet()) {\n                if (r.containsKey(entry.getKey())) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# ##### BEGIN GPL LICENSE BLOCK #####\n#\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                timer_irq_Latch_16 = map16.TimerIrqLatch_16;\n                timer_irq_counter_16 = map16.TimerIrqCounter_16", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            JMenuItem jMnuOpenDocument = new JMenuItem(\"Open Document\");\n            jMnuOpenDocument.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));\n            jMnuOpenDocument.addActionListener(oActionListener);\n            jMnuOpenDocument.setActionCommand(SADDTODOCUMENT);\n            _", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\t// Page 3\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\t", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\tFrame = new Frame (Frame.X, Frame.Y, Frame.W, height);\n\t\t\treturn height;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWith", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\"\"\"\nData models for the announcements app.\n\"\"\"\nfrom django.db import models\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.utils import timezone\nfrom django.utils.translation import ugettext_lazy as _\nfrom apps.tools.utils import unique_slug\nfrom apps.tools.models import ModelDiffMixin\nfrom", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# lexers['php'] = PhpLexer(startinline=True)\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    row_count = len(cursor.fetchall())\n    print \"nos rows is: \", row_count \n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        rethinkdb.table('projects').get(project_id).update({'last_snapshot': timestamp}).run(conn)\n    conn.close()\ndef db_get_last_snapshot(project_id):\n    \"\"\"\n    Return the last snapshot timestamp for the given project_id.\n    \"\"\"\n    conn = rethinkdb_connection()\n    v = rethinkdb.table('projects", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "//--- Aura Script -----------------------------------------------------------\n// Deian\n//--- Description -----------------------------------------------------------\n// Shepard - manages the sheep at Tir Chonaill Grassland\n//---------------------------------------------------------------------------\npublic class DeianScript : NpcScript\n{\n\tpublic override void Load()\n\t{\n\t\tSetRace(10002);\n\t\tSetName(\"_deian\");\n\t\tSet", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)\n        self", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\nNext line of code:\n    def __repr__(self):\n        return '<TaskData: %s>' % self.name\nNext line of code:\n    def __str__(self):\n        return self.__repr", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                context.startActivity(intent);\n            }\n        }\n    }\n}\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport behave\nimport re\nimport os\nimport tempfile\nimport glob\nfrom lib.file import decompress_file_by_extension_to_dir\nfrom common.lib.behave_ext import check_context_table\nfrom common", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, cmd):\n        \"\"\"Get the command object for the given command, with all options\n        finalized.  This is a convenience", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity);\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-J', job_name,\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-l', 'h_rt=168:00:00',\n        '-l', 'h_vmem=' + str(request['job_max_vmem']) + 'G',\n       ", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            ViewBag.ModelId = new int?(0);\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3},{4})\", circle.Position.X, circle.Position.Y, circle.Radius, circle.Thickness, circle.Color);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (Vector2)", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "        elif self.__name__ == \"FilejungleCom\":\n            #try api download\n            res = self.load(\"http://app.filejungle.com/api/download/premium/\",\n                            post={\"username\": self.user,\n                                  \"password\": self.account.getAccountData(self.user)['password'],\n                                  \"shorten\": self", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no harvestable resources were found, try searching from the refinery instead.\n\t\t\tif (path == null)\n\t\t\t{\n\t\t\t\tvar lastproc = harv.LastLinkedProc?? harv.LinkedProc;\n\t\t\t\tif (lastproc!= null &&!lastproc.Disposed)\n\t\t\t\t{\n\t\t\t\t\tvar delivery", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                        self.logger.error(\"service %s restart failed\" % service_name)\n                        return False\n                    else:\n                        self.logger.info(\"service %s restarted\" % service_name)\n                        return True\n                else:\n                    self.logger.info(\"not restarting dhcpd\")\n                    return True\n            elif which_dhcp_module ==", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            PpmContext currentContext = context.Suffix;\n            PpmState successor = currentContext.Statistics + currentContext.NumberStatistics;\n            PpmState previousSuccessor = successor;\n            PpmState previousSuccessor2 = successor;\n            PpmState previousSuccessor3 = successor;\n            PpmState previous", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false, true, 0, false, '\\0', 0", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tforeach(Session s in session_l)\n\t\t\t{\n\t\t\t\tif(s.UniqueID == Convert.ToInt32(tFull[3]))\n\t\t\t\t\tsessionValuesArray.Add(s.SessionID);\n\t\t\t}\n\t\t}\n\t\tif(sessionValuesArray.Count == 0)\n\t\t{\n\t\t\tnew DialogMessage(Constants.MessageTypes.ERROR, Catalog.GetString", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00', self.read(o))\n    def test_larger_than_file_middle(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n    <td>\n  <a onClick=\"return onDownload", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(range(1, len(cr['combined'][app][VC]['durations']) + 1),\n             cr['combined'][app][VC]['durations'], 'b-', label='Individual')\n    plt.plot(range(1, len(cr['combined'][app][VC]['durations']) + 1", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1, 1, 0], [])\n        self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1, 1, 0", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}else if(model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.fillRect(x, y, control", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner!= 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = kn", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize())", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath!= null && relativePath.Length > 0) {\n                string assemblyFile = FileUtils.CombinePaths(Parent.Directory, relativePath);\n                if (File.Exists(assemblyFile)) {\n                    return assemblyFile;\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Res", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\"\"\"\nUtilities\n\"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name + \"\\n\";\n\t\t\tstr += \"Current Transition: \" + _current_transition.ToString() + \"\\n\";\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUserId()).thenReturn(\"test.user\");\nNext line of code:\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.tenant\"));\nNext line of code:\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['/sbin/modinfo', '-d','somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        out, err = proc.communicate('in')\n        rc = proc.returncode\n        self.assertEquals(0,", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Initialize(propertiesName, ConfigDirectory);\n\t\t\tResourceService.Initialize(DataDirectory);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences\"))\n        self.settings_ui_groupbox.setTitle(_translate(\"Dialog\", \"User Interface\"))\n        self", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                Button btn = new Button( getActivity() );\n                btn.setText( R.string.no_taf_nearby );\n                btn.setLayoutParams( new LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT ) );\n                layout.addView( btn );\n                return false;\n            }\n            String stationId = wxs.getString( wxs", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.IsNotNull(continentStats, \"stats were null\");\n\t\t\t\tAssert.AreEqual(1, continentStats.ExecutionCount, \"unexpected execution count", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uint)(uiCRCITTSum ^ uiByteValue);\nNext line of code:\n                if ((uiCRCITTSum & 0x8000)!= 0)\n                {\n                    uiCRCITTSum = (uint)(uiCRCITTSum << 1);\nNext line of code", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic boolean isTargetingAllowedMob(LivingEntity potentialTarget) {\n\t\tif (potentialTarget!= null) {\n\t\t\tList<String> mobs = ModuleUtils.getPlayersFromModule(getAllowlistModule());\n\t\t\tfor (String s : mobs) {\n\t\t\t\tif (potentialTarget.getName().get", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "        } else {\n            return new IHyperlinkDetector[] {\n                    new CeylonHyperlinkDetector(controller),\n                    new CeylonNativeHeaderHyperlinkDetector(controller),\n                    new CeylonJavaBackendHyperlinkDetector(controller),\n                    new CeylonJavascriptBackendHyperlinkDetector(controller),\n                    new ReferencesHyperlink", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspectWidget = Object3DAspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateInterface = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspectWidget)\n        self.l.addWidget(self.scaleWidget)\n        self.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( int.Parse( m_Text[ 0 ] ), int.Parse( m_Text[ 1 ] ) );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tdefault", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  result = chosenObj;\n               }\n            }\n            else\n            {\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\" \\t\"+fractionWithAmount[i][j][k]+\"\\n\"); \n\t\t\t\t\t}\n\t\treturn sb.toString();\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value;\n                                //check", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResult {\nNext line of code:\n\t\t\tget { throw", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupMode = 0700;\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int userMode = 0700;\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupUserId = new Random().nextInt", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 center)\n\t\t{\n\t\t\treturn v - center;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 center", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_union(XDRUnion):\n    __slots__ = ['value']\n    def __init__(self, value=None):\n        self.value = value\n    def pack(self):\n        return self.value.pack()\n    @classmethod\n    def unpack_from(cls, unpacker):\n        return cls.unpack_from(unpacker", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends a message to a specific client\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"client_number\"></param>\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivitiesReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if bind_count:\n    print'   object,'\n  if is_method:\n    print'   method,'\n  if bind_count:\n    print'   a%d' % (bind_count - 1)\n  if exec_count:\n    print'   %s' % (exec_type_str)\n  print", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    return HttpResponse(simplejson.dumps([range_item_dict(item) for item in items]), content_type=\"application/json\")\n    \"\"\"\n    return HttpResponse(simplejson.dumps([range_item_dict(item) for item in items]), content_type=\"application/json\")\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(new ConstantNode(searchIV),\n                        serviceGraphPattern));\n            }\n        }\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer();\n        final ASTContainer givenContainer = new ASTContainer(given);\n       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        self.model = get_user_model()\n        return super(UserDetailView,", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssembly", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var p = new DenseVector(input.Count);\n            var q = new DenseVector(input.Count);\n            var s = new DenseVector(input.Count);\n            var t =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of numbers\n\t * @param numbers Array of numbers\n\t * @return Mean", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[v, reference_set_map[v]] -= 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.parent\n            while v!= -1:\nNext line of code", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        mapping_json = mapping_json[self.enrich_index]\n        mapping_json = mapping_json['mappings']\n        mapping_json = mapping_json['properties']\n        mapping_json = mapping_json['ocean-unique-id']\n        mapping_json = mapping_json['properties']\n        mapping_json = mapping_json['ocean-unique-id", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots &&!slot.Value.LockTeam && orderManager.LobbyInfo.ClientInSlot(slot.Key) == null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar botName = tabCompletion.GetCompletion(botNames);\n\t\t\t\t\t\t\t\t\t\t\tif (botName!= null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        frame_payload = padding_bytes + self.data\n        return frame_header + frame_payload\nclass HeadersFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve.BoundingBox!= cluster.BoundingBox)\n                throw new Exception(\"Cluster \" + cluster.DebugId + \" has inconsistent boundary curve and bounding box\");\n            foreach (var node in cluster.Nodes)\n                if (node.BoundingBox!= cluster.BoundingBox)\n                    throw new Exception(\"Node \" + node", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setInterpolateUp(bool interpolateUp)\n{\n\tm_interpolateUp = interpolateUp;\n}\nbool btKin", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean canBeLeaked(ExpressionTree exp) {\n        return", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_type = typeAttribute.Value;\n\t\t\t\t_returnType = Context.CreateType(_type);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods of this comment item.\n\t\t/// </summary>\n\t\tprivate void CreateMethods()\n\t\t{\n\t\t\t// create methods\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");\n\t\t}\n\t\t[Test]\n\t\tpublic void OrientationTest ()\n\t\t{\n\t\t\tTrackBar myTrackBar = new TrackBar ();\n\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\tAssert.AreEqual (Orientation.Vertical, myTrackBar.Orientation, \"#O2", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tinstrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t// must be write lock\n\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers.<Callable<?>> any());\n\t\t\tverifyZeroInteractions(instrumentationApplier);\n\t\t}\n\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathFlags!= null) {\n\t\t\tif (other.pathFlags == null)\n\t\t\t\treturn false;\n\t\t\tif (!this.path", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideRExtent[start][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;\n            }\n            int max1", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude=pg_xlog', '--exclude=pg_clog',\n                '--exclude=pg_xlog', '--exclude=pg_clog', '--exclude=pg_xlog',\n                '--exclude=pg_clog', '--exclude=pg_xlog', '--exclude=pg_clog',\n               ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.RuntimesChanged -= DbgProcess_RuntimesChanged;\n\t\t}\n\t\t//", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif (!(aThat instanceof Contact) ) {\n\t\t\t return false;\n\t\t}\n\t\tContact that = (Contact)proxyThat;\n\t\tif ( this.getContactDate() == null ) {\n\t\t\t if ( that.getContactDate()!= null ) {\n\t\t\t\t\t return false;\n\t\t\t\t}\n\t\t} else", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata[0] == [0, slice(None)]:\n            return [node.inputs[0]]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.inputs[1]\n        if isinstance(cdata, T.TensorConstant):\n            cdata = cdata.value\n        if isinstance", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from community.forms import AddCommunityForm, EditCommunityForm, EditCommunityPageForm, PermissionGroupsForm, RequestCommunityForm, AddCommunityPageForm, EditCommunityRequestForm\nfrom community.models import Community, CommunityPage, RequestCommunity\nfrom users.models import SystersUser\nfrom django.contrib.auth.models import Group\nfrom", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                    return fn(*arg, **kw)\n            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n        core :class:`.Select` object.\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "        etree.SubElement(xml_object,'show').text = ';'.join(self.show_tag_list)\n        return etree.tostring(xml_object, encoding='utf-8', pretty_print=True)\n    def get_children(self):\n        return self.show_tag_list\n    def get_required_module_descriptors(self):\n        return self.sources_list", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes]\n        return global_changes\n    def get_global_changes(self, data_model_changes):\n        global_changes = self.translate_changes(data_model_changes)\n        return global_changes\n    def get_filtered_changes(self, data_model_changes):\n        filtered_changes = [ArrayValueChange(key, old_value,", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && type == null)\n\t\t\t{\n\t\t\t\tif (Method!= null || Field!= null || Sig!= null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'class' attribute with'method' or 'field' attribute for", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"remove leftover code, leave a temporary compatibility import.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet()) {\n            if (StringUtils.isNotBlank(datum.getValue())) {\n                termData.put(d", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onActivated(EntityPlayer player, ItemStack wand) {\nNext line of code:\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onActivatedBy(EntityPlayer player, ItemStack wand, EnumFacing side) {\nNext line of code:\n\t\treturn false;\n\t}\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> newCommunitiesToReturn, THashSet<Community> commonCom", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                            v1 = flags[flagname][version][docformat]\n                            v2 = minfo['flags'][flagname][version][docformat]\n                            if v1!= v2:\n                                are_equal = False\n                                logger.info(\"ERROR: Document %s: Expected flag %s and got %s\"", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tguiThread.Abort();\n\t\t\t//guiThread.Join();\n\t\t\t//guiThread.Dispose();\n\t\t\t//guiThread=null;\n\t\t\t//computerMgmt=null;\n\t\t\t//tvComputerCluster=null;\n\t\t\t//tvComputerCluster.Dispose();\n\t\t\t//tvComputerCluster=null;\n\t\t\t//listView", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    ExDate exDate = new ExDate(exDateList);\n    return exDate;\n  }\n  /**\n   * Converts a Datable to an iCal4J DateTime.\n   * @", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.TargetEventName = \"OnSourcePropertyChanged\";\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName,\n                    this);\n            ObjectMapper mapper = new ObjectMapper();\n            SpanConfig config = mapper.readValue(jsonData, SpanConfig.class);\n            Status result = switchManager.addSpanConfig(config);\n            if (result.isSuccess())", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate ImageHelper convert(String path, Integer width, Integer height)\n\t\t{\n\t\t\treturn new ImageHelper(path, width, height);\n\t\t}\n\t\tprivate ImageHelper convert(int id, Integer width, Integer height)\n\t\t{\n\t\t\tswitch", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n        }\n        public int randomChoice(int min, int max) {\n        return rnd.nextInt(max - min + 1) + min;\n        }\n        public int randomChoice(List l) {\n        return randomChoice(l.size());\n        }\n        public int randomChoice(List l, int min", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "        la = LinkAnnotation()\n        la.subject = man_obj.uuid  # the subordinate is the subject\n        la.subject_type = man_obj.item_type\n        la.project_uuid = man_obj.project_uuid\n        la.source_id = 'label-match'\n        la.predicate_uri ='skos:closeMatch'\n        la", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit= \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \").Append(MergeCells)\n               .Append(\"\\n\");\n            buffer.Append(\"         .readingorder= \")\n               .Append(StringUtil.ToHexString(Reading", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1])) << 8);\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LEA\"   : dst = env.A[a]\n    elif obj.mnemonic==\"LD_D\"  : dst = env.E[a]\n    elif obj.mnemonic==\"LDMST\" : dst", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString key = (String) e.nextElement();\n\t\t\t\tString", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "        return this == CREATIVE;\n    }\n    /**\n     * Returns true if this is the SURVIVAL game type\n     */\n    public boolean isSurvival()\n    {\n        return this == SURVIVAL;\n    }\n    /**\n     * Returns true if this is the SPECTATOR game type\n     */\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new Common", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "                else:\n                    error = \"response status error\"\n        if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb, float(len(results))", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        foreach (MethodInfo method in typeof(PhotonNetwork).GetMethods(BindingFlags.Public | BindingFlags.Static))\n        {\n            if (method.Name.StartsWith(\"Call\") && method.Name.EndsWith(\"RPC\"))\n            {\n                string rpcName = method.Name.Substring(4, method.Name.Length - 5);\n                if (!PhotonEditor", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        Button fullShareBtn = rootLayout.findViewById(R.id.full_share_button);\n        fullShareBtn.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_share).sizeDp(20).color(secondaryColor), null, null);\n        fullShareBtn.setCompoundDrawable", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, np.linalg.inv(op_cc))\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def get_count(self, rank=0):\n        \"\"\"Return number of k-point/sp", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(OK", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILBasicBlock child in block.GetSelfAndChildrenRecursive<ILBasicBlock>()) {\n\t\t\t\t\tif (child == block) {\n\t\t\t\t\t\tflatBody.AddRange(child.Body);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflatBody.AddRange(child.Body);\n\t\t\t\t\t\tprevChildAsBB = child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll == ragdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we need to convert to one\n\t    if (!IsRagdoll) {\n\t\t//set the ragdoll flag\n\t\tIsRagdoll = true;\n\t\t//", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\nclass StratumLayer(GeoLayer):\nNext line of code:\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = Layer", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)num;\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>()\n            {\n                public boolean accept( PatternMatch match )\n                {\n                    return matchMatches( match, objectVariables );\n                }\n            } );\n        }\n        private boolean matchMatches( PatternMatch match,\n            Map<String, PatternNode> objectVariables )\n        {\n           ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'TAUX':\n            slice_json['rate'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          } else {\n            if (ClientSettings.ICON_CLOSE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME)));\n          }\n        }\n        public", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport zmq\nimport warnings\nTIMEOUT = 1000  # milliseconds\nVERBOSE = False\nRETRY = True  # Should we try to get another server if we can't connect?\nSERVERFILE = \"serverlist.dat\" # Base name of the file containing  server names\nif __name", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterIn", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    cv = new ContentValues();\n                    cv.put(Db.Table4.ID", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n    }\n    internal enum AllocMethod\n    {\n        HGlobal", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "# URL to redirect to after login\nLOGIN_REDIRECT_URL = '/'\nNext line of code:\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t// Cancel the production of the given number of items\n\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar item = queue[0];\n\t\t\tif (item.Item!= itemName)\n\t\t\t\treturn;\n\t\t\tif (item.NumberToBuild!= numberToCancel)\n\t\t\t\treturn;\n\t\t\tFinishProduction();\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(r'%%\\1%%', code)\n        code = code % self.env\n        self.outputs[0].write(code)\n@feature('m4')\ndef process_m4(self):\n    \"\"\"\n    Create *.pc* files from *.pc.in*. The task is executed whenever an", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n    def __del__(self):\n        rospy.loginfo(\"Shutting down PlanningServer...\")\n        self._planningSolverClient.cancel_all_goals()\n        self._knowledgeParser", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 1 ][ idx ] + chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case ColumnType.STRING:\n                columnTypes.add(typeManager.nextStringAdapter", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tentity.cti_id = Convert.ToInt32(qs.Parameters[\"@cti_id\"].Value);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetPropertyValue(object component, int property, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic void Set", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        self.updates_cmd.append(\"ntp authentication-key %s %s %s\" % (self.key_id, self.auth_mode, self.password))\n        self.updates_cmd.append(\"ntp trusted-key %s\" % self.key_id)\n        self.updates_cmd.append(\"ntp authentication enable\")\n        self.cli_load_config", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        after_update = datetime.datetime.now(UTC)\n        # Verify that the component was last edited by editing_user\n        check_node(component.location, after_update, after_create, editing_user, None, after_create, self.user_id)\n        # Verify that the child was", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(ch, start, length);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        characters(ch, start, length);\n    }\n    public void processingInstruction(String target, String data", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    return aetypes.Range(dict['from'], dict['to'])\n    return aetypes.Range(dict['from'], dict['to'], dict['by'])\n    return aetypes.Range(dict['from'], dict['to'], dict['by'], dict['step'])\n    return aetypes.Range(dict['from'], dict['to'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            Type type = null;\n            formatters = new Collection<MediaTypeFormatter>();\n            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection, controllerName, actionName, parameterNames), out type))\n            {\n                return type;\n            }\n            if (type == null)\n            {\n                type =", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value, entry,\n                callback=callback)\n            return True\n        return False\n    def _key_up(self, path, model, column=None):\n        if column is None:\n            column = self.get_columns()", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.core.Ordered#getOrder()\n     */\n    public int getOrder()\n    {\n        return Ordered.HIGHEST", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            f.readlines()\n        except ValueError:\n            # File contains blank lines\n            f.close()\n            f = None\n    if f is not None:\n        f.close()\n    if state == \"present\":\n        if password is None:\n            module.fail_json(msg=\"Password must be specified if user does not exist yet", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkValue\n            );\n        [PreserveSig]\n        int QueueEventParamInt(\n            [In]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        spm.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = REMOVE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element matches what is expected.\n        This verifies the tag of an element matches what is expected. If the\n        tag is", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "        clone._is_id = node._is_id\n    elif node.nodeType == Node.ENTITY_NODE:\n        clone = newOwnerDocument._create_entity(node.nodeName, node.publicId,\n                                                node.systemId, node.notationName)\n    elif node.nodeType == Node.NOTATION_NODE:\n        clone = newOwnerDocument._", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset)) {\n\t\t\t\tName name = new Name();\n\t\t\t\tdecodeName(name, new int[1], new int[1], decoder);\n\t\t\t\tkeyLocator.setKeyName(name);\n\t\t\t} else if (decoder.peekType(TlvTypeCodes.KeyLocatorDigest", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        //Updates the HUD\n        display.update(myPlayer, players, ActiveWeapons, ennemies);\n        \n        //Updates the camera\n        viewx = myPlayer.x - viewW", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().addGameJoin( action );\n        GameEngine.model().getGame().setRegistrationByColor( colorValue, action );\n        GameEngine.model().getGame().setRegistrationByCompany( company, action );\n        GameEngine.model().getGame().set", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n    filename = get_filename(r.headers)\n    with open(filename", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    weight = sum(\n        met.elements.get(\"C\", 0) * met.elements.get(\"H\", 0) * met.elements.get(\"O\", 0)\n        for met in reaction.metabolites\n    )\n    if weight == 0:\n        raise ValueError(\"No carbon containing metabolites in reaction", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(store__pootle_path=pootle_path,\n                                          store__user=user)\n    def get_for_store(self, store):\n        \"\"\"Returns units that fall below the `store` umbrella.\n        :param store: A :cls:`~pootle_store.models.Store` object.\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.logger.debug(\"Got ARP request for {} on port {}\".format(dstip, portnum))\n                    arp_reply = pktlib.arp()\n                    arp_reply.opcode = pktlib.arp.REPLY\n                    arp_reply.protodst = arp.protosrc\n                    arp_reply.protosrc = arp.protod", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.contains(item))\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n    m_RecentItems.add(item);\n    writeProps();\n    updateMenu();\n   ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (src.Map == null || target.Map == null ||!src.CanBeHarmful(target, false))\n                return false;\n            // No invulnerable NPC's\n            if (src.Blessed || (src is BaseCreature && ((BaseCreature)src).IsInvulnerable))\n                return false;\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod()", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.iter || p.typ == Node.opt) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray LeadingAnySet(Node p) {\n\t\tBit", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting for read data\");\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tMskJointVo voObj1 = (MskJointVo)obj1", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItem", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\nNext line of code:\n            for (k++; i < N1 + N2 + N3 + N4", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# Page model for Intel->Chargeback->Rates.\nimport attr\nfrom cached_property import cached_property\nfrom navmazing import NavigateToAttribute\nfrom navmazing import NavigateToSibling\nfrom wait_for import TimedOutError\nfrom widgetastic.utils import ParametrizedLocator\nfrom widgetastic.utils import Param", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.Discard );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock( offset, length, BufferLocking.Discard ), length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "from Screens.ScanSetup import ScanSetup, buildTerTransponder\nfrom Screens.ServiceScan import ServiceScan\nfrom Screens.MessageBox import MessageBox\nfrom Plugins.Plugin import PluginDescriptor\nfrom Components.Sources.FrontendStatus import FrontendStatus\nfrom Components.ActionMap import ActionMap\nfrom Components.NimManager import nimmanager,", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length!= 2) {\n                        throw new IllegalArgumentException(\"Invalid filter \" + filter);\n                    }\n                    TcpAddress.TcpAddressMask mask = new", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                for (int i = 0; i < bytesPerRow; i++) {\n                    prior[i] = curr[i];\n                }\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n            }\n        }\n        \n        /**\n        * @", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(type(s.get_interface()), str)\n        self.assertTrue(s.has_interface('foo.bar'))\n        self.assertFalse(s.has_interface('foo.baz'))\n        s =", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    for thing in m_product.get_basis():\n                        output += str(thing) + \"\\n\"\n                except (ValueError, TypeError):\n                    output += \"no elements\\n\"\n                output += \"\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n   ", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_nested_enum\\\".\",\n                \"optional_nested_enum: 2\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfor ( Object o : m.entrySet() ) {\n\t\t\t\tfinal Entry e = (Entry) o;\n\t\t\t\tqueueOperation( new Put( e.getKey(), e.getValue(),", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "        return action_message\nNext line of code:\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the modified attendance.\n        \"\"\"\n        self.ensure_one()\n        if self.last_attendance_id and self.last_attendance_id.check_out:\n            self.last_att", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tOrderSpecimenLiteVo specimen = orderInvestigationLiteVo.getSpecimen();\n\t\tif (specimen == null)\n\t\t\treturn null;\n\t\tOrderSpecimenLiteVoCollection specimens = domain.listSpecimens(form.getGlobalContext().Core.getPatientShort());\n\t\tif (specimens == null || specimens.size", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// Set the position of the upper left corner of this item.\n        /// </summary>\n        public void SetPosition(Point position)\n        {\n            POINT", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        tab = maker.make_tab(self, cwd, profile, debugtab)\n        self.add_tab(tab)\n        self.set_active_tab(tab)\n        return(tab)\n    def tab_close(self, tab):\n        \"\"\"Close a tab\"\"\"\n        if self.get_property('term_zoomed') == True:\n            err(\"You can", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                    continue;\n                }\n                throw new UnknowStructException( fragment );\n            }\n            return toReturn;\n        }\n        public void DllClose( Variant handle ) {\n            if ( handle.IsPtr )", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\"))\n\t\t\t\t\treturn true;\n\t\t\t\tif (IsEnum)\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t\t\tif (base_type!=", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n*/", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self.protocol = protocol\n        self._context = OpenSSL.SSL.Context(self.protocol)\n        self._context.set_verify(_stdlib_to_openssl_verify[ssl.CERT_REQUIRED], self._verify_callback)\n        self._context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n        self._context.set", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n\t\t\tthis.label8.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label8);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.set_current_page(old_num)\n        headbook.set_tab_reorderable(True, page_reordered)\n    \n    # Connecting the game widgets to the headbook\n    \n    def callback (notebook, gpointer, page_num):\n        if page_num == -1:\n            return\n        gmwidg = key2", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-right-Reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-left-Reverse\": QKeySequence(Qt", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", jtaDataSource=\" + this.jtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart!= null)\n    {\n      IEditorInput input = editorPart.getEditorInput();\n      if (input instanceof IFileEditorInput)\n      {\n        IFileEditorInput fileEditorInput = (IFileEditorInput)input;\n        return", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"Attach\";\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        return sb == null? string : sb.toString();\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte[] key = Encoding.Default.GetBytes (\"Jefe\");\n\t\t\tbyte[] data = Encoding.Default.GetBytes", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_sum += 4; // intVal\n\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4); // intVal\n\t    sum += current_sum;\n\t    current_sum = 0;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); //", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = java.GetValue(\"JavaHome\") as String;\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome!= null)\n        return", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l.split()[1]\n        # attempt to find job by name\n        for l in self.lines:\n            if re.match(r'%s' % name, l):\n                if job is not None:\n                    if re.match(r'%s' % job, l):\n                        return [name, l]\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Nikita Akimov\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n                continue;\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    if(peptideLength == MIN_PEPTIDE_LENGTH)\n                        rankCounts[i] = minLikelihood;\n                   ", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        neighbors.add(1);\n        neighbors.add(2);\n        neighbors.add(3);\n        val iterator = vertex.neighbors();\n        while (iterator.hasNext()) {\n            neighbors.remove(iterator.next());\n        }\n        assertTrue(neighbors.isEmpty());\n    }\n    @Test\n    @DisplayName(\"contains() should return true if the vertex", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[int(self.choice)-1]\n                    print(self.grn+\"[*] Showing packet \"+self.choice+\" of \"+str(len(self.cap))+\": \"+self.packet.summary()+self.blk)\n                    time.sleep(1)\n                    print(self.grn+\"[*] Packet details: \"+self.blk", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 162);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            // \n            // label3\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': u\"", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                SDOType lookup = (SDOType) aHelperContext.getTypeHelper().getType(targetNamespace, sdoTypeName);\n                if ((lookup!= null) && lookup.isFinalized()) {\n                    if (isReturnAllTypes()) {\n                        QName qname = new QName(targetNamespace, sdoTypeName);\n                        get", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self.holidays_refuse_notificate(cr, uid, ids, context=context)\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the selected business object\n        /// </summary>\n        IBusinessObject IBOColSelector.SelectedBusinessObject\n        {\n            get { return this.SelectedBusinessObject; }\n            set { this.SelectedBusinessObject = value", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line: {0} ({1}) {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext)domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getId());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\t//This is to overcome a bug in both Sybase", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            verbose=verbose)\n        if status:\n            return status\n        build_end = time()\n        notify_build_done(build_end - build_start)\n        if android:\n            # Build the APK\n            apk_builder_dir = \"support/android-rs", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pEst = estP;\n\t\t\tdouble nEst = estN;\n\t\t\tif (estP > 0) {\n\t\t\t\tpEst = 0;\n\t\t\t}\n\t\t\tif (estN > 0) {\n\t\t\t\tnEst = 0;\n\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, gitStash.Message, gitItemStatuses);\n            }\n            Loading.IsAnimating = false;\n            Loading.Visible = false;\n            Stashes.Enabled = true;\n            refreshToolStripButton.Enabled = true;\n            toolStripButton", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert lattice.cbuffer.get_object(bm1_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm2_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm0_index).out_address == \\\n        output", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.scheme.equals(that.scheme) && this.realm.equals(that.realm) && this.host.equals(that.host) &&", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n        public System.IAsyncResult BeginAddLong(long a, long b, System.AsyncCallback callback,", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMit", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault : \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    archive_index = load_archive_index(args.index_file)\n    args.func(archive_index, args)\n    sys.exit(0)\n    archive_index = load_archive_index(args.index_file)\n    args.func(archive_index, args)\n    sys.exit(0)\n    archive_index = load_archive_index(args.index_file)\n   ", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = mosi\n        self.miso_bits = miso\n        self.ss, self.es = ss, es\n        # Handle command tokens.\n        if self.state == 'IDLE':\n            self.handle_command_token(mosi, miso)\n        elif self.state == 'HANDLE CMD%d", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          // literal, line 200\n          if (!(eq_s_b(1, \"a\"))) {\n            break lab0;\n          }\n          // ], line 200\n          bra = cursor;\n          // <-, line 200\n          slice_from(\"e\");\n         ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                o = cls.newInstance();\n                dins.readObject(o);\n                if (cls.isInstance(o)) {\n                    cd.last = o;\n                    cd.nreceived++;\n                    cd.last_time = utime_now();\n                    cd.max_interval = Math.max(cd.max_interval, cd.last_time - cd.min_interval);\n                    cd.min", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                result.append(extension.get_critical())\n                return result\n        return None\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_extension('extendedKeyUsage')\n    def _get_basic_constraints(self):\n        return self", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (_slots.find (i->first)!= _slots.end ());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t/* Call the slot */\n\t\t\t\ti->second (%s);\n\t\t\t\t/* Remove the slot from the list */\n\t\t\t\t_slots.erase (i);\n\t\t\t}\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    return [ Interval(X.begin, 0x10000), Interval(0x10000, X.end) ]\n    # The first value is represented by 2 bytes, the second by 4 bytes.\n    # The trigger sequence is the utf16 representation of the first value.\n    # The target sequence is", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tif (StartOf(14)) {\n\t\t\t\t\tGet();\n\t\t\t\t} else {\n\t\t\t\t\tGet();\n\t\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tExpect(29);\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# -*- coding: utf-8 -*-\n##############################################################################\n#\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUpTestPermissions();\n        List<PermissionEntry> permissions = permissionService.getPermissions", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "        for device in devices:\n            assert isinstance(device, Device)\n    @pytest.mark.match\n    def test_list_devices_with_match(self, context):\n        devices = list(context.list_devices().match_subsystem('input'))\n        for device in devices:\n            assert device.subsystem == 'input'\n    @pytest.mark.match", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    user.mainmenu()\n    user.menu.menulist()\n    user.menu.fairyselect()\n   ", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Fit:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            ItemID = 0x1011 + (Keys.Count * 0x1000);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Ring;\n            public InternalTarget(KeyRing ring) : base(0, false, TargetFlags.None) { m_Ring =", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (String device : devices) {\n            Tuner tuner = new TunerHdhr(device, addDevice, false); // automatically added to TunerManager list\n            tuner.liveDevice = true;\n            tunerList.add(tuner);\n            // DRS 20181103 - Adding IP address to HD", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n      jobs.put(Version.DAY_BY_DAY_STICKERS, new StickerAdditionMigrationJob(B", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        throw new IllegalArgumentException(\"Line \" + lineCount + \" in RegexNER mapping file is not formatted correctly. It should be tab-separated, with at least two columns.\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String token : split[", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for p in sub_path:\n                if p.exists() and p.is_file():\n                    if p.is_absolute():\n                        return p\n                    else:\n                        return os.path.join(source_dir, p)\n            # see if we find it using the path in env['ENV'][var]\nNext line of code:\n            for", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_wkt(geom)\n            for k, v in attrs.iteritems():\n                f[k", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.port!= self.have.port:\n            raise F5ModuleError(\n                \"The port number cannot be changed\"\n            )\n        if self.want.ip!= self.have.ip:\n            raise F5ModuleError(\n                \"The IP address cannot be changed\"\n            )\n        return None\n    @property\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.location.is_opened and\n            check_tree_path(self.location.currently_selected, self.context['object'].tree_path))\nNext line of code", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "        }\n        return result;\n    }\n    public IAction getActionObject(String className, String[] filterPath) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(className);\n        if (classPath!= null) {\n            // using reflection, load the class for the service\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Manifest file %s does not exist\" % manifestSrc)\n    return 0\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job job = new WorkspaceJob(\"WorkspaceAction\") { //$NON-NLS-1$\n                public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n                    errorStatus[0] = execute(getSelectedResources(), monitor);\n                    return errorStatus[0];\n                }\n            };\n            job.setRule(get", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\treturn true;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tdata=(AggregateRowsData)sdi;\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "# coding: utf-8\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            int walkingrange = Utility.ToInt32(swalkingrange);\n            if (walkingrange < 0)\n                walkingrange = 0;\n            //HomeRange\n            int homerange", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not correct.\")\n        error_context.context(\"Verify guest services are up\", logging.info)\n        session.sendline(\"service --status-all\")\n        time.sleep(10)\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        assertThat(rc.get(), is(5));\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x3FFF) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if (value <= 0x1FFFFFFF) {\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t\telse\n\t\t\t\tthrow", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.env.begin_task(descr, refresh)\n        self.fm.execute_console(\"unarchive \" +''.join(au_flags))\n        self.fm.env.end_task()\nclass unarchive(Command):\n    def execute(self):\n        \"\"\" Extracts an archive to the current directory \"\"\"\n        if self.arg(1) ==", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, null);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringCustomType ()\n\t\t{\n\t\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"url\" in cmd.parameters:\n                userstate.url = cmd.parameters[\"url\"]\n            if \"user_id\" in cmd.parameters:\n                userstate.user_id = cmd.parameters[\"user_id\"]\n            if \"user_name\" in cmd.parameters:\n                userstate", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player oldLeader, Player newLeader) {\n        PlayerGroup group = oldLeader.getPlayerGroup2();\n        if (group", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return highlight(self.toks, formatter, outfile)\n        return \"\\n\".join(self.rawcols())\n        return highlight(self.toks, formatter, outfile)\n        return \"\\n\".join(self.rawcols())\n        return highlight(self.toks, formatter, outfile)\n        return \"\\n\".join(self.rawcols())\n       ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None,", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    } while (!(parent instanceof Grid));\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn SKIP_BODY;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                Perception = Convert.ToByte(ReadElement(element, \"Perception\"));\n                FramesLoaded = Convert.ToByte(ReadElement(element, \"FramesLoaded\"));\n                ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                GrayImageIndex = Convert.ToInt32(ReadElement(element, \"GrayImageIndex", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                        m_key[i] = new ExodusActivation();\n                    else\n                        m_key[i] = new PeerlessActivation();\n\t\t\t\t}\n\t\t\t\tfrom.AddToBackpack( new BaseActivation[3] { m_key[0], m_key[1], m_key[2] } );\n\t\t\t}\n\t\t}\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\nNext line of code:\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\nNext line of code:\n\t\t\tcoll.add(beans[i].buildVo());\nNext line of code:\n\t\t}\nNext line of code:\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, new int[]{6}, new ECB(1, 10), new ECB(1, 18), new ECB(1, 26), new ECB(1, 34)),\n                new Version(2, new int[]{6, 26}, new ECB(2, 17", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// From the official Argon2 1.3 reference code package\n\t\t\t//", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend How much mana is to be sent.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Copy this file to app_server/settings_local.py and adjust to your specification (it should work fine out of the box)\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = PhoneNumberUtils.stringFromStringAndTOA(p.readString(), p.readInt());\n            dc.name = p.readString();\n            dc.uusInfo = p.readString();\n            dc.isMpty = p.readInt()!= 0;\n            dc.isMT = p.readInt()!= 0;\n            dc.isMpty =", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomain", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int i = x + y * xSizeP;\n                newVertices[i] = leftBottomCorner + new Vector3(x, y, 0) * 2f;\n                newNormals[i] = new Vector", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt3 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt4 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt5 = rand.nextInt(5000);\nNext", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addCaretListener(final CaretListener listener)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void removeCaretListener", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static class ExportedObject {\n        int identifier;\n        Object object;\n        Method[] methods;\n    }\n    private", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 2;\n            }\n            /**\n             *", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position.To2D()) <= spell.Width + target.BoundingRadius &&\n                                    minionPrediction.CastPosition.To2D().Distance(position.To2D()) <= spell.Width + target.BoundingRadius)\n                                {\n                                    result.Add(minion);\n                                    break;\n                                }\n                            }\n                            break;\n                        case CollisionableObjects", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (x.equals(y)) return true;\n        if (graph.isAdjacentTo(x, y)) return true;\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (existsInducingPathInto(y, z, graph)) return true;\n        }\n        return false;\n    }\n    public", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (!super.matches(other)) {\n            return false;\n        }\n        if (this.attachmentId == null) {\n            if (other.attachmentId!= null) {\n                return false;\n            }\n        } else if (!this.attachmentId.equals(other.attachmentId)) {\n            return false;\n        }\n        if (this", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        Mobile m = mobiles[i];\n                        if (m!= from && SpellHelper.ValidIndirectTarget(from, m) && from.CanBeHarmful(m, false))\n                        {\n                            from.DoHarmful(m);\n                            AOS.Damage(m, from, m_Item.GetDamage(), 0, ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Remove(History.Keys.First());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (message)\n\t\t\t{\n\t\t\t\tInvokeUserMessage(this, user, msg);\n\t\t\t}\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[]", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                   ", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public boolean g() {\n        return this.channel!= null && this.channel.isOpen();\n    }\n    public void close(IChatBaseComponent ichatbasecomponent)", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                ll = z_index_dict[z_key][1]\nNext line of code:\n                z_arr[p_index, kk, ll] = z_dict[z_key][per][0] + 1j*z_dict[z_key][per][1]\nNext line of code:\n                z_err_arr[p_index, kk, ll", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany, recipients.size());\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if self.config[\"tools\"][\"rustc-with-gold\"]:\n            env[\"R", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, test_jsons in iteritems(type_paths):\n                for test_json in test_jsons:\n                    source_file = source_files.get(test_json[\"source_file\"])\n                    if source_file is None:\n                        source_file = source_files[test_json[\"source_file\"]] = SourceFile(tests_root, test_json[\"", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        if (compiledScript!= null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", new NodeModel());\n        binding.setVariable(\"scriptContext\", new Script", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E = np.reshape(grad_E, (-1,3))\n        transformed_grad.append", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.id == null && ((ims.vo.IId) obj).id == null)\n\t\t\treturn 0;\n\t\tif (this.id == null)\n\t\t\treturn 1;\n\t\tif (((ims.vo.IId) obj).id == null)\n\t\t\treturn -1;\n\t\treturn this.id.compareTo(((ims", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n        assertTrue(found.contains(stacks[0]));\n        assertTrue(found.contains(stacks[1]));\n        assertTrue(found.contains(stacks[3]));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTags", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\nNext line of code:\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParameterCode(\"EXCLUSION", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// (...)\n\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\tvar attrs = candidate.Attrs;\n\t\t\t\tvar attrs2 = pattern.Attrs;\n\t\t\t\tif (!AttributesMatch(attrs, attrs2, ref captures, out unmatchedAttrs))\n\t\t\t\t\treturn false;\n\t\t\t\tif (attrs2.Calls(S", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Count == 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                int param = zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useqif\");\n                if (extendedWillHit >= param", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Context Menus\n\t\t// Context Menu: General Context Menu\nNext line of code:\n\t\t// Context Menu: General Context Menu\n\t\t{\n\t\t\tmenuItems = new ContextMenuItems();\n\t\t\tmenuItems.add(0, this, new ims.framework.ContextMenuAction(\"New\", \"New", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall Python and Node prerequisites.\n\"\"\"\nimport hashlib\nimport os\nimport re\nimport subprocess\nimport sys\nfrom distutils import sysconfig\nfrom paver.easy import BuildFailure, sh, task\nfrom.utils.envs import Env\nfrom.utils.timer import timed\nPREREQS_STATE_DIR = os", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2o': self.env.ref('test_testing_utilities.sub2').id\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.m2o = self.env.ref('test_testing_utilities.sub2').id\n        with self.assertRaises(AssertionError):\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2)).change_index(y) == Sum(x, (y, 1, 2))\n    assert Sum(x, (x, 1, 2)).change_index(y, z) == Sum(x, (z, 1, 2))\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._notifyAction = NotifyCollectionChangedAction.Add;\n                this._newItemList = ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = NotifyCollectionChangedAction.Remove;\n                this._oldItemList = ArrayList.ReadOnly(changedItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            streamWriter.close();\n            writer.close();\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            writer.close();\n            reader.close();\n            objectToXMLDocumentTest(testDocument);\n        }\n    }\n    public", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nNext line of code:\nConsole.WriteLine (\"Height: {0}\", ide.height);\nNext line of code:\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nNext line of code:\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nNext line", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                if ((l.status & Label.JSR)!= 0) {\n                    l.successor = JSR;\n                }\n            }\n            if ((l.status & Label.REACHABLE)!= 0) {\n                l.status |= Label.SUBROUTINE;\n                l.status |= Label.VISITED;\n                l.addTo", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\tcomboLabelPosition.select(PageSupport.getPosition(position));\n\t}\n\t\tprivate Position getPosition() {\nNext line of code:\n\t\treturn PageSupport.getPosition(comboLabelPosition.getSelectionIndex());\n\t\t}\n\t\t@Override\n\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\tif(e.getSource() == comboLabelPosition)", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.f, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e || f || K)  # noqa\n        hm", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            tree.setFolder(overallNodeName, connectionData, disableTreeSelection);\n        }\n    }\n    /**\n     * Gets the tree.\n     *\n     * @return the tree\n     */\n    public FSTree getTree() {\n        return tree;\n    }\n    /**\n     * Gets the tree model.\n    ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                            (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or 0.0\n        class PayslipRun(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def sum(self,", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        dVdzdOm.append(cosmo.dVdzdOm())\n        #Number of Msun objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        mf.append(cosmo.MF(marr, zi))\n        #Number of Msun objects/Mpc^3 (i", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() * 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n        d.width = font.getSize() * 2;\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.all_in_all(phi=phi,ref_p=None,flag=flag)\n        #print self.p2\n        #print self.face\n        #print self.T\n        #print self.r\n        #print self.p3\n        #print self.p4\n        #print self.p5\n       ", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = window.IsVisible? Visibility.Hidden : Visibility.Visible;\n\t\t}\n\t\tprivate void ShowOrHide(SecurityWindow window)\n\t\t{\n\t\t\tShowOrHide(window);\n\t\t}\n\t\tprivate void ShowOrHide(OrdersWindow window)\n\t\t{\n\t\t\tShowOrHide(window);\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                   ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.onMoreMessagesLoaded(query);\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.queryId.equals(queryId)) {\n                    return query;\n                }\n            }\n            return null;\n        }\n    }\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t} else {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < MAX_LOG - 1; i++) {\n\t\t\tfinal Iso7816.Response rsp = tag.readRecord", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\"\"\"\nclass Parser(Parser):\n    endian = LITTLE_ENDIAN\n    magic = MAGIC\n    def createFields(self):\n        yield MarkerFlags(self, \"flags\", \"Marker flags\")\n        yield String(self, \"signature\", 7, \"Signature\")\n        yield UInt8(self, \"ver_extract\", \"Version needed to", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n\t/**\n\t * The constant CONNECTED\n\t */\n\tprivate static final String CONNECTED = \"connected\";\n\t/**\n\t * The constant CONNECTION_FAILED\n\t */\n\tprivate static final String CONNECTION_FAILED = \"connectionFailed\";\n\t/**\n\t * The constant CONNECTION_SUCCESS\n\t */\n\tprivate static final String CONNECTION_SUCCESS = \"", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = environ['PATH_INFO']\n        for path_prefix, app in self.apps:\n            if path.startswith(path_prefix):\n                return app(environ, start_response)\n        return self.not_found(environ, start_response)\n    def not_found(self, environ, start_response):\n        \"\"\"Return a 404 response.\"\"\"\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdataobj = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( dataobj, sys.argv[ 2 ] )\n\t\tmodel.setnetwork( model.network, sys.argv[ 3 ] )\n\t\tprint \"Score = %s\" % model.score()\n\t\tprint \"Topological Order = %s", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            entries[entry_value] = (entry_name, displayname, desc)\n        # Create the user-defined enum type\n        return typemaps.create_user_enum(type_name, entries)\n    #---------------------------------------------------------------------------\n    def addressBlock_vendorExtensions(self, vendorExtensions: minidom.Element, C: comp.Addrmap)", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    MessageBox.Show(\"No FOG Service Modules Found!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate FOG Service Modules!\");\n                this.Close();\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    if(this.trianglePoint == -1)\n                        throw new IllegalStateException(\"render called between beginTriangle and endTriangle\");\n                    if", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    exposedHeaders += ','+ header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Peek();\n                    if (driver.IdleSince.Add(settings.ConnectionResetTimeout) > now)\n                        break;\n                    oldDrivers.Add(idlePool.Dequeue());\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Returns a list of all the drivers in the", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = [var, var]\n    # List format.\n    else:\n        var = list(var)\n    for i, val in enumerate(var):\n        if not isinstance(val, (int, float)):\n            raise ValueError('Invalid {0} provided: {1}'.format(name, var))\n        var[i]", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nNext line of code:\nQUEST.addTalkId(WK_ROMP)\nNext line of code:\nQUEST.addKillId(MOBS)\nNext line of code:\nQUEST.addKillId(MOBS)\nNext line of code:\nQUEST.addKillId(MOBS)\nNext", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1 * 60)) * 100);\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"D2", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            Attributes = new AttributeCollection(this);\n        }\n        public void Use()\n        {\n            if (Active) return;\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for x in [self.reactions, self.metabolites, self.genes]:\n            for y in x:\n                y._model = self\n        self._trimmed = False\n        self._trimmed_genes = []\n        self._trimmed_reactions = {}\n    def trim(self, genes=None, reactions=None,", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(java.util.Iterator iterator = beans.iterator(); iterator.hasNext();)\n\t\t{\nNext line of code:\n\t\t\tTumourGroupListVoBean bean = (TumourGroupListVoBean)iterator.next();\nNext line of code:\n\t\t\tTumourGroupListVo ref = bean.buildVo();\nNext line", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\nNext line of code:\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\nNext line of code:\n\t\t\t\tcy = lines[selectedLine].getCenterY();\nNext line of code:\n\t\t\t\th = lines[selectedLine].height;\nNext", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set, 0.5f);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the list with the bookmarks.\n     */\n    private void fillData() {\n    \tmCursor = mDbAdapter.fetchWeaveBookmarks();\n    \tListAdapter adapter = new Weave", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n            ARow.SetCountry(\"\");\n            ARow.SetComment(\"\");\n            ARow.SetLevel(\"\");\n            ARow.SetInterest", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresTmh \t= new int[length];\nNext line of code:\n\t\tint[] \t\tscoresSig \t= new int[length];\nNext line of code:\n\t\tchar[] \t\tstructure \t= protein.getStructure();\nNext line of code:\n\t\tint[] \t\tpredictions", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
